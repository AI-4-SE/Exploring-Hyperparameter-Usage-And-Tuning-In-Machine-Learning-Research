{
    "linear-mesh/agents/dqn/agent.py": {
        "tensorflow": {
            "Session_53": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cond_89": {
                "variable": {
                    "value": "self.act_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.random_uniform([1], dtype=tf.float32)[0] > self.eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.argmax(self.qnetwork_local.output, output_type=tf.int32, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.random_uniform([1], minval=0, maxval=action_size, dtype=tf.int32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "variable": {
                    "value": "self.no_noise_act_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.qnetwork_local.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_123": {
                "variable": {
                    "value": "Qvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "inference_local",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_125": {
                "variable": {
                    "value": "target_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "inference_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_77": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_90": {
                "input": {
                    "value": "self.qnetwork_local.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "local_variables_initializer_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "linear-mesh/agents/dqn/model.py": {
        "tensorflow": {
            "import_meta_graph_37": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "checkpoint_file + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_40": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_41": {
                "variable": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_42": {
                "variable": {
                    "value": "self.gather_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_43": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_44": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_45": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unstack_51": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "static_rnn_52": {
                "variable": {
                    "value": "(layer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "tf.contrib.rnn.LSTMCell(8, activation=tf.nn.relu)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.unstack(self.input, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_53": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_56": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer[-1], 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 64, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_58": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer[-1], 128, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 64, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.action_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_63": {
                "variable": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.size(self.gather_index))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pad, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pad, self.gather_index]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_67": {
                "variable": {
                    "value": "gathered",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([pad, self.gather_index], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "gathered",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.output, ind)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(gathered, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_69": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "gathered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.output, ind)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(gathered, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_72": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(labels=self.y_input, predictions=gathered)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_77": {
                "variable": {
                    "value": "optimize",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.gather_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "gather_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "'inference_' + self.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "'training_' + self.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "'placeholders_' + self.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "latest_checkpoint_38": {
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/'.join(checkpoint_file.split('/')[:-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_52": {
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_63": {
                "input": {
                    "value": "self.gather_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "linear-mesh/agents/original/dqn-agent-v1.py": {
        "tensorflow": {
            "Sequential_18": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_19": {
                "units": {
                    "value": "inNum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(inNum,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_20": {
                "units": {
                    "value": "outNum",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_21": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "linear-mesh/agents/original/dqn-agent-v2.py": {
        "tensorflow": {
            "Sequential_18": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_19": {
                "units": {
                    "value": "inNum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(inNum,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_20": {
                "units": {
                    "value": "outNum",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_21": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "linear-mesh/agents/ddpg/agent.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.LR_ACTOR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.LR_CRITIC",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_79": {
                "variable": {
                    "value": "self.actor_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_80": {
                "variable": {
                    "value": "self.critic_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.LR_ACTOR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.LR_CRITIC",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_96": {
                "variable": {
                    "value": "self.actor_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_97": {
                "variable": {
                    "value": "self.critic_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_162": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.critic_local(states, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Q_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rewards + gamma * max_Qhat * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_214": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.LR_ACTOR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_216": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.LR_CRITIC",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_310": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([e.state for e in experiences if e is not None], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_312": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.action for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.reward for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_316": {
                "variable": {
                    "value": "next_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([e.next_state for e in experiences if e is not None], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "variable": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__166": {
                "parameters": {
                    "value": "self.critic_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "self.actor_local.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "models/ddpg_actor.torch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_226": {
                "obj": {
                    "value": "self.critic_local.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "models/ddpg_critic.torch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_230": {
                "f": {
                    "value": "models/ddpg_actor_15_convergence.torch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_231": {
                "f": {
                    "value": "models/ddpg_critic_15_convergence.torch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_233": {
                "f": {
                    "value": "models/ddpg_actor_15_convergence.torch",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_234": {
                "f": {
                    "value": "models/ddpg_critic_15_convergence.torch",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "linear-mesh/agents/ddpg/model.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "np.ceil(state_size / (state_size // 4)).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_49": {
                "variable": {
                    "value": "self.lstm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fc_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_52": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fc2_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc3_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc3_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_69": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "state.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.fc_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "state.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.fc_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_105": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_107": {
                "variable": {
                    "value": "self.lstm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_108": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fcs1_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fcs1_units + action_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc2_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc3_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_125": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "state.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.fc_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_126": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "state.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.fc_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, action)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}