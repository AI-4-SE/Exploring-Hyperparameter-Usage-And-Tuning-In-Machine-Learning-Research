{
    "model/data_handler.py": {
        "torch": {
            "one_hot_116": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(pad(word[:nb], nb, True))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "len(vocab.itos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_117": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor([1] if len(word) is 0 else word)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "len(vocab.itos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_118": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(pad(word[-nb:], nb))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "len(vocab.itos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(B, M, E)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "pad(word[:nb], nb, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "[1] if len(word) is 0 else word",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "pad(word[-nb:], nb)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/net.py": {
        "torch": {
            "sum_46": {
                "input": {
                    "value": "torch.exp(1 - F.cosine_similarity(output, target, dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RNN_13": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "params.bme_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "params.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.rnn_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.out_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.out_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "torch.exp(F.relu(F.cosine_similarity(output, target, dim=2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_46": {
                "input": {
                    "value": "1 - F.cosine_similarity(output, target, dim=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GRU_15": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "params.bme_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "params.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_45": {
                "input": {
                    "value": "F.relu(F.cosine_similarity(output, target, dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "params.bme_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "params.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "F.cosine_similarity(output, target, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_46": {
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_45": {
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_117": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_152": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "restore_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.experiment_dir, args.restore_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_120": {
                "seed": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_121": {
                "seed": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'loss': mean_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.experiment_dir, 'best_loss.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.experiment_dir, 'latest.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_69": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch.input.to(params.device).float())",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "randrange(params.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_82": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'loss': mean_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.experiment_dir, 'best_loss.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.experiment_dir, 'latest.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}