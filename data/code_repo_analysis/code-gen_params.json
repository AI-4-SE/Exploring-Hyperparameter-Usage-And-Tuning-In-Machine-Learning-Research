{
    "CodeSearchNet/src/utils/embeddingvis.py": {
        "sklearn": {
            "TSNE_52": {
                "variable": {
                    "value": "emb_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "arguments['--distance-metric']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "arguments",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/conv_self_att_encoder.py": {
        "tensorflow": {
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "self_attention_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_47": {
                "variable": {
                    "value": "next_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "current_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_tokens_embeddings",
                            "variable"
                        ],
                        [
                            "activation_fun(next_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current_embeddings, keep_prob=self.placeholders['dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_width",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_59": {
                "variable": {
                    "value": "current_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_tokens_embeddings",
                            "variable"
                        ],
                        [
                            "activation_fun(next_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current_embeddings, keep_prob=self.placeholders['dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.placeholders['dropout_keep_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "seq_token_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "seq_token_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.placeholders['tokens_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/conv_seq_encoder.py": {
        "tensorflow": {
            "reduce_sum_57": {
                "variable": {
                    "value": "seq_token_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "seq_token_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.placeholders['tokens_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "1dcnn_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_41": {
                "variable": {
                    "value": "next_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "current_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_tokens_embeddings",
                            "variable"
                        ],
                        [
                            "activation_fun(next_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current_embeddings, keep_prob=self.placeholders['dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_width",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "current_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_tokens_embeddings",
                            "variable"
                        ],
                        [
                            "activation_fun(next_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current_embeddings, keep_prob=self.placeholders['dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.placeholders['dropout_keep_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.get_hyper('max_num_tokens'), self.get_hyper('token_embedding_size')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "input": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='position_embeddings', initializer=tf.truncated_normal_initializer(stddev=0.02), shape=[self.get_hyper('max_num_tokens'), self.get_hyper('token_embedding_size')])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_70": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/encoder.py": {
        "tensorflow": {
            "placeholder_75": {
                "variable": {
                    "value": "self.__placeholders[dropout_keep_rate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_rate",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/masked_seq_encoder.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "self.placeholders[tokens_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.get_hyper('max_num_tokens')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tokens_mask",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/nbow_seq_encoder.py": {
        "tensorflow": {
            "reduce_sum_31": {
                "variable": {
                    "value": "seq_token_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "seq_token_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.placeholders['tokens_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "nbow_encoder",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/rnn_seq_encoder.py": {
        "tensorflow": {
            "LSTMCell_26": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DropoutWrapper_34": {
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.GRUCell(hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "dropout_keep_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "state_keep_prob": {
                    "value": "recurrent_dropout_keep_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_28": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MultiRNNCell_61": {
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[__make_rnn_cell(cell_type, hidden_size, dropout_keep_rate, recurrent_dropout_keep_rate) for _ in range(num_layers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "dynamic_rnn_101": {
                "variable": {
                    "value": "(outputs, final_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell_fwd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_deep_rnn_cell(num_layers=self.get_hyper('rnn_num_layers'), cell_type=cell_type, hidden_size=self.get_hyper('rnn_hidden_dim'), dropout_keep_rate=self.placeholders['rnn_dropout_keep_rate'], recurrent_dropout_keep_rate=self.placeholders['rnn_recurrent_dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_123": {
                "variable": {
                    "value": "(outputs, final_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "rnn_cell_fwd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_deep_rnn_cell(num_layers=self.get_hyper('rnn_num_layers'), cell_type=cell_type, hidden_size=self.get_hyper('rnn_hidden_dim'), dropout_keep_rate=self.placeholders['rnn_dropout_keep_rate'], recurrent_dropout_keep_rate=self.placeholders['rnn_recurrent_dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "rnn_cell_bwd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_deep_rnn_cell(num_layers=self.get_hyper('rnn_num_layers'), cell_type=cell_type, hidden_size=self.get_hyper('rnn_hidden_dim'), dropout_keep_rate=self.placeholders['rnn_dropout_keep_rate'], recurrent_dropout_keep_rate=self.placeholders['rnn_recurrent_dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell=rnn_cell_fwd, inputs=inputs, sequence_length=input_lengths, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw=rnn_cell_fwd, cell_bw=rnn_cell_bwd, inputs=inputs, sequence_length=input_lengths, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(outputs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.placeholders[tokens_lengths]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tokens_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "self.placeholders[rnn_dropout_keep_rate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rnn_dropout_keep_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self.placeholders[rnn_recurrent_dropout_keep_rate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rnn_recurrent_dropout_keep_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BasicRNNCell_30": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_108": {
                "values": {
                    "value": "layer_final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_131": {
                "values": {
                    "value": "layer_final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "rnn_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "variable": {
                    "value": "token_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(tf.shape(seq_tokens)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_176": {
                "variable": {
                    "value": "token_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(tf.shape(seq_tokens)[1]), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(token_mask, multiples=(tf.shape(seq_tokens_lengths)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(token_mask < tf.expand_dims(seq_tokens_lengths, axis=-1), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(tf.shape(seq_tokens_lengths)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_177": {
                "variable": {
                    "value": "token_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "token_mask < tf.expand_dims(seq_tokens_lengths, axis=-1)",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "final_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell=rnn_cell_fwd, inputs=inputs, sequence_length=input_lengths, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw=rnn_cell_fwd, cell_bw=rnn_cell_bwd, inputs=inputs, sequence_length=input_lengths, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_137": {
                "values": {
                    "value": "layer_final_states",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_177": {
                "input": {
                    "value": "seq_tokens_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.placeholders['tokens_lengths']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_175": {
                "input": {
                    "value": "seq_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.placeholders['tokens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_176": {
                "input": {
                    "value": "seq_tokens_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.placeholders['tokens_lengths']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/self_att_encoder.py": {
        "tensorflow": {
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "self_attention_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "seq_token_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "seq_token_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.placeholders['tokens_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/seq_encoder.py": {
        "tensorflow": {
            "placeholder_51": {
                "variable": {
                    "value": "self.placeholders[tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.get_hyper('max_num_tokens')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.glorot_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.metadata['token_vocab']), self.get_hyper('token_embedding_size')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='token_embeddings', initializer=tf.glorot_uniform_initializer(), shape=[len(self.metadata['token_vocab']), self.get_hyper('token_embedding_size')])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(token_embeddings, keep_prob=self.placeholders['dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.placeholders['dropout_keep_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "embedding_lookup_76": {
                "params": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='token_embeddings', initializer=tf.glorot_uniform_initializer(), shape=[len(self.metadata['token_vocab']), self.get_hyper('token_embedding_size')])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(token_embeddings, keep_prob=self.placeholders['dropout_keep_rate'])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "token_inp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/encoders/utils/bert_self_attention.py": {
        "tensorflow": {
            "list_variables_287": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_315": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_367": {
                "variable": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_381": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, 1.0 - dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding_table, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_506": {
                "variable": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_514": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_631": {
                "variable": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "from_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(from_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "query_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_639": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "key_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_647": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "value_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_666": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(from_tensor_2d, num_attention_heads * size_per_head, activation=query_act, name='query', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(query_layer, batch_size, num_attention_heads, from_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=key_act, name='key', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(key_layer, batch_size, num_attention_heads, to_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_667": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_685": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_692": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, to_seq_length, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_697": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_700": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "dropout(attention_probs, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_703": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_891": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_907": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_334": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_365": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_373": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_374": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_375": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_377": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_439": {
                "variable": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_445": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_446": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_447": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_448": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_453": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_481": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "full_position_embeddings",
                            "variable"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_596": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, num_attention_heads, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_599": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ],
                        [
                            "output_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_672": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_707": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_712": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_921": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ],
                        [
                            "output_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_173": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_467": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_507": {
                "tensor": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ],
                        [
                            "to_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_94": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json_file",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                },
                "default_name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_237": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_238": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_792": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_832": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "intermediate_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3072",
                            "Method Argument"
                        ],
                        [
                            "3072",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "intermediate_act_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation('gelu')",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_840": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(attention_output, intermediate_size, activation=intermediate_act_fn, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_947": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_677": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_795": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_818": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_823": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_831": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_839": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_797": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_822": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/model_restore_helper.py": {
        "tensorflow": {
            "name_scope_40": {
                "name": {
                    "value": "restore",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variables_initializer_56": {
                "var_list": {
                    "value": "variables_to_initialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "CodeSearchNet/src/models/model.py": {
        "tensorflow": {
            "ConfigProto_148": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_153": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_154": {
                "variable": {
                    "value": "self.__sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Summary_189": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "self.__placeholders[dropout_keep_rate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_248": {
                "variable": {
                    "value": "self.__placeholders[sample_loss_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "np.ones(shape=[self.hyperparameters['batch_size']], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hyperparameters['batch_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_loss_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diag_part_353": {
                "variable": {
                    "value": "correct_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "cosine_similarities",
                            "variable"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "-all_pair_distances",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "gradients_378": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.ops['loss']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.graph.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_379": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.ops['loss'], trainable_vars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.hyperparameters['gradient_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "self.ops[code_representations]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "language_encoders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.ops['query_representations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "self.ops['code_representations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "code_query_cooccurrence_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_294": {
                "variable": {
                    "value": "per_sample_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.range(tf.shape(self.ops['code_representations'])[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.ops['query_representations'], self.ops['code_representations'], transpose_a=False, transpose_b=True, name='code_query_cooccurrence_logits')",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.ops['query_representations'], self.ops['code_representations'], transpose_a=False, transpose_b=True, name='code_query_cooccurrence_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_366": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.hyperparameters['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_random_seed_229": {
                "seed": {
                    "value": "self.hyperparameters['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FileWriter_235": {
                "variable": {
                    "value": "self.__summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.__tensorboard_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.__sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "code_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "query_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_301": {
                "variable": {
                    "value": "cosine_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.ops['query_representations'] / query_norms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.ops['code_representations'] / code_norms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "code_query_cooccurrence_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diag_310": {
                "variable": {
                    "value": "neg_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.fill(dims=[tf.shape(cosine_similarities)[0]], value=float('-inf'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_311": {
                "variable": {
                    "value": "per_sample_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.hyperparameters['margin'] - tf.diag_part(cosine_similarities) + tf.reduce_max(tf.nn.relu(cosine_similarities + neg_matrix), axis=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_350": {
                "input_tensor": {
                    "value": "self.placeholders['sample_loss_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_355": {
                "input": {
                    "value": "correct_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag_part(similarity_scores)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_358": {
                "input_tensor": {
                    "value": "tf.to_float(compared_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_368": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.hyperparameters['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.hyperparameters['learning_rate_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.hyperparameters['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_random_seed_762": {
                "seed": {
                    "value": "self.hyperparameters['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variables_initializer_773": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.__sess.graph.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "write_graph_836": {
                "graph_or_graph_def": {
                    "value": "self.__sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "wandb.run.dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{self.run_name}-graph.pbtxt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "variable_scope_275": {
                "name_or_scope": {
                    "value": "code_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "query_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_316": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.ops['query_representations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "self.ops['code_representations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "code_query_cooccurrence_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_323": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.ops['query_representations'], self.ops['code_representations'], transpose_a=False, transpose_b=True, name='code_query_cooccurrence_logits')",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.ops['query_representations'], self.ops['code_representations'], transpose_a=False, transpose_b=True, name='code_query_cooccurrence_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_325": {
                "variable": {
                    "value": "min_inf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.fill(dims=[tf.shape(logprobs)[0]], value=float('-inf'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_326": {
                "variable": {
                    "value": "per_sample_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.hyperparameters['margin'] - tf.diag_part(logprobs) + tf.reduce_max(logprobs + min_inf_matrix, axis=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_358": {
                "x": {
                    "value": "compared_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity_scores >= tf.expand_dims(correct_scores, axis=-1)",
                            "Compare"
                        ]
                    ]
                }
            },
            "AdamOptimizer_372": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.hyperparameters['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_385": {
                "value": {
                    "value": "self.hyperparameters['learning_rate_code_scale_factor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "language",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_sample['language']",
                            "Subscript"
                        ],
                        [
                            "'python'",
                            "str"
                        ],
                        [
                            "sorted(self.__per_code_language_metadata.items(), key=lambda kv: kv[0])",
                            "Call"
                        ],
                        [
                            "raw_code_language_metadata_lists.items()",
                            "Call"
                        ],
                        [
                            "per_file_result.items()",
                            "Call"
                        ],
                        [
                            "self.__code_encoders.items()",
                            "Call"
                        ],
                        [
                            "self.__code_encoders.items()",
                            "Call"
                        ],
                        [
                            "data.items()",
                            "Call"
                        ],
                        [
                            "raw_sample['language']",
                            "Subscript"
                        ],
                        [
                            "'python'",
                            "str"
                        ],
                        [
                            "sample_to_parse['language']",
                            "Subscript"
                        ],
                        [
                            "'python'",
                            "str"
                        ]
                    ]
                }
            },
            "norm_299": {
                "tensor": {
                    "value": "self.ops['query_representations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_300": {
                "tensor": {
                    "value": "self.ops['code_representations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_310": {
                "dims": {
                    "value": "[tf.shape(cosine_similarities)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_to_333": {
                "variable": {
                    "value": "query_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ops['query_representations']",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(query_reps, shape=[tf.shape(query_reps)[0], tf.shape(query_reps)[0], tf.shape(query_reps)[1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(query_reps)[0], tf.shape(query_reps)[0], tf.shape(query_reps)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_to_334": {
                "variable": {
                    "value": "code_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "code_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ops['code_representations']",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(code_reps, shape=[tf.shape(code_reps)[0], tf.shape(code_reps)[0], tf.shape(code_reps)[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(code_reps, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(code_reps)[0], tf.shape(code_reps)[0], tf.shape(code_reps)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_335": {
                "variable": {
                    "value": "code_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "code_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ops['code_representations']",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(code_reps, shape=[tf.shape(code_reps)[0], tf.shape(code_reps)[0], tf.shape(code_reps)[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(code_reps, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_337": {
                "variable": {
                    "value": "all_pair_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query_reps - code_reps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_340": {
                "variable": {
                    "value": "correct_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.diag_part(all_pair_distances)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_342": {
                "variable": {
                    "value": "pointwise_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "correct_distances - all_pair_distances + self.hyperparameters['margin']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_388": {
                "value": {
                    "value": "self.hyperparameters['learning_rate_query_scale_factor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_313": {
                "input_tensor": {
                    "value": "tf.nn.relu(cosine_similarities + neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fill_325": {
                "dims": {
                    "value": "[tf.shape(logprobs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_295": {
                "input": {
                    "value": "self.ops['code_representations']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_part_312": {
                "input": {
                    "value": "cosine_similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.ops['query_representations'] / query_norms, self.ops['code_representations'] / code_norms, transpose_a=False, transpose_b=True, name='code_query_cooccurrence_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_313": {
                "features": {
                    "value": "cosine_similarities + neg_matrix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_328": {
                "input_tensor": {
                    "value": "logprobs + min_inf_matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_part_340": {
                "input": {
                    "value": "all_pair_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(query_reps - code_reps, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_343": {
                "num_rows": {
                    "value": "tf.shape(pointwise_loss)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_345": {
                "input_tensor": {
                    "value": "tf.cast(tf.greater(pointwise_loss, 0), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_part_327": {
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_310": {
                "input": {
                    "value": "cosine_similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.ops['query_representations'] / query_norms, self.ops['code_representations'] / code_norms, transpose_a=False, transpose_b=True, name='code_query_cooccurrence_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_343": {
                "input": {
                    "value": "pointwise_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(correct_distances - all_pair_distances + self.hyperparameters['margin'])",
                            "Call"
                        ],
                        [
                            "pointwise_loss * (1 - tf.eye(tf.shape(pointwise_loss)[0]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_345": {
                "x": {
                    "value": "tf.greater(pointwise_loss, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_325": {
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_333": {
                "input": {
                    "value": "query_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ops['query_representations']",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(query_reps, shape=[tf.shape(query_reps)[0], tf.shape(query_reps)[0], tf.shape(query_reps)[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_334": {
                "input": {
                    "value": "code_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ops['code_representations']",
                            "Subscript"
                        ],
                        [
                            "tf.broadcast_to(code_reps, shape=[tf.shape(code_reps)[0], tf.shape(code_reps)[0], tf.shape(code_reps)[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(code_reps, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_345": {
                "x": {
                    "value": "pointwise_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(correct_distances - all_pair_distances + self.hyperparameters['margin'])",
                            "Call"
                        ],
                        [
                            "pointwise_loss * (1 - tf.eye(tf.shape(pointwise_loss)[0]))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CodeSearchNet/src/utils/tfutils.py": {
        "tensorflow": {
            "identity_68": {
                "variable": {
                    "value": "self.__identity_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "seq_token_embeddings_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "seq_token_embeddings_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_token_embeddings * tf.expand_dims(sequence_token_masks, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_134": {
                "variable": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(sequence_lengths, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "variable": {
                    "value": "sequence_token_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_token_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-BIG_NUMBER * (1 - sequence_token_masks)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(sequence_token_masks, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "input": {
                    "value": "sequence_token_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-BIG_NUMBER * (1 - sequence_token_masks)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(sequence_token_masks, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_134": {
                "x": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.cast(sequence_lengths, dtype=tf.float32), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_139": {
                "input_tensor": {
                    "value": "sequence_token_embeddings + sequence_token_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_141": {
                "variable": {
                    "value": "token_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sequence_token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_146": {
                "variable": {
                    "value": "seq_embedding_weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_token_embeddings * token_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_145": {
                "input": {
                    "value": "sequence_token_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-BIG_NUMBER * (1 - sequence_token_masks)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(sequence_token_masks, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "erf_100": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "input_tensor": {
                    "value": "token_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(sequence_token_embeddings, units=1, activation=tf.sigmoid, use_bias=False)",
                            "Call"
                        ],
                        [
                            "token_weights * tf.expand_dims(sequence_token_masks, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2-csn/src/accumulate.py": {
        "tensorflow": {
            "Variable_15": {
                "variable": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "self.count_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_13": {
                "initial_value": {
                    "value": "tf.zeros_like(tv.initialized_value())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_22": {
                "control_inputs": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tv.assign(tf.zeros_like(tv)) for tv in self.accum_vars.values()]",
                            "ListComp"
                        ],
                        [
                            "[self.accum_vars[v].assign_add(g) for (g, v) in grads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_op_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_30": {
                "control_inputs": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tv.assign(tf.zeros_like(tv)) for tv in self.accum_vars.values()]",
                            "ListComp"
                        ],
                        [
                            "[self.accum_vars[v].assign_add(g) for (g, v) in grads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_op_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_35": {
                "control_inputs": {
                    "value": "[self.opt.apply_gradients(grads)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_13": {
                "input": {
                    "value": "tv.initialized_value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2-csn/src/generate_unconditional_samples.py": {
        "tensorflow": {
            "Saver_63": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_64": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_52": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_54": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2-csn/src/interactive_conditional_samples.py": {
        "tensorflow": {
            "placeholder_56": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_67": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_55": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_58": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2-csn/src/load_dataset.py": {
        "tensorflow": {}
    },
    "gpt-2-csn/src/memory_saving_gradients.py": {
        "tensorflow": {
            "get_default_graph_339": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_89": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_192": {
                "variable": {
                    "value": "grad_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "x.op.name + '_sg'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_194": {
                "variable": {
                    "value": "grad_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_336": {
                "name": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(micros)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_287": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.indices",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_288": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.indices",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "x.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2-csn/src/model.py": {
        "tensorflow": {
            "shape_17": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_22": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_137": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(value, name='value')",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_35": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "start + [n, m // n]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "start + [a * b]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, nx, nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=w_init_stdev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [1, nx, nf], initializer=tf.random_normal_initializer(stddev=w_init_stdev))",
                            "Call"
                        ],
                        [
                            "w * b - tf.cast(10000000000.0, w.dtype) * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w * tf.rsqrt(tf.cast(v.shape[-1].value, w.dtype))",
                            "BinOp"
                        ],
                        [
                            "mask_attn_weights(w)",
                            "Call"
                        ],
                        [
                            "softmax(w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(x)",
                            "Call"
                        ],
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "mlp(norm(x, 'ln_2'), 'mlp', nx * 4, hparams=hparams)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [n_state], initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "shape_list(x)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nf], initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(split_heads, tf.split(c, 3, axis=2))",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(split_heads, tf.split(c, 3, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.concat([pk, k], axis=-2)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [1, nx, nf], initializer=tf.random_normal_initializer(stddev=w_init_stdev))",
                            "Call"
                        ],
                        [
                            "w * b - tf.cast(10000000000.0, w.dtype) * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w * tf.rsqrt(tf.cast(v.shape[-1].value, w.dtype))",
                            "BinOp"
                        ],
                        [
                            "mask_attn_weights(w)",
                            "Call"
                        ],
                        [
                            "softmax(w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(split_heads, tf.split(c, 3, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.concat([pv, v], axis=-2)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_104": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_139": {
                "input": {
                    "value": "tf.expand_dims(value, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size] + [1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "wpe",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_ctx, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "wte",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wte",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_vocab, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "results[present]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "presents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu(conv1d(x, 'c_fc', n_state))",
                            "Call"
                        ],
                        [
                            "tf.gather(wte, X) + tf.gather(wpe, positions_for(X, past_length))",
                            "BinOp"
                        ],
                        [
                            "block(h, 'h%d' % layer, past=past, hparams=hparams)",
                            "Call"
                        ],
                        [
                            "norm(h, 'ln_f')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch * sequence, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [batch * sequence, hparams.n_embd])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "wte",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wte', [hparams.n_vocab, hparams.n_embd], initializer=tf.random_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_flat, wte, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch, sequence, hparams.n_vocab])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, sequence, hparams.n_vocab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_21": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "input_tensor": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_77": {
                "a": {
                    "value": "split_states(x, hparams.n_head)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_106": {
                "variable": {
                    "value": "(pk, pv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past in enumerate(pasts)",
                            "Call"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pk, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pv, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_139": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(value, name='value')",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_143": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_26": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "x - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_36": {
                "x": {
                    "value": "s + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_94": {
                "x": {
                    "value": "tf.cast(v.shape[-1].value, w.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_103": {
                "value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(x, [-1, nx]), tf.reshape(w, [-1, nf])) + b, start + [nf])",
                            "Call"
                        ],
                        [
                            "conv1d(x, 'c_attn', n_state * 3)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_144": {},
            "gather_157": {
                "params": {
                    "value": "wpe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wpe', [hparams.n_ctx, hparams.n_embd], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "positions_for(X, past_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_161": {
                "value": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past in enumerate(pasts)",
                            "Call"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_53": {
                "stddev": {
                    "value": "w_init_stdev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_54": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "tf.reshape(x, [-1, nx])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(w, [-1, nf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "v.shape[-1].value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_153": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_155": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past in enumerate(pasts)",
                            "Call"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_166": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu(conv1d(x, 'c_fc', n_state))",
                            "Call"
                        ],
                        [
                            "tf.gather(wte, X) + tf.gather(wpe, positions_for(X, past_length))",
                            "BinOp"
                        ],
                        [
                            "block(h, 'h%d' % layer, past=past, hparams=hparams)",
                            "Call"
                        ],
                        [
                            "norm(h, 'ln_f')",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_26": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2-csn/src/sample.py": {
        "tensorflow": {
            "top_k_11": {
                "variable": {
                    "value": "(values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_18": {
                "pred": {
                    "value": "tf.equal(k, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : logits",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _top_k()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sort_27": {
                "variable": {
                    "value": "logits_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "variable": {
                    "value": "probs_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_29": {
                "variable": {
                    "value": "probs_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits_sort)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_30": {
                "variable": {
                    "value": "logits_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "probs_sums < p",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(logits_sort) * 1000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_31": {
                "variable": {
                    "value": "min_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(probs_sums < p, logits_sort, tf.ones_like(logits_sort) * 1000)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_44": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "start_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_80": {
                "variable": {
                    "value": "(_, _, tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "maximum_iterations": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[context_output['presents'], context[:, -1], context]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape(model.past_shape(hparams=hparams, batch_size=batch_size)), tf.TensorShape([batch_size]), tf.TensorShape([batch_size, None])]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_13": {
                "condition": {
                    "value": "logits < min_values",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(logits, dtype=logits.dtype) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_19": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "top_p_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_32": {
                "condition": {
                    "value": "logits < min_logits",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(logits, dtype=logits.dtype) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "sample_sequence",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_70": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_15": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "logits_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_34": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "x": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_72": {
                "values": {
                    "value": "[past, next_outputs['presents']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, num_samples=1, output_dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_74": {
                "values": {
                    "value": "[output, samples]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_89": {
                "dims": {
                    "value": "model.past_shape(hparams=hparams, batch_size=batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_90": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_91": {
                "dims": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2-csn/src/train.py": {
        "tensorflow": {
            "ConfigProto_88": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "uniform_66": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(context)",
                    "type": "Call",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hparams.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=context[:, 1:], logits=output['logits'][:, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "variable": {
                    "value": "summary_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_147": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[summary_lr, summary_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_149": {
                "variable": {
                    "value": "summary_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(CHECKPOINT_DIR, args.run_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.trainable_variables() if 'model' in v.name]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_67": {
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=tf.shape(context)) < p",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=tf.shape(context), minval=0, maxval=hparams.n_vocab, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.batch_size, None])",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_91": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "val_context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.val_batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=val_context[:, 1:], logits=val_output['logits'][:, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "variable": {
                    "value": "val_loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=val_context[:, 1:], logits=val_output['logits'][:, :-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_121": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_136": {
                "variable": {
                    "value": "summary_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "opt_apply",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.apply_gradients()",
                            "Call"
                        ],
                        [
                            "opt.apply_gradients(opt_grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_144": {
                "variable": {
                    "value": "summary_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=context[:, 1:], logits=output['logits'][:, :-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_159": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join(CHECKPOINT_DIR, args.run_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_65": {
                "shape": {
                    "value": "tf.shape(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_96": {
                "labels": {
                    "value": "context[:, 1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.batch_size, None])",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "output['logits'][:, :-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model.model(hparams=hparams, X=context_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_123": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_141": {
                "variable": {
                    "value": "opt_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=context[:, 1:], logits=output['logits'][:, :-1]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_vars if '/h' in v.name] if args.only_train_transformer_layers else all_vars",
                            "IfExp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_163": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_166": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_169": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.batch_size, None])",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_103": {
                "labels": {
                    "value": "val_context[:, 1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.val_batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "val_output['logits'][:, :-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model.model(hparams=hparams, X=val_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.batch_size, None])",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gpt-2-csn/train-horovod.py": {
        "tensorflow": {
            "ConfigProto_55": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=context[:, 1:], logits=output['logits'][:, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_78": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_87": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.trainable_variables() if 'model' in v.name]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_59": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_62": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_96": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join(CHECKPOINT_DIR, run_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_65": {
                "labels": {
                    "value": "context[:, 1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "output['logits'][:, :-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model.model(hparams=hparams, X=context)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_100": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_103": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_106": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "restore_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'latest'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2/src/accumulate.py": {
        "tensorflow": {
            "Variable_15": {
                "variable": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "self.count_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_13": {
                "initial_value": {
                    "value": "tf.zeros_like(tv.initialized_value())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_22": {
                "control_inputs": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tv.assign(tf.zeros_like(tv)) for tv in self.accum_vars.values()]",
                            "ListComp"
                        ],
                        [
                            "[self.accum_vars[v].assign_add(g) for (g, v) in grads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_op_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_30": {
                "control_inputs": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tv.assign(tf.zeros_like(tv)) for tv in self.accum_vars.values()]",
                            "ListComp"
                        ],
                        [
                            "[self.accum_vars[v].assign_add(g) for (g, v) in grads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_op_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_35": {
                "control_inputs": {
                    "value": "[self.opt.apply_gradients(grads)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_13": {
                "input": {
                    "value": "tv.initialized_value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2/src/generate_unconditional_samples.py": {
        "tensorflow": {
            "Saver_63": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_64": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_52": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_54": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2/src/interactive_conditional_samples.py": {
        "tensorflow": {
            "placeholder_97": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_107": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_108": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_96": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_99": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2/src/load_dataset.py": {
        "tensorflow": {}
    },
    "gpt-2/src/memory_saving_gradients.py": {
        "tensorflow": {
            "get_default_graph_339": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_89": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_192": {
                "variable": {
                    "value": "grad_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "x.op.name + '_sg'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_194": {
                "variable": {
                    "value": "grad_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_336": {
                "name": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(micros)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_287": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.indices",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_288": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.indices",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "x.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2/src/model.py": {
        "tensorflow": {
            "shape_17": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_22": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_137": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(value, name='value')",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_35": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "start + [n, m // n]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "start + [a * b]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, nx, nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=w_init_stdev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [1, nx, nf], initializer=tf.random_normal_initializer(stddev=w_init_stdev))",
                            "Call"
                        ],
                        [
                            "w * b - tf.cast(10000000000.0, w.dtype) * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w * tf.rsqrt(tf.cast(v.shape[-1].value, w.dtype))",
                            "BinOp"
                        ],
                        [
                            "mask_attn_weights(w)",
                            "Call"
                        ],
                        [
                            "softmax(w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(x)",
                            "Call"
                        ],
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "mlp(norm(x, 'ln_2'), 'mlp', nx * 4, hparams=hparams)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [n_state], initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "shape_list(x)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nf], initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(split_heads, tf.split(c, 3, axis=2))",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(split_heads, tf.split(c, 3, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.concat([pk, k], axis=-2)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [1, nx, nf], initializer=tf.random_normal_initializer(stddev=w_init_stdev))",
                            "Call"
                        ],
                        [
                            "w * b - tf.cast(10000000000.0, w.dtype) * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w * tf.rsqrt(tf.cast(v.shape[-1].value, w.dtype))",
                            "BinOp"
                        ],
                        [
                            "mask_attn_weights(w)",
                            "Call"
                        ],
                        [
                            "softmax(w)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(split_heads, tf.split(c, 3, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.concat([pv, v], axis=-2)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_104": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_139": {
                "input": {
                    "value": "tf.expand_dims(value, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size] + [1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "wpe",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_ctx, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "wte",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wte",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_vocab, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "results[present]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "presents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu(conv1d(x, 'c_fc', n_state))",
                            "Call"
                        ],
                        [
                            "tf.gather(wte, X) + tf.gather(wpe, positions_for(X, past_length))",
                            "BinOp"
                        ],
                        [
                            "block(h, 'h%d' % layer, past=past, hparams=hparams)",
                            "Call"
                        ],
                        [
                            "norm(h, 'ln_f')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch * sequence, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [batch * sequence, hparams.n_embd])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "wte",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wte', [hparams.n_vocab, hparams.n_embd], initializer=tf.random_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_flat, wte, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch, sequence, hparams.n_vocab])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, sequence, hparams.n_vocab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_21": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "input_tensor": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_77": {
                "a": {
                    "value": "split_states(x, hparams.n_head)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_106": {
                "variable": {
                    "value": "(pk, pv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past in enumerate(pasts)",
                            "Call"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pk, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pv, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_139": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(value, name='value')",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_143": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_26": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "x - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_36": {
                "x": {
                    "value": "s + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_94": {
                "x": {
                    "value": "tf.cast(v.shape[-1].value, w.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_103": {
                "value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(x, [-1, nx]), tf.reshape(w, [-1, nf])) + b, start + [nf])",
                            "Call"
                        ],
                        [
                            "conv1d(x, 'c_attn', n_state * 3)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_144": {},
            "gather_157": {
                "params": {
                    "value": "wpe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wpe', [hparams.n_ctx, hparams.n_embd], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "positions_for(X, past_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_161": {
                "value": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past in enumerate(pasts)",
                            "Call"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_53": {
                "stddev": {
                    "value": "w_init_stdev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_54": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "tf.reshape(x, [-1, nx])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(w, [-1, nf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "v.shape[-1].value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_153": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_155": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past in enumerate(pasts)",
                            "Call"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "past",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_166": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu(conv1d(x, 'c_fc', n_state))",
                            "Call"
                        ],
                        [
                            "tf.gather(wte, X) + tf.gather(wpe, positions_for(X, past_length))",
                            "BinOp"
                        ],
                        [
                            "block(h, 'h%d' % layer, past=past, hparams=hparams)",
                            "Call"
                        ],
                        [
                            "norm(h, 'ln_f')",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_26": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2/src/sample.py": {
        "tensorflow": {
            "top_k_11": {
                "variable": {
                    "value": "(values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_18": {
                "pred": {
                    "value": "tf.equal(k, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : logits",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _top_k()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sort_27": {
                "variable": {
                    "value": "logits_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "variable": {
                    "value": "probs_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_29": {
                "variable": {
                    "value": "probs_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits_sort)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_30": {
                "variable": {
                    "value": "logits_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "probs_sums < p",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(logits_sort) * 1000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_31": {
                "variable": {
                    "value": "min_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(probs_sums < p, logits_sort, tf.ones_like(logits_sort) * 1000)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_44": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "start_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_80": {
                "variable": {
                    "value": "(_, _, tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "maximum_iterations": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[context_output['presents'], context[:, -1], context]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape(model.past_shape(hparams=hparams, batch_size=batch_size)), tf.TensorShape([batch_size]), tf.TensorShape([batch_size, None])]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_13": {
                "condition": {
                    "value": "logits < min_values",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(logits, dtype=logits.dtype) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_19": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "top_p_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_32": {
                "condition": {
                    "value": "logits < min_logits",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(logits, dtype=logits.dtype) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "sample_sequence",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_70": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_15": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "logits_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_34": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "top_p_logits(logits, p=top_p)",
                            "Call"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "x": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_72": {
                "values": {
                    "value": "[past, next_outputs['presents']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits, num_samples=1, output_dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_74": {
                "values": {
                    "value": "[output, samples]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_89": {
                "dims": {
                    "value": "model.past_shape(hparams=hparams, batch_size=batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_90": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_91": {
                "dims": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2/train-horovod.py": {
        "tensorflow": {
            "ConfigProto_55": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=context[:, 1:], logits=output['logits'][:, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_78": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_87": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.trainable_variables() if 'model' in v.name]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_59": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_62": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_96": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join(CHECKPOINT_DIR, run_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_65": {
                "labels": {
                    "value": "context[:, 1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "output['logits'][:, :-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model.model(hparams=hparams, X=context)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_100": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_103": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_106": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "restore_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'latest'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt-2/train.py": {
        "tensorflow": {
            "ConfigProto_88": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "uniform_66": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(context)",
                    "type": "Call",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hparams.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=context[:, 1:], logits=output['logits'][:, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "variable": {
                    "value": "summary_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_147": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[summary_lr, summary_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_149": {
                "variable": {
                    "value": "summary_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(CHECKPOINT_DIR, args.run_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.trainable_variables() if 'model' in v.name]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_67": {
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=tf.shape(context)) < p",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=tf.shape(context), minval=0, maxval=hparams.n_vocab, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.batch_size, None])",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_91": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "val_context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.val_batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=val_context[:, 1:], logits=val_output['logits'][:, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "variable": {
                    "value": "val_loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=val_context[:, 1:], logits=val_output['logits'][:, :-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_121": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_136": {
                "variable": {
                    "value": "summary_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "opt_apply",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.apply_gradients()",
                            "Call"
                        ],
                        [
                            "opt.apply_gradients(opt_grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_144": {
                "variable": {
                    "value": "summary_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=context[:, 1:], logits=output['logits'][:, :-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_159": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join(CHECKPOINT_DIR, args.run_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_65": {
                "shape": {
                    "value": "tf.shape(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_96": {
                "labels": {
                    "value": "context[:, 1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.batch_size, None])",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "output['logits'][:, :-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model.model(hparams=hparams, X=context_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_123": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_141": {
                "variable": {
                    "value": "opt_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=context[:, 1:], logits=output['logits'][:, :-1]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_vars if '/h' in v.name] if args.only_train_transformer_layers else all_vars",
                            "IfExp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_163": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_166": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join('models', args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_169": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.batch_size, None])",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_103": {
                "labels": {
                    "value": "val_context[:, 1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.val_batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "val_output['logits'][:, :-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model.model(hparams=hparams, X=val_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [args.batch_size, None])",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow-char-rnn/char_rnn_model.py": {
        "tensorflow": {
            "placeholder_47": {
                "variable": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.num_unrollings]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.num_unrollings]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultiRNNCell_88": {
                "variable": {
                    "value": "multi_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cell]",
                            "List"
                        ],
                        [
                            "[tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - self.dropout) for cell in cells]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "static_rnn_123": {
                "variable": {
                    "value": "(outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "multi_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "sliced_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.squeeze(input_, [1]) for input_ in tf.split(axis=1, num_or_size_splits=self.num_unrollings, value=inputs)]",
                            "ListComp"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_175": {
                "variable": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[average_loss_summary, ppl_summary]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_monitor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_178": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_181": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_with_default_356": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self.input_data)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.input_dropout)",
                            "Call"
                        ],
                        [
                            "np.array(data[:-1]).transpose()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(extra_dims) + [shape]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_372": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(extra_dims) + [shape]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_113": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(axis=1, values=outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "flat_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(axis=1, values=self.targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_139": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_142": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_146": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "flat_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(axis=1, values=self.targets), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_148": {
                "variable": {
                    "value": "self.mean_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.logits, labels=flat_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "sum_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "sum_mean_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_156": {
                "variable": {
                    "value": "self.reset_loss_monitor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "sum_mean_loss.assign(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "count.assign(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reset_loss_monitor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_159": {
                "variable": {
                    "value": "self.update_loss_monitor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "sum_mean_loss.assign(sum_mean_loss + self.mean_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "count.assign(count + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "update_loss_monitor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_171": {
                "variable": {
                    "value": "average_loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'average loss'",
                            "str"
                        ]
                    ]
                },
                "data": {
                    "value": "self.average_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_172": {
                "variable": {
                    "value": "ppl_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ppl_summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'perplexity'",
                            "str"
                        ]
                    ]
                },
                "data": {
                    "value": "self.ppl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_185": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_186": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.mean_loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_190": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_212": {
                "variable": {
                    "value": "extra_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "initial_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "embedding_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_111": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.eye(self.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self.input_data)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.input_dropout)",
                            "Call"
                        ],
                        [
                            "np.array(data[:-1]).transpose()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.input_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "slice_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_129": {
                "name": {
                    "value": "flatten_ouputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_133": {
                "name": {
                    "value": "flatten_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_144": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "loss_monitor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_165": {
                "variable": {
                    "value": "self.ppl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.average_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_83": {
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_fn(self.hidden_size, reuse=tf.get_variable_scope().reuse, **params)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_131": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.static_rnn(multi_cell, sliced_inputs, initial_state=self.initial_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_135": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(axis=1, values=outputs), [-1, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w', [hidden_size, vocab_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_163": {
                "control_inputs": {
                    "value": "[self.update_loss_monitor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_179": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradients_186": {
                "ys": {
                    "value": "self.mean_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_120": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.num_unrollings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self.input_data)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.input_dropout)",
                            "Call"
                        ],
                        [
                            "np.array(data[:-1]).transpose()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}