{
    "src/dataloaders/cifar10.py": {
        "sklearn": {
            "shuffle_72": {
                "*arrays_0": {
                    "value": "np.arange(5)",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_93": {
                "*arrays_0": {
                    "value": "r",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "data[i][s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_cifar'), 'data' + str(ids[i]) + s + 'x.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "data[i][s][y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_cifar'), 'data' + str(ids[i]) + s + 'y.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "data[t][s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[t][s]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "data[t][s]['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_cifar'), 'data' + str(t) + s + 'x.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "data[t][s]['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_cifar'), 'data' + str(t) + s + 'y.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataloaders/cifar100.py": {
        "sklearn": {
            "shuffle_72": {
                "*arrays_0": {
                    "value": "np.arange(5)",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_90": {
                "*arrays_0": {
                    "value": "r",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "data[i][s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_cifar'), 'data' + str(ids[i] + 5) + s + 'x.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "data[i][s][y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_cifar'), 'data' + str(ids[i] + 5) + s + 'y.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "data[t][s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[t][s]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "data[t][s]['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_cifar'), 'data' + str(t) + s + 'x.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "data[t][s]['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_cifar'), 'data' + str(t) + s + 'y.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataloaders/mixture.py": {
        "sklearn": {
            "shuffle_27": {
                "*arrays_0": {
                    "value": "idata",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_188": {
                "*arrays_0": {
                    "value": "r",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "stack_147": {
                "variable": {
                    "value": "data[n][s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[n][s]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "data[n][s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_mixture'), 'data' + str(idx) + s + 'x.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_182": {
                "variable": {
                    "value": "data[n][s][y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_mixture'), 'data' + str(idx) + s + 'y.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "data[n][s]['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_mixture'), 'data' + str(idx) + s + 'x.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "data[n][s]['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_mixture'), 'data' + str(idx) + s + 'y.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataloaders/pmnist.py": {
        "sklearn": {
            "shuffle_20": {
                "variable": {
                    "value": "seeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "seeds",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_75": {
                "*arrays_0": {
                    "value": "r",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_44": {
                "variable": {
                    "value": "aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "aux",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "r * 100 + i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dat[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "data[i][s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[i][s]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "data[i][s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_pmnist'), 'data' + str(r) + s + 'x.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "data[i][s][y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_pmnist'), 'data' + str(r) + s + 'y.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_53": {
                "obj": {
                    "value": "data[i][s]['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_pmnist'), 'data' + str(r) + s + 'x.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_54": {
                "obj": {
                    "value": "data[i][s]['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.expanduser(data_path + 'binary_pmnist'), 'data' + str(r) + s + 'y.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/approaches/ewc.py": {
        "torch": {
            "CrossEntropyLoss_34": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_64": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_51": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "self.lamb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__129": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clipgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "self.fisher[name] * (param_old - param).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/approaches/ltg.py": {
        "torch": {
            "CrossEntropyLoss_43": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_126": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_188": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[:split])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_198": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[split:num_train])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_74": {
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr_a",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "0.025",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.lamb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.model.get_param(self.model.new_models)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr_a",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "0.025",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.o_lamb_a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_93": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.model.get_param(self.model.new_models)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr_a",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "0.025",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.o_lamb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__175": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clipgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__253": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clipgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__269": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clipgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_196": {
                "indices": {
                    "value": "indices[:split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_200": {
                "indices": {
                    "value": "indices[split:num_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/approaches/progressive.py": {
        "torch": {
            "CrossEntropyLoss_30": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_50": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_38": {
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "0.025",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.lamb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__96": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clipgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/approaches/seu.py": {
        "torch": {
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_147": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_151": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_233": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "eta_min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[:split])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[split:num_train])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_99": {
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "0.025",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "self.lamb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_107": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.get_param(self.model.new_models)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "self.lr",
                            "Attribute"
                        ],
                        [
                            "self.o_lr",
                            "Attribute"
                        ],
                        [
                            "0.025",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.o_lamb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__204": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clipgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_247": {
                "size": {
                    "value": "pro.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_248": {
                "size": {
                    "value": "pro.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_294": {
                "variable": {
                    "value": "vector1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dh_e_k < 0) * (dh_a_k > 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_298": {
                "variable": {
                    "value": "vector2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dh_e_k > 0) * (dh_a_k < 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_303": {
                "variable": {
                    "value": "self.model.p[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.p[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__340": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clipgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_240": {
                "indices": {
                    "value": "indices[:split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_244": {
                "indices": {
                    "value": "indices[split:num_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multinomial_260": {
                "input": {
                    "value": "pro",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_289": {
                "input": {
                    "value": "h_e[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "input": {
                    "value": "h_a[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/automl/darts_architecture.py": {
        "torch": {
            "cat_9": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_42": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ],
                        [
                            "self.virtual_model.loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_59": {
                "variable": {
                    "value": "v_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ],
                        [
                            "self.virtual_model.loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "v_a + v_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_77": {
                "variable": {
                    "value": "da_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ],
                        [
                            "self.virtual_model.loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_84": {
                "variable": {
                    "value": "da_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ],
                        [
                            "self.virtual_model.loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ],
                        [
                            "self.model.loss(input_train, target_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "[w.view(-1) for w in dw]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/automl/darts_basicmodel.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.input_c, C_curr, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_97": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ParameterDict_128": {
                "variable": {
                    "value": "self._arch_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{'alphas_normal': nn.Parameter(0.001 * torch.randn((k, num_ops), device=self.device, requires_grad=True)), 'alphas_reduce': nn.Parameter(0.001 * torch.randn((k, num_ops), device=self.device, requires_grad=True))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "self.input_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._arch_parameters['alphas_reduce']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._arch_parameters['alphas_normal']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "input": {
                    "value": "self._arch_parameters['alphas_normal']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_164": {
                "input": {
                    "value": "self._arch_parameters['alphas_reduce']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "data": {
                    "value": "0.001 * torch.randn((k, num_ops), device=self.device, requires_grad=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "data": {
                    "value": "0.001 * torch.randn((k, num_ops), device=self.device, requires_grad=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_129": {
                "*size": {
                    "value": "(k, num_ops)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_130": {
                "*size": {
                    "value": "(k, num_ops)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/automl/darts_model.py": {
        "torch": {
            "ModuleList_39": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(3, C_curr, 3, padding=1, bias=False), nn.BatchNorm2d(C_curr))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_112": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterDict_119": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.a[stem]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_l).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.a[cell + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_l).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_359": {
                "variable": {
                    "value": "(v, arg_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a['stem'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_161": {
                "*size": {
                    "value": "num_l",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.length['stem'] + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['cell' + str(i)] + (1 + self.mu_s) * len(self.genotype[i])",
                            "BinOp"
                        ],
                        [
                            "c_1 + c_2 * (1 + self.mu_s)",
                            "BinOp"
                        ],
                        [
                            "c_1 + (1 + self.mu_s) * c_2",
                            "BinOp"
                        ],
                        [
                            "c_1 + (1 + self.mu_s) * c_2",
                            "BinOp"
                        ],
                        [
                            "c_1 + (1 + self.mu_s) * c_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_305": {
                "input": {
                    "value": "self.a['stem']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_305": {
                "input": {
                    "value": "torch.exp(self.a['stem'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_321": {
                "input": {
                    "value": "self.a['stem']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_321": {
                "input": {
                    "value": "torch.exp(self.a['stem'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_386": {
                "variable": {
                    "value": "(v, arg_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a[name].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "modules": {
                    "value": "[cell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.length['stem']",
                            "Subscript"
                        ],
                        [
                            "self.length['stem']",
                            "Subscript"
                        ],
                        [
                            "self.length['stem']",
                            "Subscript"
                        ],
                        [
                            "self.length['stem']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_195": {
                "*size": {
                    "value": "num_l",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.length['stem'] + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['cell' + str(i)] + (1 + self.mu_s) * len(self.genotype[i])",
                            "BinOp"
                        ],
                        [
                            "c_1 + c_2 * (1 + self.mu_s)",
                            "BinOp"
                        ],
                        [
                            "c_1 + (1 + self.mu_s) * c_2",
                            "BinOp"
                        ],
                        [
                            "c_1 + (1 + self.mu_s) * c_2",
                            "BinOp"
                        ],
                        [
                            "c_1 + (1 + self.mu_s) * c_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_312": {
                "input": {
                    "value": "self.a['cell' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_312": {
                "input": {
                    "value": "torch.exp(self.a['cell' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_332": {
                "input": {
                    "value": "self.a['cell' + str(i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_332": {
                "input": {
                    "value": "torch.exp(self.a['cell' + str(i)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "num_features": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/automl/darts_operation.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_7": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/automl/darts_operation_plus.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.CELU(0.075)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.CELU(0.075)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.CELU(0.075)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_7": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "*args": {
                    "value": "nn.CELU(0.075)",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_14": {
                "alpha": {
                    "value": "0.075",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CELU_27": {
                "alpha": {
                    "value": "0.075",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CELU_41": {
                "alpha": {
                    "value": "0.075",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CELU_57": {
                "alpha": {
                    "value": "0.075",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CELU_61": {
                "alpha": {
                    "value": "0.075",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/automl/darts_search.py": {
        "torch": {
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_62": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "train_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[:split])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "valid_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[split:num_train])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_93": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "nepochs",
                    "type": "Variable",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "arch_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.arch_parameters()['alphas_normal']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "arch_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.arch_parameters()['alphas_reduce']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__169": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_85": {
                "indices": {
                    "value": "indices[:split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_90": {
                "indices": {
                    "value": "indices[split:num_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/automl/darts_utils_cnn.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_91": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(save_path, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_106": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/automl/mdenas_basicmodel.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.input_c, C_curr, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_101": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_147": {
                "variable": {
                    "value": "(p, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_ops[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "self.input_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_134": {
                "size": {
                    "value": "(k, num_ops)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1 / num_ops",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_135": {
                "size": {
                    "value": "(k, num_ops)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1 / num_ops",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_154": {
                "variable": {
                    "value": "(top_k, top_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deepcopy(p[start:end])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/automl/mdenas_search.py": {
        "torch": {
            "CrossEntropyLoss_42": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_47": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "train_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[:split])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "valid_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[split:num_train])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_75": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "nepochs",
                    "type": "Variable",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_81": {
                "size": {
                    "value": "(self.model.num_edges, self.model.num_ops)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_82": {
                "size": {
                    "value": "(self.model.num_edges, self.model.num_ops)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_85": {
                "size": {
                    "value": "(self.model.num_edges, self.model.num_ops)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_86": {
                "size": {
                    "value": "(self.model.num_edges, self.model.num_ops)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__169": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_67": {
                "indices": {
                    "value": "indices[:split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_72": {
                "indices": {
                    "value": "indices[split:num_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multinomial_103": {
                "input": {
                    "value": "p_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.probability()['normal']",
                            "Subscript"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_104": {
                "input": {
                    "value": "p_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.probability()['reduce']",
                            "Subscript"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_138": {
                "variable": {
                    "value": "vector1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dh_e_k[cell_type] < 0) * (dh_a_k[cell_type] > 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_140": {
                "variable": {
                    "value": "vector2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dh_e_k[cell_type] > 0) * (dh_a_k[cell_type] < 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_142": {
                "variable": {
                    "value": "self.model.p[cell_type][k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.p[cell_type][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_129": {
                "input": {
                    "value": "h_e['normal'][k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "input": {
                    "value": "h_e['reduce'][k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "input": {
                    "value": "h_a['normal'][k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "input": {
                    "value": "h_a['reduce'][k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataloaders/my_dataset.py": {
        "torch": {}
    },
    "src/models/alexnet.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ncha",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * s * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/alexnet_ltg.py": {
        "torch": {
            "ModuleList_18": {
                "modules": {
                    "value": "[nn.Conv2d(ncha, 64, kernel_size=3, padding=1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "modules": {
                    "value": "[nn.Conv2d(64, 128, kernel_size=3, padding=1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "modules": {
                    "value": "[nn.Conv2d(128, 256, kernel_size=3, padding=1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "modules": {
                    "value": "[nn.Dropout(0.2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "modules": {
                    "value": "[nn.Dropout(0.2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "modules": {
                    "value": "[nn.Dropout(0.5)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.drop4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(0.5)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.drop5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(0.5)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(256 * s * s, 2048)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(2048, 2048)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterDict_60": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.a[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.length['conv1'] * 2 + 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.a[conv2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.length['conv2'] * 2 + 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.a[conv3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.length['conv3'] * 2 + 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.a[fc1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.length['fc1'] + 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.a[fc2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.length['fc2'] + 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_271": {
                "variable": {
                    "value": "(v, arg_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a[name].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_300": {
                "variable": {
                    "value": "(v, arg_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a[name].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "modules": {
                    "value": "[nn.Conv2d(self.inputsize[0], 64, kernel_size=self.ksize_1, padding=1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "modules": {
                    "value": "[nn.Dropout(0.2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_118": {
                "*size": {
                    "value": "self.length['conv1'] * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "modules": {
                    "value": "[nn.Conv2d(64, 128, kernel_size=self.ksize_2, padding=1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "modules": {
                    "value": "[nn.Dropout(0.2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_129": {
                "*size": {
                    "value": "self.length['conv2'] * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_133": {
                "modules": {
                    "value": "[nn.Conv2d(128, 256, kernel_size=self.ksize_3, padding=1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "modules": {
                    "value": "[nn.Dropout(0.5)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_140": {
                "*size": {
                    "value": "self.length['conv3'] * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "self.fc1_inputsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_145": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_147": {
                "*size": {
                    "value": "self.length['fc1'] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_152": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_154": {
                "*size": {
                    "value": "self.length['fc2'] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "256 * s * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "self.inputsize[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_138": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_223": {
                "input": {
                    "value": "self.a[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_223": {
                "input": {
                    "value": "torch.exp(self.a[name])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_244": {
                "input": {
                    "value": "self.a[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_244": {
                "input": {
                    "value": "torch.exp(self.a[name])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_362": {
                "input": {
                    "value": "self.a[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_362": {
                "input": {
                    "value": "torch.exp(self.a[name])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_369": {
                "input": {
                    "value": "self.a[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_369": {
                "input": {
                    "value": "torch.exp(self.a[name])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "ncha",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "self.inputsize[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.ksize_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.ksize_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_123": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.ksize_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/alexnet_progressive.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.V2scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.V2x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.U2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.V3scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_32": {
                "variable": {
                    "value": "self.V3x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.U3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.Vf1scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.Vf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.Uf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.Vf2scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.Vf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.Uf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.Vflscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.Vfl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.Ufl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "ncha",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "self.c3 * s * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.size_fc1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "self.size_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.size_fc2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "self.size_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_72": {
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "t * self.c1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_76": {
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "t * self.c2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_80": {
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "t * self.c3 * s * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.c3 * s * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "self.c3 * s * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.size_fc1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_84": {
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "t * self.size_fc1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.size_fc1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "self.size_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.size_fc2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_88": {
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "t * self.size_fc2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.size_fc2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "self.size_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "[self.V2scale[t - 1].weight[0][j] * h_prev1[j] for j in range(t)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "[self.V3scale[t - 1].weight[0][j] * h_prev2[j] for j in range(t)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "[self.Vf1scale[t - 1].weight[0][j] * h_prev3[j] for j in range(t)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "[self.Vf2scale[t - 1].weight[0][j] * hf_prev1[j] for j in range(t)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "[self.Vflscale[tid - 1].weight[0][j] * hf_prev2[j] for j in range(tid)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_84": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_94": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_141": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "down_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.in_channel, channel, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet_ltg.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_55": {
                "modules": {
                    "value": "[conv3x3(in_channel, channel, stride)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.norm_layer(channel)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "modules": {
                    "value": "[conv3x3(channel, channel)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.norm_layer(channel)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterDict_69": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.a[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_l).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.a[conv2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_l).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_287": {
                "variable": {
                    "value": "(v, arg_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a['conv1'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_316": {
                "variable": {
                    "value": "(v, arg_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a['conv2'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_368": {
                "modules": {
                    "value": "[nn.Conv2d(self.input_size[0], self.in_channel, kernel_size=3, stride=1, padding=1, bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_372": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._norm_layer(self.channels['conv1'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_376": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_387": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_388": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterDict_405": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Parameter_455": {
                "variable": {
                    "value": "self.a[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_l).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_481": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn1[task_arch['bn1'][0]](out_conv1)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "self.maxpool(h)",
                            "Call"
                        ],
                        [
                            "self.avgpool(h)",
                            "Call"
                        ],
                        [
                            "torch.flatten(h, 1)",
                            "Call"
                        ],
                        [
                            "layer_n[i](h, t, task_arch[name][i])",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_685": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1[conv1[0]][conv1[1]](x)",
                            "Call"
                        ],
                        [
                            "self.bn1[bn1](x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2[conv2[0]][conv2[1]](x)",
                            "Call"
                        ],
                        [
                            "self.bn2[bn2](x)",
                            "Call"
                        ],
                        [
                            "x + identify",
                            "BinOp"
                        ],
                        [
                            "self.bn1[t](out_)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn2[t](out_)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.bn1[t](out_)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "layer_n[i].search_forward(x, t)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_700": {
                "variable": {
                    "value": "(v, arg_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a['conv1'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "modules": {
                    "value": "[conv1x1(self.downsample[0], self.downsample[1], self.downsample[2])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.downsample_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.norm_layer(self.downsample[1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.a[d_conv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_l).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_258": {
                "variable": {
                    "value": "(v, arg_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a['d_conv'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "modules": {
                    "value": "[conv3x3(self.in_channel, self.channel, self.stride)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_107": {
                "*size": {
                    "value": "num_l",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.length['d_conv'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv1'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv2'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv1'] * 2 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ModuleList_112": {
                "modules": {
                    "value": "[conv3x3(self.channel, self.channel)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_120": {
                "*size": {
                    "value": "num_l",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.length['d_conv'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv1'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv2'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv1'] * 2 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_210": {
                "input": {
                    "value": "self.a['conv1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_210": {
                "input": {
                    "value": "torch.exp(self.a['conv1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_228": {
                "input": {
                    "value": "self.a['conv2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_228": {
                "input": {
                    "value": "torch.exp(self.a['conv2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_435": {
                "modules": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_441": {
                "modules": {
                    "value": "[nn.Conv2d(self.input_size[0], self.channels['conv1'], kernel_size=3, stride=1, padding=1, bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_455": {
                "*size": {
                    "value": "num_l",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.length['d_conv'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv1'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv2'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv1'] * 2 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_626": {
                "input": {
                    "value": "self.a['conv1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_626": {
                "input": {
                    "value": "torch.exp(self.a['conv1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_657": {
                "input": {
                    "value": "self.a['conv1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_657": {
                "input": {
                    "value": "torch.exp(self.a['conv1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "modules": {
                    "value": "[conv1x1(self.downsample[0], self.downsample[1], self.downsample[2])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_94": {
                "*size": {
                    "value": "num_l",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.length['d_conv'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv1'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv2'] * 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.length['conv1'] * 2 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_192": {
                "input": {
                    "value": "self.a['d_conv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_192": {
                "input": {
                    "value": "torch.exp(self.a['d_conv'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_391": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.length['d_conv']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv1']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv2']",
                            "Subscript"
                        ],
                        [
                            "self.length['d_conv']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv1']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv2']",
                            "Subscript"
                        ],
                        [
                            "self.length['d_conv']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv1']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv2']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv1']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv1']",
                            "Subscript"
                        ],
                        [
                            "b.length['d_conv']",
                            "Subscript"
                        ],
                        [
                            "b.length['conv1']",
                            "Subscript"
                        ],
                        [
                            "b.length['conv2']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv1']",
                            "Subscript"
                        ],
                        [
                            "self.length['conv1']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_445": {
                "in_channels": {
                    "value": "self.input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels['conv1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_642": {
                "input": {
                    "value": "b.a['conv1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_642": {
                "input": {
                    "value": "torch.exp(b.a['conv1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_648": {
                "input": {
                    "value": "b.a['conv2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_648": {
                "input": {
                    "value": "torch.exp(b.a['conv2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_368": {
                "in_channels": {
                    "value": "self.input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_636": {
                "input": {
                    "value": "b.a['d_conv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_636": {
                "input": {
                    "value": "torch.exp(b.a['d_conv'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_441": {
                "in_channels": {
                    "value": "self.input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels['conv1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/seu_model.py": {
        "torch": {
            "ModuleList_39": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(self.ncha, C_curr, 3, padding=1, bias=False), nn.BatchNorm2d(C_curr))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_105": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_249": {
                "variable": {
                    "value": "(v, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_268": {
                "variable": {
                    "value": "(v, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "nn.Conv2d(self.ncha, C_curr, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_155": {
                "size": {
                    "value": "(num_l,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1 / num_l",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "nn.Conv2d(self.ncha, C_curr, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "modules": {
                    "value": "[cell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.length['stem']",
                            "Subscript"
                        ],
                        [
                            "self.length['stem']",
                            "Subscript"
                        ],
                        [
                            "self.length[name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "full_177": {
                "size": {
                    "value": "(num_l,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1 / num_l",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "self.ncha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "self.ncha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "C_curr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "self.stem_multiplier * self.C",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/run.py": {
        "torch": {
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_85": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + args.device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_87": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SummaryWriter_142": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'/' + output_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_144": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'../logs/' + exp_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MyDataset(data[u]['test'], debug=args.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "DataLoader_126": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.forward(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}