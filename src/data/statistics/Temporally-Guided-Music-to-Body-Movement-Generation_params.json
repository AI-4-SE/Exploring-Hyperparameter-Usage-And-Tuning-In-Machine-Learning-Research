{
    "metric.py": {
        "sklearn": {
            "f1_score_120": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "abs_14": {
                "variable": {
                    "value": "square_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_15": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "square_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(pred - target)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_17": {
                "input": {
                    "value": "masked_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out * mask",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "sklearn": {
            "cosine_similarity_99": {
                "X": {
                    "value": "pred[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "targ[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "aud",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Data[p][v]['aud']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X_test.size(1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lengths).to('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "lengths.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "tensor_62": {
                "variable": {
                    "value": "aud",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "aud",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.vstack((mfcc_energy, mfcc_delta)).T",
                            "Attribute"
                        ],
                        [
                            "(aud - aud_mean) / (aud_std + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "self.aud[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(aud, dtype=torch.float32).to('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.keypoints[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(keypoints, dtype=torch.float32).to('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.seq_len[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(seq_len).to('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "load_30": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "download_data.pretrain_model_dst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "aud",
                    "type": "Name",
                    "possible_values": [
                        [
                            "preprocess(args.inference_audio, aud_mean, aud_std)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X_test.size(1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lengths).to('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "lengths.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/attention.py": {
        "torch": {
            "Dropout_31": {
                "variable": {
                    "value": "self.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_35": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoder_input, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.FFN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_model * 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_103": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_98": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "d_model * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/layers.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.slf_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.slf_attn",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.pos_ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.pos_ffn",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Down(d_model, d_model, residual=False) for _ in range(n_unet)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Up(d_model * 2, d_model, residual=False) for _ in range(n_unet)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.pos_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/module.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_45": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv1d(in_channels, mid_channels, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.avgpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool1d(2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_112": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(x1, size=x2.size(2), mode='linear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x2.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "linear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv1d(in_channels, out_channels, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_70": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_84": {
                "input": {
                    "value": "self.double_conv(x) + self.bypass(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_86": {
                "input": {
                    "value": "self.double_conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool1d_96": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_79": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/multihead_attention.py": {
        "torch": {
            "Dropout_17": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_27": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.view(-1, seq_q, d_q)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.rel_attn(query, key)",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.rel_attn(query, key)",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.relative_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DistanceEmbedding(self.head_depth, max_relative_positions_past[i], max_relative_positions_future[i], num_heads, heads_share_relative_embeddings[i], embedding_padding_modes[i], position_embedding_types[i], key_start_positions[i]) for i in range(n_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "col_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch, heads, length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, col_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "flat_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch, heads, length - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "flat_x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_x, flat_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.rel_attn(query, key)",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.rel_attn(query, key)",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.rel_attn(query, key)",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.rel_attn(query, key)",
                            "Call"
                        ],
                        [
                            "attn / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -2 ** 32 + 1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * query_mask",
                            "BinOp"
                        ],
                        [
                            "self.attn_dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.query_to_key_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_heads, self.head_depth) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_200": {
                "equation": {
                    "value": "'mn{q_dims}o, mn{k_dims}o -> mn{q_dims}{k_dims}'.format(q_dims=string.ascii_lowercase[:q.ndimension() - 3], k_dims=string.ascii_lowercase[::-1][:k.ndimension() - 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q + self.query_to_key_bias.view(1, q.size(1), *[1] * (q.ndimension() - 3), -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_118": {
                "data": {
                    "value": "torch.randn(self.head_depth, num_heads) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_123": {
                "*size": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.head_depth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "self.head_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/network.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.unet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Unet_block(d_model, n_unet, n_attn, n_head, max_len, dropout, pre_lnorm, attn_type) for _ in range(n_block)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.h_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "h_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.init.constant_(torch.empty(1, 1, hidden_dim), 0.0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.c_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "c_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.init.constant_(torch.empty(1, 1, hidden_dim), 0.0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_43": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_64": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(inputs, lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_67": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.contiguous()",
                            "Call"
                        ],
                        [
                            "output.view(-1, output.size(-1))",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.fc(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, total_length, self.output_dim)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "total_length": {
                    "value": "total_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "rh_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rh_output[:, :, :-3], rh_refined]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "full_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[body_output, rh_final]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_37": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_39": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/positional_embedding.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "14000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_19": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "14000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_20": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_22": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_23": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(embedding_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(half_dim, dtype=torch.float) * -emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(emb), torch.cos(emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_129": {
                "equation": {
                    "value": "f'bh{dim_str}d,{head_str}dm->bh{dim_str}m'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query + bias.view(1, query.size(1), *[1] * (query.ndimension() - 3), -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_147": {
                "variable": {
                    "value": "initial_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "'{h}ed, dt -> {h}et'.format(h='' if self.heads_share_relative_embedding else 'h')",
                    "type": "Call",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_156": {
                "input": {
                    "value": "initial_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding",
                            "Attribute"
                        ],
                        [
                            "self.prune_embedding(past, future, initial_embedding)",
                            "Call"
                        ],
                        [
                            "self.get_sinusoidal_embedding(past, future)",
                            "Call"
                        ],
                        [
                            "self.embedding.to(self._float_tensor)",
                            "Call"
                        ],
                        [
                            "torch.einsum('{h}ed, dt -> {h}et'.format(h='' if self.heads_share_relative_embedding else 'h'), self.weight, initial_embedding)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(max(past - self.last_past, 0), max(future - self.last_future, 0))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, torch.zeros(1, num_embeddings)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_153": {
                "input": {
                    "value": "initial_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding",
                            "Attribute"
                        ],
                        [
                            "self.prune_embedding(past, future, initial_embedding)",
                            "Call"
                        ],
                        [
                            "self.get_sinusoidal_embedding(past, future)",
                            "Call"
                        ],
                        [
                            "self.embedding.to(self._float_tensor)",
                            "Call"
                        ],
                        [
                            "torch.einsum('{h}ed, dt -> {h}et'.format(h='' if self.heads_share_relative_embedding else 'h'), self.weight, initial_embedding)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(max(past - self.last_past, 0), max(future - self.last_future, 0))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_155": {
                "input": {
                    "value": "initial_embedding.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(max(past - self.last_past, 0), max(future - self.last_future, 0))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_155": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_76": {
                "*size": {
                    "value": "embedding_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(depth, max_relative_position_past + max_relative_position_future)",
                            "Tuple"
                        ],
                        [
                            "(num_heads, depth, max_relative_position_past + max_relative_position_future)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(depth).unsqueeze(0).repeat(num_heads, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_102": {
                "start": {
                    "value": "half_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.depth // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_90": {
                "n": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_92": {
                "n": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "past + future",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_104": {
                "input": {
                    "value": "emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding.to(self._float_tensor)",
                            "Call"
                        ],
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "(torch.arange(num_embeddings, dtype=torch.float) - past + 1).unsqueeze(0) * emb.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=0).view(-1, num_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(1, num_embeddings)], dim=0)",
                            "Call"
                        ],
                        [
                            "emb.to(self._float_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_104": {
                "input": {
                    "value": "emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding.to(self._float_tensor)",
                            "Call"
                        ],
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "(torch.arange(num_embeddings, dtype=torch.float) - past + 1).unsqueeze(0) * emb.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=0).view(-1, num_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(1, num_embeddings)], dim=0)",
                            "Call"
                        ],
                        [
                            "emb.to(self._float_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_103": {
                "start": {
                    "value": "num_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "past + future",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "torch": {
            "stack_19": {
                "variable": {
                    "value": "x_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat((pos, torch.zeros(max_len - len(pos)).type(torch.int32))) for pos in x_pos]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_18": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "s + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "(pos, torch.zeros(max_len - len(pos)).type(torch.int32))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "max_len - len(pos)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "audio_skeleton_dataset(download_data.train_dst, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "audio_skeleton_dataset(download_data.train_dst, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "variable": {
                    "value": "movement_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "movement_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MovementNet(args.d_input, args.d_output_body, args.d_output_rh, args.d_model, args.n_block, args.n_unet, args.n_attn, args.n_head, args.max_len, args.dropout, args.pre_lnorm, args.attn_type).to('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(movement_net, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(len(args.gpu_ids.split(',')))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_46": {
                "params": {
                    "value": "movement_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__78": {
                "parameters": {
                    "value": "movement_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "{'epoch': e + 1, 'model_state_dict': {'movement_net': state_dict}, 'optimizer_state_dict': optimizer.state_dict(), 'loss': min_val_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "visualize/common/camera.py": {
        "torch": {
            "clamp_59": {
                "variable": {
                    "value": "XX",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X[..., :2] / X[..., 2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX[..., :2] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(XX.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_63": {
                "variable": {
                    "value": "tan",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p * XX",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(XX.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "variable": {
                    "value": "XX",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X[..., :2] / X[..., 2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "k * torch.cat((r2, r2 ** 2, r2 ** 3), dim=len(r2.shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(r2.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "(r2, r2 ** 2, r2 ** 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(r2.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "visualize/common/loss.py": {
        "torch": {
            "mean_75": {
                "variable": {
                    "value": "norm_predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(predicted ** 2, dim=3, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_76": {
                "variable": {
                    "value": "norm_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(target * predicted, dim=3, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_17": {
                "input": {
                    "value": "torch.norm(predicted - target, dim=len(target.shape) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_25": {
                "input": {
                    "value": "w * torch.norm(predicted - target, dim=len(target.shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_17": {
                "input": {
                    "value": "predicted - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(target.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "predicted ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "target * predicted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_25": {
                "input": {
                    "value": "predicted - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(target.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "visualize/common/model.py": {
        "torch": {
            "Dropout_28": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ],
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.expand_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "variable": {
                    "value": "self.shrink",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_joints_out * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_102": {
                "variable": {
                    "value": "self.expand_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_joints_in * in_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_widths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.layers_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers_conv",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.layers_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers_bn",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv1d_167": {
                "variable": {
                    "value": "self.expand_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_joints_in * in_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_widths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "filter_widths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_184": {
                "variable": {
                    "value": "self.layers_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers_conv",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_185": {
                "variable": {
                    "value": "self.layers_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers_bn",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv1d_113": {
                "in_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_widths[i] if not dense else 2 * self.pad[-1] + 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "next_dilation if not dense else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_117": {
                "num_features": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_118": {
                "in_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_119": {
                "num_features": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_178": {
                "in_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_widths[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "filter_widths[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_179": {
                "num_features": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_180": {
                "in_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_181": {
                "num_features": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "visualize/common/quaternion.py": {
        "torch": {
            "cross_22": {
                "variable": {
                    "value": "uv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(q.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_23": {
                "variable": {
                    "value": "uuv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "uv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cross(qvec, v, dim=len(q.shape) - 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "len(q.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "(w, -xyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(q.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "visualize/common/utils.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "args[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}