{
    "build.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "build_modulated.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "functions/deform_conv.py": {
        "torch": {
            "DeformConvFunction_27": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "self.stride[d]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.im2col_step": {
                    "value": "im2col_step",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "functions/modulated_dcn_func.py": {
        "torch": {
            "ModulatedDeformConvFunction_12": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "self.padding": {
                    "value": "padding",
                    "possible_values": []
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DeformRoIPoolingFunction_75": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.spatial_scale": {
                    "value": "spatial_scale",
                    "possible_values": []
                },
                "self.pooled_size": {
                    "value": "pooled_size",
                    "possible_values": []
                },
                "self.output_dim": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "self.no_trans": {
                    "value": "no_trans",
                    "possible_values": []
                },
                "self.group_size": {
                    "value": "group_size",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sample_per_part": {
                    "value": "sample_per_part",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.trans_std": {
                    "value": "trans_std",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "rois.shape",
                    "possible_values": []
                }
            }
        }
    },
    "modules/deform_conv.py": {
        "torch": {
            "DeformConv_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.num_deformable_groups": {
                    "value": "num_deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_28": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels, *self.kernel_size)",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "modules/modulated_dcn.py": {
        "torch": {
            "ModulatedDeformConv_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "self.padding": {
                    "value": "padding",
                    "possible_values": []
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.no_bias": {
                    "value": "no_bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_28": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels, *self.kernel_size)",
                        "possible_values": []
                    }
                },
                "Parameter_29": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(out_channels)",
                        "possible_values": []
                    }
                }
            },
            "DeformRoIPooling_76": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.spatial_scale": {
                    "value": "spatial_scale",
                    "possible_values": []
                },
                "self.pooled_size": {
                    "value": "pooled_size",
                    "possible_values": []
                },
                "self.output_dim": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "self.no_trans": {
                    "value": "no_trans",
                    "possible_values": []
                },
                "self.group_size": {
                    "value": "group_size",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sample_per_part": {
                    "value": "sample_per_part",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.trans_std": {
                    "value": "trans_std",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, self.padding)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "chunk_69": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "offset",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "self.mask_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "mask.view(n, 1, self.pooled_size, self.pooled_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.offset_fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pooled_size * self.pooled_size * self.output_dim, self.deform_fc_dim)",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.mask_fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pooled_size * self.pooled_size * self.output_dim, self.deform_fc_dim)",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "self.pooled_size * self.pooled_size * self.output_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_dim",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "self.deform_fc_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_dim",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "self.deform_fc_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooled_size * self.pooled_size * 2",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "in_features": {
                    "value": "self.pooled_size * self.pooled_size * self.output_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_dim",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "self.deform_fc_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooled_size * self.pooled_size * 1",
                    "possible_values": []
                }
            },
            "Sigmoid_156": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_deformable_groups * 2 * kH * kW",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "randn_29": {
                "*size": {
                    "value": "N",
                    "possible_values": []
                },
                "out": {
                    "value": "inC",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inH",
                    "possible_values": []
                },
                "layout": {
                    "value": "inW",
                    "possible_values": []
                }
            }
        }
    },
    "test_modulated.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "randint_36": {
                "variable": {
                    "value": "batch_inds",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "randint_37": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "randint_38": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "randint_40": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_inds, x, y, x + w, y + h)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randn_42": {
                "variable": {
                    "value": "offset",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "randint_80": {
                "variable": {
                    "value": "batch_inds",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "randint_81": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "randint_82": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "randint_83": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "randint_84": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_inds, x, y, x + w, y + h)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}