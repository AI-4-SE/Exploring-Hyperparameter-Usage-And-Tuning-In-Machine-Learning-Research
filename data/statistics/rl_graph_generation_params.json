{
    "rl-baselines/baselines/a2c/a2c.py": {
        "tensorflow": {
            "placeholder_30": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "ADV",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_38": {
                "variable": {
                    "value": "neglogpac",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "train_model.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [nbatch])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ADV * neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mse(tf.squeeze(train_model.vf), R)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cat_entropy(train_model.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_45": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg_loss - entropy * ent_coef + vf_loss * vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_trainable_variables('model')",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_49": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reset_default_graph_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_47": {
                "variable": {
                    "value": "(grads, grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, max_grad_norm)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_88": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.make_session()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_40": {
                "input": {
                    "value": "train_model.vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/a2c/policies.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "Ob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pi, pi * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_10": {
                "x": {
                    "value": "unscaled_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unscaled_images",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, actdim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/a2c/utils.py": {
        "tensorflow": {
            "exp_14": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - tf.reduce_max(logits, 1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_15": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_92": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(x, axes=axes, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "sum(self.episode_rewards[i])",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_105": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_109": {
                "variable": {
                    "value": "(u, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_131": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(x, axes=axes, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "sum(self.episode_rewards[i])",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_144": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_261": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(x, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx_flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, x.shape[0]) * x.shape[1] + idx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "moments_285": {
                "variable": {
                    "value": "(_, vary)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u if u.shape == flat_shape else v",
                            "IfExp"
                        ],
                        [
                            "q.reshape(shape)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_286": {
                "variable": {
                    "value": "(_, varpred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q - qpred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_10": {
                "input": {
                    "value": "logits - tf.log(-tf.log(noise))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_17": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "wshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rf, rf, nin, nf]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, nf, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(init_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbatch, nsteps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbatch, nsteps, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "wx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_97": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ],
                        [
                            "_ln(tf.matmul(x, wx), gx, bx) + _ln(tf.matmul(h, wh), gh, bh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_98": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "i in range(nenvs)",
                            "Call"
                        ],
                        [
                            "i in range(0, self.nenvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_100": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_101": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.svd(a, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(x, axes=axes, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "wx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_119": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "bx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "bh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_136": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ],
                        [
                            "_ln(tf.matmul(x, wx), gx, bx) + _ln(tf.matmul(h, wh), gh, bh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_137": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "i in range(nenvs)",
                            "Call"
                        ],
                        [
                            "i in range(0, self.nenvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_138": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_140": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.svd(a, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(x, axes=axes, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_272": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(t), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_9": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_13": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "p0 * tf.log(p0 + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_23": {
                "x": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [1, nf, 1, 1], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, bshape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh], initializer=tf.constant_initializer(init_bias))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh * 4], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh * 4], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "bshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, nf]",
                            "List"
                        ],
                        [
                            "[1, nf, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_73": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.svd(a, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "tf.concat(axis=1, values=h)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "tensor": {
                    "value": "tf.stack(values=h, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_110": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_261": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_272": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(t), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_10": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', wshape, initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_66": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', wshape, initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_73": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nsteps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(xs)",
                            "Call"
                        ],
                        [
                            "len(xs)",
                            "Call"
                        ],
                        [
                            "nsteps",
                            "Method Argument"
                        ],
                        [
                            "nsteps",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_80": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_82": {
                "values": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_142": {
                "x": {
                    "value": "_ln(c, gc, bc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_272": {
                "input_tensor": {
                    "value": "tf.square(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_17": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_20": {
                "x": {
                    "value": "p0 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_57": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_65": {
                "value": {
                    "value": "init_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_90": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_119": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_120": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_123": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_124": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_126": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_128": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_129": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_272": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(ts, shapes)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_135": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/acer/acer_simple.py": {
        "tensorflow": {
            "ConfigProto_59": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "num_procs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(env.remotes)",
                            "Call"
                        ],
                        [
                            "num_procs",
                            "Method Argument"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "num_procs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(env.remotes)",
                            "Call"
                        ],
                        [
                            "num_procs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_62": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, intra_op_parallelism_threads=num_procs, inter_op_parallelism_threads=num_procs)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "MU",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch, nact]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_82": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.pi * train_model.q",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cat_entropy_softmax(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_120": {
                "variable": {
                    "value": "logf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_i + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_126": {
                "variable": {
                    "value": "logf_bc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "gain_bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logf_bc * tf.stop_gradient(adv_bc * tf.nn.relu(1.0 - c / (rho + eps)) * f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "variable": {
                    "value": "loss_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.stop_gradient(qret) - q_i) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_170": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "rprop_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "rprop_alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "rprop_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "rprop_epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reset_default_graph_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "minimum_32": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rho_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_by_index(rho, A)",
                            "Call"
                        ],
                        [
                            "rho_i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_143": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-(loss_policy - ent_coef * entropy) * nsteps * nenvs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(lambda var: strip(var, nenvs, nsteps), [train_model.pi, polyak_model.pi, train_model.q])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_146": {
                "variable": {
                    "value": "k_dot_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "k * g",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_147": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "(tf.reduce_sum(k * g, axis=-1) - delta) / (tf.reduce_sum(tf.square(k), axis=-1) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "variable": {
                    "value": "avg_norm_k_dot_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(k_dot_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "avg_norm_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_157": {
                "variable": {
                    "value": "grads_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(lambda var: strip(var, nenvs, nsteps), [train_model.pi, polyak_model.pi, train_model.q])",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_trainable_variables('model')",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "grads_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-g / (nenvs * nsteps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_158": {
                "variable": {
                    "value": "grads_q",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_q * q_coef",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_trainable_variables('model')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_norm_162": {
                "variable": {
                    "value": "norm_grads_q",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss_q * q_coef, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_norm_163": {
                "variable": {
                    "value": "norm_grads_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(f, params, grads_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_165": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_policy + q_coef * loss_q - ent_coef * entropy",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_trainable_variables('model')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_168": {
                "variable": {
                    "value": "(grads, norm_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[gradient_add(g1, g2, param) for (g1, g2, param) in zip(grads_policy, grads_q, params)]",
                            "ListComp"
                        ],
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, max_grad_norm)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "max_grad_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_175": {
                "variable": {
                    "value": "_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema_apply_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.apply(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_210": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "custom_getter",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_121": {
                "input": {
                    "value": "adv * tf.minimum(c, rho_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "input_tensor": {
                    "value": "gain_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logf * tf.stop_gradient(adv * tf.minimum(c, rho_i))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_125": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(train_model.pi * train_model.q, axis=-1)",
                            "Call"
                        ],
                        [
                            "strip(v, nenvs, nsteps, True)",
                            "Call"
                        ],
                        [
                            "ema.average(getter(*args, **kwargs))",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nenvs * nsteps, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "input_tensor": {
                    "value": "gain_bc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logf_bc * tf.stop_gradient(adv_bc * tf.nn.relu(1.0 - c / (rho + eps)) * f), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_135": {
                "tensor": {
                    "value": "qret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_final",
                            "variable"
                        ],
                        [
                            "rs[i] + gamma * qret * (1.0 - ds[i])",
                            "BinOp"
                        ],
                        [
                            "rho_bar[i] * (qret - q_is[i]) + vs[i]",
                            "BinOp"
                        ],
                        [
                            "seq_to_batch(qrets, flat=True)",
                            "Call"
                        ],
                        [
                            "q_retrace(R, D, q_i, v, rho_i, nenvs, nsteps, gamma)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nenvs, nsteps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_174": {
                "control_inputs": {
                    "value": "[_opt_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_128": {
                "input": {
                    "value": "adv_bc * tf.nn.relu(1.0 - c / (rho + eps)) * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_136": {
                "x": {
                    "value": "tf.stop_gradient(qret) - q_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_152": {
                "x": {
                    "value": "k_dot_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(k * g, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_153": {
                "x": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, (tf.reduce_sum(k * g, axis=-1) - delta) / (tf.reduce_sum(tf.square(k), axis=-1) + eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_121": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "rho_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_by_index(rho, A)",
                            "Call"
                        ],
                        [
                            "rho_i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_155": {
                "tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, (tf.reduce_sum(k * g, axis=-1) - delta) / (tf.reduce_sum(tf.square(k), axis=-1) + eps))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nenvs * nsteps, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_136": {
                "input": {
                    "value": "qret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_final",
                            "variable"
                        ],
                        [
                            "rs[i] + gamma * qret * (1.0 - ds[i])",
                            "BinOp"
                        ],
                        [
                            "rho_bar[i] * (qret - q_is[i]) + vs[i]",
                            "BinOp"
                        ],
                        [
                            "seq_to_batch(qrets, flat=True)",
                            "Call"
                        ],
                        [
                            "q_retrace(R, D, q_i, v, rho_i, nenvs, nsteps, gamma)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_147": {
                "input_tensor": {
                    "value": "tf.square(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_128": {
                "features": {
                    "value": "1.0 - c / (rho + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_147": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-f_pol / (f + eps)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/acer/policies.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_18": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc(h, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ],
                        [
                            "fc(h5, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc(h, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ],
                        [
                            "fc(h5, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/acktr/kfac_utils.py": {
        "tensorflow": {
            "cast_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vec > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_61": {
                "variable": {
                    "value": "eigen_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_62": {
                "variable": {
                    "value": "eigen_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(b_shape[reduce_dim]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "b_t_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_67": {
                "variable": {
                    "value": "input_mat_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : input_mat_clipped",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_14": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_24": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(a_shape[reduce_dim])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "a_t_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_36": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_67": {
                "x": {
                    "value": "tf.greater(eigen_ratio, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(eigen_ratio, -500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_67": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_67": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-500",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Print_67": {
                "input_": {
                    "value": "input_mat_clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clipoutNeg(input_mat, threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500)), lambda : input_mat_clipped, lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]))",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "value": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/acktr/policies.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "ob_no",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ob_dim * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "oldac_na",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ac_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ac",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "oldac_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ac_dim * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "oldac_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "adv_n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_18": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(ob_no, 64, 'h1', weight_init=U.normc_initializer(1.0), bias_init=0.0, weight_loss_dict=wd_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_19": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(h1, 64, 'h2', weight_init=U.normc_initializer(1.0), bias_init=0.0, weight_loss_dict=wd_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "self.logstd_1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ac_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "variable": {
                    "value": "logstd_1a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd_1a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(logstd_1a, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_24": {
                "variable": {
                    "value": "std_1a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd_1a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(logstd_1a, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_25": {
                "variable": {
                    "value": "std_na",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std_1a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(logstd_1a)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(mean_na)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "ac_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(mean_na, [-1, ac_dim]), tf.reshape(std_na, [-1, ac_dim])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_div(oldac_dist, ac_dist, ac_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "input_tensor": {
                    "value": "adv_n * logprob_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "logprob_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.log(ac_dist[:, ac_dim:]), axis=1) - 0.5 * tf.log(2.0 * np.pi) * ac_dim - 0.5 * tf.reduce_sum(tf.square(ac_dist[:, :ac_dim] - oldac_na) / tf.square(ac_dist[:, ac_dim:]), axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_26": {
                "tensor": {
                    "value": "std_na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(std_1a, [tf.shape(mean_na)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, ac_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_28": {
                "input_tensor": {
                    "value": "tf.log(ac_dist[:, ac_dim:])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "tf.log(ac_dist[:, ac_dim:])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_25": {
                "input": {
                    "value": "mean_na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense(h2, ac_dim, 'mean', weight_init=U.normc_initializer(0.1), bias_init=0.0, weight_loss_dict=wd_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_27": {
                "input": {
                    "value": "ac_dist[:, ac_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_28": {
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_28": {
                "x": {
                    "value": "ac_dist[:, ac_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_29": {
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_29": {
                "x": {
                    "value": "ac_dist[:, ac_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/acktr/run_mujoco.py": {
        "tensorflow": {
            "Session_13": {
                "config": {
                    "value": "tf.ConfigProto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/acktr/utils.py": {
        "tensorflow": {
            "get_variable_7": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_8": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_27": {
                "input_tensor": {
                    "value": "numerator / denominator + tf.log(std2) - tf.log(std1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_4": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_12": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_decay_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_decay_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_19": {
                "value": {
                    "value": "tf.matmul(x, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [size], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_25": {
                "x": {
                    "value": "std1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist1[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_to_collection_17": {
                "name": {
                    "value": "tf.get_variable_scope().name.split('/')[0] + '_' + 'losses'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(w), weight_decay_fc, name='weight_decay_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_19": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_26": {
                "x": {
                    "value": "std2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist2[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_28": {
                "x": {
                    "value": "std2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist2[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_5": {
                "value": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_8": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_12": {
                "t": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_17": {
                "value": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/acktr/value_functions.py": {
        "tensorflow": {}
    },
    "rl-baselines/baselines/common/distributions.py": {
        "tensorflow": {
            "get_default_session_333": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_333": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "pd.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{M: Mval}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "one_hot_147": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(self.logits)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_154": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_155": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - tf.reduce_max(other.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_156": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_162": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_163": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_237": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_240": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=len(flat.shape) - 1, num_or_size_splits=2, value=flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_263": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_42": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_44": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_141": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_148": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, tf.shape(self.logits)[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_159": {
                "input_tensor": {
                    "value": "p0 * (a0 - tf.log(z0) - a1 + tf.log(z1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_165": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_168": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_182": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_184": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_186": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_188": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_200": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_202": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_204": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_206": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_208": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_223": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_225": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_227": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "input_tensor": {
                    "value": "other.logstd - self.logstd + (tf.square(self.std) + tf.square(self.mean - other.mean)) / (2.0 * tf.square(other.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_267": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_269": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.to_float(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_273": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_276": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_152": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_153": {
                "input_tensor": {
                    "value": "other.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_161": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_167": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_180": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_188": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_200": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_208": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_221": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_229": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_248": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_269": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_273": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_275": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_276": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_300": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_147": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_168": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_176": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3]",
                            "List"
                        ],
                        [
                            "nvec",
                            "Method Argument"
                        ],
                        [
                            "nvec",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_271": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_159": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_165": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_246": {
                "input_tensor": {
                    "value": "tf.square((x - self.mean) / self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_247": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_255": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_269": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_182": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_202": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_223": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_246": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_247": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_251": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/common/misc_util.py": {
        "tensorflow": {
            "set_random_seed_75": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/common/mpi_adam.py": {
        "tensorflow": {
            "Variable_57": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_62": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "stepsize",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_random_seed_55": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_69": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_70": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize * np.sqrt(1 - self.beta2 ** self.t) / (1 - self.beta1 ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_59": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/common/mpi_running_mean_std.py": {
        "tensorflow": {
            "get_variable_8": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_25": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.to_float(self._sumsq / self._count) - tf.square(self.mean), 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_26": {
                "x": {
                    "value": "tf.to_float(self._sumsq / self._count) - tf.square(self.mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_11": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_21": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_26": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_32": {
                "ref": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_33": {
                "ref": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='var')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_34": {
                "ref": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float64, name='count')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/common/tests/test_tf_util.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "other",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/common/tf_util.py": {
        "tensorflow": {
            "cond_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ConfigProto_55": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_214": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_41": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_80": {
                "main": {
                    "value": "tf.variables_initializer(new_variables)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_175": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_217": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_235": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_255": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.name",
                            "Attribute"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_263": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, intprod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_60": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_62": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_80": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_91": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=dtype, shape=shape, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.name",
                            "Attribute"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_238": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{self.theta: theta}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_default_session_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_245": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_42": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_43": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_110": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_116": {
                "name": {
                    "value": "summary_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.transpose(tf.reshape(w, [filter_size[0], filter_size[1], -1, 1]), [2, 0, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_images": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_194": {
                "main": {
                    "value": "self.outputs_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "feed_dict",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_norm_216": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_44": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_117": {
                "a": {
                    "value": "tf.reshape(w, [filter_size[0], filter_size[1], -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_233": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[filter_size[0], filter_size[1], -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_242": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_218": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/ddpg/ddpg.py": {
        "tensorflow": {
            "reduce_mean_29": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_30": {
                "variable": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "x": {
                    "value": "reduce_var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_31": {
                "input_tensor": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(x - m)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_60": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.obs0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "obs0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.obs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "obs1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.terminals1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + action_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.critic_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "critic_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.param_noise_stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_106": {
                "variable": {
                    "value": "normalized_obs0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.obs0, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "normalized_obs1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.obs1, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_166": {
                "variable": {
                    "value": "self.adaptive_policy_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(self.actor_tf - adaptive_actor_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_181": {
                "variable": {
                    "value": "normalized_critic_target_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.critic_target, self.ret_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.normalized_critic_tf - normalized_critic_target_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_203": {
                "variable": {
                    "value": "self.old_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_std",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_205": {
                "variable": {
                    "value": "self.old_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_44": {
                "*inputs": {
                    "value": "*soft_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_40": {
                "ref": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ],
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ],
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "assign_41": {
                "ref": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(1.0 - tau) * target_var + tau * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_129": {
                "t": {
                    "value": "self.normalized_critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_131": {
                "t": {
                    "value": "self.normalized_critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "input_tensor": {
                    "value": "tf.square(self.actor_tf - adaptive_actor_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_182": {
                "x": {
                    "value": "self.normalized_critic_tf - normalized_critic_target_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_231": {
                "input_tensor": {
                    "value": "self.critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_236": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "input_tensor": {
                    "value": "self.actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_55": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var + tf.random_normal(tf.shape(var), mean=0.0, stddev=param_noise_stddev)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_58": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ],
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ],
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "obs_rms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "ret_rms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_166": {
                "x": {
                    "value": "self.actor_tf - adaptive_actor_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "input_tensor": {
                    "value": "self.obs_rms.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "input_tensor": {
                    "value": "self.perturbed_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ],
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ],
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/ddpg/main.py": {
        "tensorflow": {
            "reset_default_graph_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/ddpg/models.py": {
        "tensorflow": {
            "get_collection_11": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_15": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.nb_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_44": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_71": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/ddpg/training.py": {
        "tensorflow": {
            "Saver_34": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/deepq/build_graph.py": {
        "tensorflow": {
            "get_collection_115": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_181": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_184": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func')",
                            "Call"
                        ],
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func')",
                            "Call"
                        ],
                        [
                            "U.function([obs_t_input], q_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_189": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values_perturbed, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_191": {
                "variable": {
                    "value": "output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "update_param_noise_threshold_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "update_param_noise_scale_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "reset_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "reset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_246": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_247": {
                "variable": {
                    "value": "param_noise_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_248": {
                "variable": {
                    "value": "param_noise_threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_threshold",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.05)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(q_values) * (tf.log(tf.nn.softmax(q_values)) - tf.log(tf.nn.softmax(q_values_adaptive)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_280": {
                "variable": {
                    "value": "mean_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.nn.softmax(q_values) * (tf.log(tf.nn.softmax(q_values)) - tf.log(tf.nn.softmax(q_values_adaptive))), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_294": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values_perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='perturbed_q_func')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_298": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values_perturbed, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_300": {
                "variable": {
                    "value": "output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_381": {
                "variable": {
                    "value": "act_t_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "rew_t_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_384": {
                "variable": {
                    "value": "done_mask_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "done",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_385": {
                "variable": {
                    "value": "importance_weights_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_389": {
                "variable": {
                    "value": "q_func_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name + '/q_func'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_393": {
                "variable": {
                    "value": "target_q_func_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name + '/target_q_func'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "variable": {
                    "value": "q_t_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_t * tf.one_hot(act_t_ph, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_413": {
                "variable": {
                    "value": "weighted_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "importance_weights_ph * errors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_430": {
                "variable": {
                    "value": "update_target_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_target_expr",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_variable_scope_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_378": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_401": {
                "variable": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_tp1_using_online_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='q_func', reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_402": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1 * tf.one_hot(q_tp1_best_using_online_net, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_404": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='target_q_func')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_186": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_187": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_192": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "group_272": {
                "*inputs": {
                    "value": "*perturb_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cond_283": {
                "variable": {
                    "value": "update_scale_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mean_kl < param_noise_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale * 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale / 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_290": {
                "pred": {
                    "value": "update_param_noise_threshold_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_param_noise_threshold_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_threshold",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_295": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_296": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_301": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_304": {
                "pred": {
                    "value": "reset_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='reset')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : perturb_vars(original_scope='q_func', perturbed_scope='perturbed_q_func')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*[])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_305": {
                "pred": {
                    "value": "update_param_noise_scale_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='update_param_noise_scale')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : update_scale()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Variable(0.0, trainable=False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stop_gradient_411": {
                "input": {
                    "value": "q_t_selected_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rew_t_ph + gamma * q_tp1_best_masked",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_181": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_188": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_246": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_247": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_248": {
                "value": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_266": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_vars, all_perturbed_vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var + tf.random_normal(shape=tf.shape(var), mean=0.0, stddev=param_noise_scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_269": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_vars, all_perturbed_vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_vars, all_perturbed_vars)",
                            "Call"
                        ],
                        [
                            "zip(sorted(q_func_vars, key=lambda v: v.name), sorted(target_q_func_vars, key=lambda v: v.name))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_279": {
                "logits": {
                    "value": "q_values_adaptive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='adaptive_q_func')",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_282": {
                "control_inputs": {
                    "value": "[perturb_for_adaption]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_297": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_396": {
                "indices": {
                    "value": "act_t_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='action')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_279": {
                "x": {
                    "value": "tf.nn.softmax(q_values_adaptive)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_304": {
                "*inputs": {
                    "value": "*[]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_305": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_402": {
                "indices": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(q_tp1_using_online_net, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_420": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_norm_clipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_266": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_vars, all_perturbed_vars)",
                            "Call"
                        ],
                        [
                            "zip(sorted(q_func_vars, key=lambda v: v.name), sorted(target_q_func_vars, key=lambda v: v.name))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/deepq/experiments/custom_cartpole.py": {
        "tensorflow": {
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_34": {
                "learning_rate": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/deepq/models.py": {
        "tensorflow": {
            "flatten_43": {
                "variable": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inpt",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "inpt",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_12": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inpt",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "inpt",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "action_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "action_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_63": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/deepq/simple.py": {
        "tensorflow": {
            "Session_168": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_181": {
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/deepq/utils.py": {
        "tensorflow": {
            "Saver_10": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_15": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_83": {
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_85": {
                "x": {
                    "value": "super().get()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/gail/adversary.py": {
        "tensorflow": {
            "reduce_mean_33": {
                "variable": {
                    "value": "generator_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.sigmoid(generator_logits) < 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "expert_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.sigmoid(expert_logits) > 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_38": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(generator_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=generator_logits, labels=tf.zeros_like(generator_logits))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(generator_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_40": {
                "variable": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(expert_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=expert_logits, labels=tf.ones_like(expert_logits))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(expert_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_43": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[generator_logits, expert_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logit_bernoulli_entropy(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.generator_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observations_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.generator_acs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.actions_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.expert_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_observations_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.expert_acs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.actions_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_session_80": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_13": {
                "features": {
                    "value": "-a",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs, acs_ph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_77": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_33": {
                "x": {
                    "value": "tf.nn.sigmoid(generator_logits) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_34": {
                "x": {
                    "value": "tf.nn.sigmoid(expert_logits) > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_51": {
                "x": {
                    "value": "1 - tf.nn.sigmoid(generator_logits) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_17": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([generator_logits, expert_logits], 0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(p_h2, 1, activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_38": {
                "input": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_40": {
                "input": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_33": {
                "x": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_34": {
                "x": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_51": {
                "x": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/gail/behavior_clone.py": {
        "tensorflow": {
            "reduce_mean_55": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(ac - pi.ac)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_55": {
                "x": {
                    "value": "ac - pi.ac",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/gail/gail-eval.py": {
        "tensorflow": {
            "latest_checkpoint_69": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_checkpoint_dir(checkpoint_list, limit, prefix=prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/gail/mlp_policy.py": {
        "tensorflow": {
            "clip_by_value_36": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_39": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(last_out, hid_size, 'vffc%i' % (i + 1), weight_init=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(last_out, hid_size, 'polfc%i' % (i + 1), weight_init=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_69": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_72": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/gail/statistics.py": {
        "tensorflow": {
            "merge_32": {
                "variable": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.scalar_summaries + self.histogram_summaries",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.scalar.summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_23": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.scalar.summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', None, name=k + '.scalar.summary')",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', None, name=k + '.histogram.summary')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.histogram.summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_28": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.histogram.summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', None, name=k + '.scalar.summary')",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', None, name=k + '.histogram.summary')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/gail/trpo_mpi.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_137": {
                "variable": {
                    "value": "vferr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_139": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_140": {
                "variable": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ratio * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_157": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if v.name.startswith('pi/pol') or v.name.startswith('pi/logstd')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_166": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "square_137": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_236": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_164": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_166": {
                "input_tensor": {
                    "value": "g * tangent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_169": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_session_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/her/actor_critic.py": {
        "tensorflow": {
            "concat_31": {
                "variable": {
                    "value": "input_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "input_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g, self.pi_tf / self.max_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "input_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g, self.u_tf / self.max_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "Q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "x": {
                    "value": "nn(input_pi, [self.hidden] * self.layers + [self.dimu])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/her/ddpg.py": {
        "tensorflow": {
            "get_collection_220": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_225": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_231": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "batch_tf[r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_tf['r']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_271": {
                "variable": {
                    "value": "target_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "batch_tf['r'] + self.gamma * target_Q_pi_tf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "*clip_range",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reduce_mean_272": {
                "variable": {
                    "value": "self.Q_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.stop_gradient(target_tf) - self.main.Q_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_275": {
                "variable": {
                    "value": "Q_grads_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.Q_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._vars('main/Q')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_276": {
                "variable": {
                    "value": "pi_grads_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.pi_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._vars('main/pi')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InteractiveSession_233": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_298": {
                "var_list": {
                    "value": "self._global_vars('')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "o_stats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "g_stats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_272": {
                "x": {
                    "value": "tf.stop_gradient(target_tf) - self.main.Q_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_273": {
                "input_tensor": {
                    "value": "self.main.Q_pi_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_274": {
                "input_tensor": {
                    "value": "tf.square(self.main.pi_tf / self.max_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_339": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_274": {
                "x": {
                    "value": "self.main.pi_tf / self.max_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_272": {
                "input": {
                    "value": "target_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(batch_tf['r'] + self.gamma * target_Q_pi_tf, *clip_range)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/her/normalizer.py": {
        "tensorflow": {
            "get_variable_31": {
                "variable": {
                    "value": "self.sum_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_sum.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.sumsq_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_sumsq.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "self.count_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_count.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "std",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.count_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.sum_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.sumsq_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sumsq_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_50": {
                "variable": {
                    "value": "self.update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.count_tf.assign_add(self.count_pl)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.sum_tf.assign_add(self.sum_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_55": {
                "variable": {
                    "value": "self.recompute_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.assign(self.mean, self.sum_tf / self.count_tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.assign(self.std, tf.sqrt(tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_77": {
                "t": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_56": {
                "ref": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sum_tf / self.count_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_57": {
                "ref": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sqrt(tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_125": {
                "shape": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "x": {
                    "value": "tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_57": {
                "x": {
                    "value": "tf.square(self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_58": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "self.sum_tf / self.count_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/her/util.py": {
        "tensorflow": {
            "concat_53": {
                "values": {
                    "value": "[tf.reshape(grad, [U.numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input, units=size, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=reuse, name=name + '_' + str(i))",
                            "Call"
                        ],
                        [
                            "activation(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [-1])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size in enumerate(layers_sizes)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input, units=size, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=reuse, name=name + '_' + str(i))",
                            "Call"
                        ],
                        [
                            "activation(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [-1])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "tensor": {
                    "value": "tf.cast(source, target.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "episode_batch['u'].shape",
                            "Attribute"
                        ],
                        [
                            "[1] * (dim - 1) + [-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_144": {
                "x": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "target.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[U.numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/logger.py": {
        "tensorflow": {
            "summary_iterator_450": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_bytes_154": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/ppo1/cnn_policy.py": {
        "tensorflow": {
            "dense_36": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_53": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_38": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_26": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_32": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/ppo1/gcn_policy.py": {
        "tensorflow": {
            "get_variable_120": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(x, args, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(d)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_160": {
                "variable": {
                    "value": "d_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(x_gen, args, name=name)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(d_)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_364": {
                "variable": {
                    "value": "ob_node",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ob['node']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_384": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_node2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GCN_batch(ob['adj'], emb_node1, args.emb_size, is_act=False, is_normalize=True, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_385": {
                "variable": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_396": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 3, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_398": {
                "variable": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 1, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[edge_dim, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[edge_dim, 1, out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj @ tf.tile(node_feature, [edge_dim, 1, 1]) @ W + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "adj @ tf.tile(node_feature, [1, edge_dim, 1, 1]) @ tf.tile(W, [batch_size, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, edge_dim, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.glorot_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, edge_dim, 1, out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, node_dim, node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, out_dim, node_dim, node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_112": {
                "variable": {
                    "value": "emb_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(emb_1, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, out_dim, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "variable": {
                    "value": "emb_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "emb_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(emb_2, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(emb_2, axis=1), [1, out_dim, 1, 1])",
                            "Call"
                        ],
                        [
                            "emb_2",
                            "Method Argument"
                        ],
                        [
                            "emb_2",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_114": {
                "variable": {
                    "value": "emb_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(emb_2, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, out_dim, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_126": {
                "variable": {
                    "value": "ob_node",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ob['node']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_140": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "linear1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_150": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squeeze(emb_node * emb_node_gate, axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.squeeze(emb_node, axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(emb_node, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(emb_graph, [1, tf.shape(emb_node)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(emb_node, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(emb_graph, [1, tf.shape(emb_node)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "linear2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(emb_graph, 1, activation=None, name='linear2')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_181": {
                "variable": {
                    "value": "ob_node",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ob['node']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_200": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_204": {
                "input_tensor": {
                    "value": "ob['node']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sequence_mask_206": {
                "variable": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "ob_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squeeze(tf.cast(tf.cast(tf.reduce_sum(ob['node'], axis=-1), dtype=tf.bool), dtype=tf.float32), axis=-2), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(ob['node'])[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_207": {
                "variable": {
                    "value": "logits_first_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "ob_len_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob_len - atom_type_num",
                            "BinOp"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(ob['node'])[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "variable": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_220": {
                "variable": {
                    "value": "emb_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "linear_stop1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "variable": {
                    "value": "self.logits_stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "emb_stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear_stop1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_stop, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_224": {
                "variable": {
                    "value": "self.logits_stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.logits_stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "linear_stop2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_229": {
                "variable": {
                    "value": "stop_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, args.stop_shift]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_235": {
                "variable": {
                    "value": "self.logits_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "linear_select1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_236": {
                "variable": {
                    "value": "self.logits_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.dense(self.logits_first, 1, activation=None, name='linear_select2')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_238": {
                "variable": {
                    "value": "self.logits_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "logits_first_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(ob_len_first, maxlen=tf.shape(ob['node'])[2])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.logits_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "logits_first_null",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.shape(self.logits_first)) * -1000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_242": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ac_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd_first.sample()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(emb_node)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "boolean_mask_243": {
                "variable": {
                    "value": "emb_first",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ac_first, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=True, off_value=False)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(ac_second, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=True, off_value=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_244": {
                "variable": {
                    "value": "emb_first",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(emb_node, mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(emb_first, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_247": {
                "variable": {
                    "value": "mask_real",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ac_first_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ac_real[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(emb_node)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "boolean_mask_248": {
                "variable": {
                    "value": "emb_first_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ac_first_real, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=True, off_value=False)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(ac_second_real, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=True, off_value=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_249": {
                "variable": {
                    "value": "emb_first_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_first_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(emb_node, mask_real)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(emb_first_real, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_256": {
                "variable": {
                    "value": "emb_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(emb_first, [1, tf.shape(emb_node)[1], 1]), emb_node]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_257": {
                "variable": {
                    "value": "self.logits_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.tile(emb_first, [1, tf.shape(emb_node)[1], 1]), emb_node], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(emb_first_real, [1, tf.shape(emb_node)[1], 1]), emb_node], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_first, emb_second], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_first_real, emb_second_real], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_second1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_258": {
                "variable": {
                    "value": "self.logits_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.logits_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_second2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_262": {
                "variable": {
                    "value": "self.logits_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_263": {
                "variable": {
                    "value": "ac_first_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ac_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd_first.sample()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(emb_node)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logical_and_264": {
                "variable": {
                    "value": "logits_second_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(ob_len, maxlen=tf.shape(ob['node'])[2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ac_first_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ac_first, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=False, off_value=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_266": {
                "variable": {
                    "value": "self.logits_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "logits_second_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(logits_mask, ac_first_mask)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.logits_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "logits_second_null",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.shape(self.logits_second)) * -1000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_270": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ac_second",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd_second.sample()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(emb_node)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "boolean_mask_271": {
                "variable": {
                    "value": "emb_second",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ac_first, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=True, off_value=False)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(ac_second, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=True, off_value=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_272": {
                "variable": {
                    "value": "emb_second",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_second",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(emb_node, mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(emb_second, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_276": {
                "variable": {
                    "value": "emb_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(emb_first_real, [1, tf.shape(emb_node)[1], 1]), emb_node]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_277": {
                "variable": {
                    "value": "self.logits_second_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.tile(emb_first, [1, tf.shape(emb_node)[1], 1]), emb_node], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(emb_first_real, [1, tf.shape(emb_node)[1], 1]), emb_node], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_first, emb_second], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_first_real, emb_second_real], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_second1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_278": {
                "variable": {
                    "value": "self.logits_second_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.logits_second_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_second2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_282": {
                "variable": {
                    "value": "self.logits_second_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_second_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_283": {
                "variable": {
                    "value": "ac_first_mask_real",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ac_first_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ac_real[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(emb_node)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logical_and_284": {
                "variable": {
                    "value": "logits_second_mask_real",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(ob_len, maxlen=tf.shape(ob['node'])[2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ac_first_mask_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ac_first_real, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=False, off_value=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_285": {
                "variable": {
                    "value": "self.logits_second_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "logits_second_mask_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(logits_mask, ac_first_mask_real)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.logits_second_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "logits_second_null",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.shape(self.logits_second)) * -1000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_288": {
                "variable": {
                    "value": "mask_real",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ac_second_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ac_real[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(emb_node)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "boolean_mask_289": {
                "variable": {
                    "value": "emb_second_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ac_first_real, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=True, off_value=False)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(ac_second_real, depth=tf.shape(emb_node)[1], dtype=tf.bool, on_value=True, off_value=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_290": {
                "variable": {
                    "value": "emb_second_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_second_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(emb_node, mask_real)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(emb_second_real, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "emb_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[emb_first, emb_second]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_296": {
                "variable": {
                    "value": "self.logits_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.tile(emb_first, [1, tf.shape(emb_node)[1], 1]), emb_node], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(emb_first_real, [1, tf.shape(emb_node)[1], 1]), emb_node], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_first, emb_second], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_first_real, emb_second_real], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_edge1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_297": {
                "variable": {
                    "value": "self.logits_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.logits_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "ob['adj'].get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_edge2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_298": {
                "variable": {
                    "value": "self.logits_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_306": {
                "variable": {
                    "value": "emb_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[emb_first_real, emb_second_real]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_307": {
                "variable": {
                    "value": "self.logits_edge_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.tile(emb_first, [1, tf.shape(emb_node)[1], 1]), emb_node], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(emb_first_real, [1, tf.shape(emb_node)[1], 1]), emb_node], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_first, emb_second], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_first_real, emb_second_real], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_edge1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_308": {
                "variable": {
                    "value": "self.logits_edge_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.logits_edge_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "ob['adj'].get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_edge2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_310": {
                "variable": {
                    "value": "self.logits_edge_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_edge_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_318": {
                "variable": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "value1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_321": {
                "variable": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_322": {
                "variable": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "value2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_327": {
                "variable": {
                    "value": "self.ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.expand_dims(ac_first, axis=1), tf.expand_dims(ac_second, axis=1), tf.expand_dims(ac_edge, axis=1), tf.expand_dims(ac_stop, axis=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_331": {
                "variable": {
                    "value": "debug[ob_node]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ob['node']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_332": {
                "variable": {
                    "value": "debug[ob_adj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ob['adj']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_342": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_366": {
                "variable": {
                    "value": "emb_node1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_387": {
                "variable": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squeeze(emb_node * emb_node_gate, axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.squeeze(emb_node, axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(emb_node, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(emb_graph, [1, tf.shape(emb_node)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(emb_node, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(emb_graph, [1, tf.shape(emb_node)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(emb_node)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[emb_node, emb_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj @ tf.tile(node_feature, [edge_dim, 1, 1]) @ W + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "adj @ tf.tile(node_feature, [1, edge_dim, 1, 1]) @ tf.tile(W, [batch_size, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim), axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_30": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj @ tf.tile(node_feature, [edge_dim, 1, 1]) @ W + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "adj @ tf.tile(node_feature, [1, edge_dim, 1, 1]) @ tf.tile(W, [batch_size, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_44": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(5, 3, 4, 4), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj @ tf.tile(node_feature, [edge_dim, 1, 1]) @ W + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "adj @ tf.tile(node_feature, [1, edge_dim, 1, 1]) @ tf.tile(W, [batch_size, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim), axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_55": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj @ tf.tile(node_feature, [edge_dim, 1, 1]) @ W + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "adj @ tf.tile(node_feature, [1, edge_dim, 1, 1]) @ tf.tile(W, [batch_size, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l2_normalize_63": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj @ tf.tile(node_feature, [edge_dim, 1, 1]) @ W + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "adj @ tf.tile(node_feature, [1, edge_dim, 1, 1]) @ tf.tile(W, [batch_size, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_102": {
                "input": {
                    "value": "emb_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(emb_1, axis=1), [1, out_dim, 1, 1])",
                            "Call"
                        ],
                        [
                            "emb_1",
                            "Method Argument"
                        ],
                        [
                            "emb_1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_109": {
                "input": {
                    "value": "emb_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(emb_1, axis=1), [1, out_dim, 1, 1])",
                            "Call"
                        ],
                        [
                            "emb_1",
                            "Method Argument"
                        ],
                        [
                            "emb_1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "ob_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(ob_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(ob_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "ob_node",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_121": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('emb', [1, 1, in_channels, out_channels])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_128": {
                "variable": {
                    "value": "ob_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ob_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(ob_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(ob_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "ob_node",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "batch_normalization_135": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "batch_normalization_138": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "batch_normalization_142": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_146": {
                "variable": {
                    "value": "emb_node_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "variable": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squeeze(emb_node * emb_node_gate, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "variable": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squeeze(emb_node, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_183": {
                "variable": {
                    "value": "ob_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ob_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(ob_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ob['node'], 8, activation=None, use_bias=False, name='emb')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(ob_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "ob_node",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "batch_normalization_189": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "emb_node_null",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(emb_node)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_211": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "emb_node_null",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(emb_node))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_216": {
                "variable": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squeeze(emb_node * emb_node_gate, axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.squeeze(emb_node, axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(emb_node, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(emb_graph, [1, tf.shape(emb_node)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(emb_node, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(emb_graph, [1, tf.shape(emb_node)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(emb_node)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_217": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[emb_node, emb_graph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_222": {
                "variable": {
                    "value": "emb_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear_stop1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_stop, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "batch_normalization_320": {
                "variable": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_collection_350": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_352": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_51": {
                "input": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(5, 1, 4, 3), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "node_feature",
                            "Method Argument"
                        ],
                        [
                            "node_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, edge_dim, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj @ tf.tile(node_feature, [edge_dim, 1, 1]) @ W + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "adj @ tf.tile(node_feature, [1, edge_dim, 1, 1]) @ tf.tile(W, [batch_size, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_105": {
                "a": {
                    "value": "emb_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(emb_2, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(emb_2, axis=1), [1, out_dim, 1, 1])",
                            "Call"
                        ],
                        [
                            "emb_2",
                            "Method Argument"
                        ],
                        [
                            "emb_2",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "input": {
                    "value": "emb_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(emb_1, axis=1), [1, out_dim, 1, 1])",
                            "Call"
                        ],
                        [
                            "emb_1",
                            "Method Argument"
                        ],
                        [
                            "emb_1",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "input": {
                    "value": "emb_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(emb_2, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(emb_2, axis=1), [1, out_dim, 1, 1])",
                            "Call"
                        ],
                        [
                            "emb_2",
                            "Method Argument"
                        ],
                        [
                            "emb_2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_132": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'gcn_simple'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "'d_net'",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_198": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_204": {
                "input": {
                    "value": "tf.cast(tf.cast(tf.reduce_sum(ob['node'], axis=-1), dtype=tf.bool), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_236": {
                "inputs": {
                    "value": "self.logits_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "linear_select2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_237": {
                "shape": {
                    "value": "tf.shape(self.logits_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_265": {
                "shape": {
                    "value": "tf.shape(self.logits_second)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_376": {
                "variable": {
                    "value": "emb_node1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(GCN_batch(ob['adj'], emb_node1, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), emb_node1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_105": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', [edge_dim, in_channels, out_channels])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [1, edge_dim, in_channels, out_channels], initializer=tf.glorot_uniform_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [1, node_dim, node_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [1, out_dim, node_dim, node_dim])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_115": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', [edge_dim, in_channels, out_channels])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [1, edge_dim, in_channels, out_channels], initializer=tf.glorot_uniform_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [1, node_dim, node_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [1, out_dim, node_dim, node_dim])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "input": {
                    "value": "emb_node * emb_node_gate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_204": {
                "x": {
                    "value": "tf.reduce_sum(ob['node'], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_210": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_237": {
                "input": {
                    "value": "self.logits_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_256": {
                "input": {
                    "value": "emb_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(emb_node, mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(emb_first, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(emb_node)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_265": {
                "input": {
                    "value": "self.logits_second",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_276": {
                "input": {
                    "value": "emb_first_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(emb_node, mask_real)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(emb_first_real, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(emb_node)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_327": {
                "input": {
                    "value": "ac_stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd_stop.sample()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_24": {
                "input": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(5, 1, 4, 3), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "node_feature",
                            "Method Argument"
                        ],
                        [
                            "node_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[edge_dim, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_206": {
                "input": {
                    "value": "ob['node']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_207": {
                "input": {
                    "value": "ob['node']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_211": {
                "input": {
                    "value": "tf.expand_dims(logits_mask, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, 1, emb_node.get_shape()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_242": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_247": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_263": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_270": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_283": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_288": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_387": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_59": {
                "value": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj @ tf.tile(node_feature, [edge_dim, 1, 1]) @ W + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "adj @ tf.tile(node_feature, [1, edge_dim, 1, 1]) @ tf.tile(W, [batch_size, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(node_embedding, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(node_embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(node_embedding, axis=1, num_or_size_splits=edge_dim), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "edge_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.get_shape()[0]",
                            "Subscript"
                        ],
                        [
                            "adj.get_shape()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_211": {
                "input": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(ob_len, maxlen=tf.shape(ob['node'])[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_216": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_256": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_276": {
                "input": {
                    "value": "emb_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_node",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(emb_node, args.emb_size, activation=tf.nn.relu, use_bias=False, name='linear1')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate), ob_node), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], ob_node, args.emb_size, name='gcn1', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, is_act=False, is_normalize=args.bn == 0, name='gcn2', aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(emb_node, axis=1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate) + self.emb_node1",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition=tf.tile(tf.expand_dims(logits_mask, axis=-1), (1, 1, emb_node.get_shape()[-1])), x=emb_node, y=emb_node_null)",
                            "Call"
                        ],
                        [
                            "tf.concat((GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate), self.emb_node1), axis=-1)",
                            "Call"
                        ],
                        [
                            "GCN_batch(ob['adj'], emb_node, args.emb_size, name='gcn1_' + str(i + 1), aggregate=args.gcn_aggregate)",
                            "Call"
                        ],
                        [
                            "tf.concat([emb_node, emb_graph], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(emb_node, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/ppo1/mlp_policy.py": {
        "tensorflow": {
            "placeholder_48": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_by_value_26": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_56": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_58": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_41": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_30": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_29": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_35": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/ppo1/pposgd_simple.py": {
        "tensorflow": {
            "placeholder_96": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_111": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_113": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(pi.pd.logp(ac) - oldpi.pd.logp(ac))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "tf.minimum(surr1, surr2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_115": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_114": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_124": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/ppo1/pposgd_simple_gcn.py": {
        "tensorflow": {
            "placeholder_367": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_368": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_370": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_388": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ac_real",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_393": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_394": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_401": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_405": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_422": {
                "variable": {
                    "value": "loss_d_step_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=step_logit_real, labels=tf.ones_like(step_logit_real) * 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_423": {
                "variable": {
                    "value": "loss_d_step_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=step_logit_gen, labels=tf.zeros_like(step_logit_gen))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_437": {
                "variable": {
                    "value": "loss_d_final_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=final_logit_real, labels=tf.ones_like(final_logit_real) * 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_438": {
                "variable": {
                    "value": "loss_d_final_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=final_logit_gen, labels=tf.zeros_like(final_logit_gen))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_426": {
                "variable": {
                    "value": "loss_g_step_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=step_logit_gen, labels=tf.zeros_like(step_logit_gen))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_441": {
                "variable": {
                    "value": "loss_g_final_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=final_logit_gen, labels=tf.zeros_like(final_logit_gen))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_403": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(pi.pd.logp(ac) - oldpi.pd.logp(ac))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_404": {
                "input_tensor": {
                    "value": "tf.minimum(surr1, surr2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_405": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_411": {
                "input_tensor": {
                    "value": "pi_logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.logp(ac)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_422": {
                "logits": {
                    "value": "step_logit_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_real, args, name='d_step')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(step_logit_real) * 0.9",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_423": {
                "logits": {
                    "value": "step_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_step')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(step_logit_gen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_428": {
                "variable": {
                    "value": "loss_g_step_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=step_logit_gen, labels=tf.ones_like(step_logit_gen) * 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_437": {
                "logits": {
                    "value": "final_logit_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_real, args, name='d_final')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(final_logit_real) * 0.9",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_438": {
                "logits": {
                    "value": "final_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_final')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(final_logit_gen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_443": {
                "variable": {
                    "value": "loss_g_final_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=final_logit_gen, labels=tf.ones_like(final_logit_gen) * 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_session_532": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_534": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.get_trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_404": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_426": {
                "logits": {
                    "value": "step_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_step')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(step_logit_gen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_441": {
                "logits": {
                    "value": "final_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_final')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(final_logit_gen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_737": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.get_trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_423": {
                "input": {
                    "value": "step_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_step')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_428": {
                "logits": {
                    "value": "step_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_step')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(step_logit_gen) * 0.9",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_438": {
                "input": {
                    "value": "final_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_final')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_443": {
                "logits": {
                    "value": "final_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_final')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(final_logit_gen) * 0.9",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_500": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_422": {
                "input": {
                    "value": "step_logit_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_real, args, name='d_step')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_426": {
                "input": {
                    "value": "step_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_step')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_437": {
                "input": {
                    "value": "final_logit_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_real, args, name='d_final')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_441": {
                "input": {
                    "value": "final_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_final')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_738": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_428": {
                "input": {
                    "value": "step_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_step')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_443": {
                "input": {
                    "value": "final_logit_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_net(ob_gen, args, name='d_final')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/ppo2/policies.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc)",
                            "Tuple"
                        ],
                        [
                            "(nbatch,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "Ob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pi, pi * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_10": {
                "x": {
                    "value": "unscaled_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unscaled_images",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, actdim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/ppo2/ppo2.py": {
        "tensorflow": {
            "get_default_session_14": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "ADV",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "OLDNEGLOGPAC",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "OLDVPRED",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.pd.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_32": {
                "variable": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_33": {
                "variable": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpredclipped - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_35": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "OLDNEGLOGPAC - neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(pg_losses, pg_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "clipfrac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.greater(tf.abs(ratio - 1.0), CLIPRANGE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_44": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg_loss - entropy * ent_coef + vf_loss * vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_48": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_43": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_46": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, max_grad_norm)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "max_grad_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_85": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_session()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_31": {
                "t": {
                    "value": "train_model.vf - OLDVPRED",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-CLIPRANGE",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "tf.maximum(vf_losses1, vf_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_37": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(OLDNEGLOGPAC - neglogpac)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_38": {
                "x": {
                    "value": "pg_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * ratio",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pg_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * tf.clip_by_value(ratio, 1.0 - CLIPRANGE, 1.0 + CLIPRANGE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_39": {
                "input_tensor": {
                    "value": "tf.square(neglogpac - OLDNEGLOGPAC)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_40": {
                "x": {
                    "value": "tf.greater(tf.abs(ratio - 1.0), CLIPRANGE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_34": {
                "x": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpred - R)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpredclipped - R)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_39": {
                "x": {
                    "value": "neglogpac - OLDNEGLOGPAC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_40": {
                "x": {
                    "value": "tf.abs(ratio - 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_40": {
                "x": {
                    "value": "ratio - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/ppo2/run_atari.py": {
        "tensorflow": {
            "ConfigProto_16": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ],
                        [
                            "ncpu // 2",
                            "BinOp"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ],
                        [
                            "ncpu // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_20": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, intra_op_parallelism_threads=ncpu, inter_op_parallelism_threads=ncpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/ppo2/run_mujoco.py": {
        "tensorflow": {
            "ConfigProto_15": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "ncpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Session_18": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, intra_op_parallelism_threads=ncpu, inter_op_parallelism_threads=ncpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-baselines/baselines/trpo_mpi/nosharing_cnn_policy.py": {
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_29": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "self.vpred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_53": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_28": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_36": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obscaled",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 128, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rl-baselines/baselines/trpo_mpi/trpo_mpi.py": {
        "tensorflow": {
            "placeholder_102": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "vferr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_116": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ratio * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_132": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if v.name.split('/')[1].startswith('pol')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_141": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "square_114": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "g * tangent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_144": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "run_molecule.py": {
        "tensorflow": {}
    }
}