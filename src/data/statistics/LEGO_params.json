{
    "LEGOLearner.py": {
        "tensorflow": {
            "constant_305": {
                "variable": {
                    "value": "ref_exp_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ref_exp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_reference_explain_mask(s)",
                            "Call"
                        ],
                        [
                            "np.tile(tmp, (opt.batch_size, int(opt.img_height / 2 ** downscaling), int(opt.img_width / 2 ** downscaling), 1))",
                            "Call"
                        ],
                        [
                            "tf.constant(ref_exp_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_309": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.reshape(ref, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(pred, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_385": {
                "variable": {
                    "value": "weights_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.reduce_mean(tf.abs(image_gradients_x), 3, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_386": {
                "variable": {
                    "value": "weights_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.reduce_mean(tf.abs(image_gradients_y), 3, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_413": {
                "variable": {
                    "value": "weight_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.abs(edge)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_414": {
                "variable": {
                    "value": "weight_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.abs(edge)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_434": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fx[:, None, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, height, width - 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_435": {
                "variable": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fy[:, None, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, height - 1, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_436": {
                "variable": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cx[:, None, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, height, width - 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_437": {
                "variable": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cy[:, None, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, height - 1, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_441": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "np.arange(width)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "np.arange(height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_442": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(x[None, :, :, None], [batch, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_443": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(y[None, :, :, None], [batch, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_452": {
                "variable": {
                    "value": "weight_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.abs(edge)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_453": {
                "variable": {
                    "value": "weight_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.abs(edge)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_532": {
                "variable": {
                    "value": "self.load_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "load_saver_vars + [self.global_step]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_533": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.model_variables()] + [self.global_step]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Supervisor_536": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "opt.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "saver": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "GPUOptions_539": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "opt.gpu_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_687": {
                "variable": {
                    "value": "input_uint8",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.img_height, self.img_width, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "raw_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_689": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_706": {
                "variable": {
                    "value": "self.pred_depth2_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_depths2_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_depths2",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_712": {
                "variable": {
                    "value": "input_uint8",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.img_height, self.img_width, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "raw_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_image_dtype_728": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(image + 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_766": {
                "variable": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ],
                        [
                            "self.preprocess_image(image_seq)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, tgt_start_idx, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, opt.img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_770": {
                "variable": {
                    "value": "src_image_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ],
                        [
                            "self.preprocess_image(image_seq)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, int(opt.img_width * (opt.num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_774": {
                "variable": {
                    "value": "src_image_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_contents)",
                            "Call"
                        ],
                        [
                            "self.preprocess_image(image_seq)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, int(tgt_start_idx + opt.img_width), 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, int(opt.img_width * (opt.num_source // 2)), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_777": {
                "variable": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[src_image_1, src_image_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_779": {
                "variable": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(src_image_seq, [0, i * opt.img_width, 0], [-1, opt.img_width, -1]) for i in range(opt.num_source)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_801": {
                "variable": {
                    "value": "proj_cam2pix",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "proj_cam2pix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(proj_cam2pix)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_44": {
                "t": {
                    "value": "(1 - SSIM) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "string_input_producer_54": {
                "variable": {
                    "value": "image_paths_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "file_list['image_file_list']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 31 - 1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "string_input_producer_58": {
                "variable": {
                    "value": "cam_paths_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "file_list['cam_file_list']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 31 - 1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "WholeFileReader_64": {
                "variable": {
                    "value": "img_reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_jpeg_66": {
                "variable": {
                    "value": "image_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_contents",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TextLineReader_72": {
                "variable": {
                    "value": "cam_reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_csv_77": {
                "variable": {
                    "value": "raw_cam_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "records": {
                    "value": "raw_cam_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "record_defaults": {
                    "value": "rec_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_79": {
                "variable": {
                    "value": "raw_cam_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "raw_cam_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_csv(raw_cam_contents, record_defaults=rec_def)",
                            "Call"
                        ],
                        [
                            "tf.stack(raw_cam_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "raw_cam_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "raw_cam_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_csv(raw_cam_contents, record_defaults=rec_def)",
                            "Call"
                        ],
                        [
                            "tf.stack(raw_cam_vec)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_86": {
                "variable": {
                    "value": "(src_image_stack, tgt_image, proj_cam2pix, proj_pix2cam)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_image_stack, tgt_image, proj_cam2pix, proj_pix2cam]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_265": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "opt.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_269": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_272": {
                "variable": {
                    "value": "self.incr_global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_312": {
                "input_tensor": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=tf.reshape(ref, [-1, 2]), logits=tf.reshape(pred, [-1, 2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_483": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_484": {
                "name": {
                    "value": "pixel_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pixel_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_485": {
                "name": {
                    "value": "smooth_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.smooth_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_486": {
                "name": {
                    "value": "exp_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.exp_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_489": {
                "name": {
                    "value": "pred_normal",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "(self.pred_normals[0] + 1.0) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_490": {
                "name": {
                    "value": "pred_disp2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_disps2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_494": {
                "name": {
                    "value": "'scale%d_depth' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_depth[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "image_495": {
                "name": {
                    "value": "'scale%d_depth_image' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_depth[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "image_496": {
                "name": {
                    "value": "'scale%d_disparity_image' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / self.pred_depth[s]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_497": {
                "name": {
                    "value": "'scale%d_target_image' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.deprocess_image(self.tgt_image_all[s])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_499": {
                "name": {
                    "value": "'scale%d_edge_map' % s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pred_edges[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_529": {
                "variable": {
                    "value": "parameter_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_prod(tf.shape(v)) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_image_dtype_734": {
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(image + 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_797": {
                "variable": {
                    "value": "r1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fx, 0, cx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_798": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[0, fy, cy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_799": {
                "variable": {
                    "value": "r3",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_48": {
                "name": {
                    "value": "data_loading",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_94": {
                "name": {
                    "value": "depth_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_99": {
                "name": {
                    "value": "pose_and_explainability_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "compute_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_129": {
                "variable": {
                    "value": "curr_tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image_seq, [0, tgt_start_idx, 0], [-1, opt.img_width, -1])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(opt.img_height / 2 ** s), int(opt.img_width / 2 ** s)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_131": {
                "variable": {
                    "value": "curr_src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.slice(src_image_seq, [0, i * opt.img_width, 0], [-1, opt.img_width, -1]) for i in range(opt.num_source)], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(opt.img_height / 2 ** s), int(opt.img_width / 2 ** s)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(intrinsic_mtx[:, 0, 0], 1), tf.expand_dims(intrinsic_mtx[:, 1, 1], 1), tf.expand_dims(intrinsic_mtx[:, 0, 2], 1), tf.expand_dims(intrinsic_mtx[:, 1, 2], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "pred_depth_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_depth[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_142": {
                "variable": {
                    "value": "pred_depth2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_depth2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal2depth_layer_batch(pred_depth_tensor, tf.squeeze(pred_normal), intrinsics, curr_tgt_image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pred_depth2, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_263": {
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_325": {
                "input_tensor": {
                    "value": "tf.abs(dy2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_366": {
                "input_tensor": {
                    "value": "tf.abs(diff_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_367": {
                "input_tensor": {
                    "value": "tf.abs(diff_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_395": {
                "input_tensor": {
                    "value": "tf.abs(smoothness_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_396": {
                "input_tensor": {
                    "value": "tf.abs(smoothness_dx2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_397": {
                "input_tensor": {
                    "value": "tf.abs(smoothness_dy2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_442": {
                "input": {
                    "value": "x[None, :, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_443": {
                "input": {
                    "value": "y[None, :, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_455": {
                "input_tensor": {
                    "value": "tf.clip_by_value(dx2 * weight_x[:, :, 1:-1, :], 0.0, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_456": {
                "input_tensor": {
                    "value": "tf.clip_by_value(dy2 * weight_y[:, 1:-1, :, :], 0.0, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_476": {
                "input_tensor": {
                    "value": "tf.abs(dx2 * weight_x[:, :, 1:-1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_477": {
                "input_tensor": {
                    "value": "tf.abs(dy2 * weight_y[:, 1:-1, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_488": {
                "name": {
                    "value": "edge_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.edge_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_507": {
                "name": {
                    "value": "'scale%d_projected_image_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.deprocess_image(self.proj_image_stack_all[s][:, :, :, i * 3:(i + 1) * 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_509": {
                "name": {
                    "value": "'scale%d_proj_error_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(self.proj_error_stack_all[s][:, :, :, i], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_511": {
                "name": {
                    "value": "'scale%d_flyout_mask_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.flyout_map_all[s][:, :, :, i * 3:(i + 1) * 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_523": {
                "name_or_scope": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_525": {
                "name_or_scope": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_528": {
                "name": {
                    "value": "parameter_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_692": {
                "name": {
                    "value": "depth_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_716": {
                "name_or_scope": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_210": {
                "variable": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "curr_proj_image - curr_tgt_image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "tensor": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_324": {
                "input_tensor": {
                    "value": "tf.abs(dydx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_325": {
                "x": {
                    "value": "dy2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_341": {
                "input_tensor": {
                    "value": "tf.abs(dy2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_366": {
                "x": {
                    "value": "diff_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disp_gradients_x - image_gradients_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_367": {
                "x": {
                    "value": "diff_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disp_gradients_y - image_gradients_y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_385": {
                "input_tensor": {
                    "value": "tf.abs(image_gradients_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_386": {
                "input_tensor": {
                    "value": "tf.abs(image_gradients_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_395": {
                "x": {
                    "value": "smoothness_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disp_gradients_y * weights_y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_396": {
                "x": {
                    "value": "smoothness_dx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx2 * weights_x[:, :, 1:, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_397": {
                "x": {
                    "value": "smoothness_dy2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dy2 * weights_y[:, 1:, :, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_413": {
                "x": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_414": {
                "x": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_417": {
                "input_tensor": {
                    "value": "tf.clip_by_value(dx2 * weight_x[:, :, 1:-1, :], 0.0, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_418": {
                "input_tensor": {
                    "value": "tf.clip_by_value(dy2 * weight_y[:, 1:-1, :, :], 0.0, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_421": {
                "input_tensor": {
                    "value": "tf.abs(disp_grad_x * weight_x[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_422": {
                "input_tensor": {
                    "value": "tf.abs(disp_grad_y * weight_y[:, 1:, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_452": {
                "x": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_453": {
                "x": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_455": {
                "t": {
                    "value": "dx2 * weight_x[:, :, 1:-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_456": {
                "t": {
                    "value": "dy2 * weight_y[:, 1:-1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_476": {
                "x": {
                    "value": "dx2 * weight_x[:, :, 1:-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_477": {
                "x": {
                    "value": "dy2 * weight_y[:, 1:-1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_503": {
                "name": {
                    "value": "'scale%d_exp_mask_%d' % (s, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(self.exp_mask_stack_all[s][:, :, :, i], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_510": {
                "input": {
                    "value": "self.proj_error_stack_all[s][:, :, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "model_variables_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_549": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "opt.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_695": {
                "input": {
                    "value": "pred_depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_696": {
                "input": {
                    "value": "pred_depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_717": {
                "name": {
                    "value": "depth_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_779": {
                "input_": {
                    "value": "src_image_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([src_image_1, src_image_2], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i * opt.img_width, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, opt.img_width, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_800": {
                "values": {
                    "value": "[r1, r2, r3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_141": {
                "input": {
                    "value": "pred_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth2normal_layer_batch(pred_depth_tensor, intrinsics, depth_inverse)",
                            "Call"
                        ],
                        [
                            "depth2normal_layer_batch(tf.squeeze(pred_depth[0], axis=3), intrinsics, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_181": {
                "x": {
                    "value": "opt.normal_smooth_weight / 2 ** s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.compute_smooth_loss_wedge(pred_normal[:, 3:-3, 3:-3, :], pred_edges[s][:, 3:-3, 3:-3], mode='l2', alpha=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_191": {
                "variable": {
                    "value": "curr_exp_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred_exp_logits[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, i * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "curr_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "curr_exp_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred_exp_logits[s], [0, 0, 0, i * 2], [-1, -1, -1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_243": {
                "variable": {
                    "value": "proj_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[proj_image_stack, curr_proj_image]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_245": {
                "variable": {
                    "value": "proj_error_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[proj_error_stack, curr_proj_error]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_322": {
                "input_tensor": {
                    "value": "tf.abs(dx2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_323": {
                "input_tensor": {
                    "value": "tf.abs(dxdy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_324": {
                "x": {
                    "value": "dydx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_340": {
                "input_tensor": {
                    "value": "tf.abs(dydx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_341": {
                "x": {
                    "value": "dy2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_385": {
                "x": {
                    "value": "image_gradients_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_386": {
                "x": {
                    "value": "image_gradients_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_417": {
                "t": {
                    "value": "dx2 * weight_x[:, :, 1:-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_418": {
                "t": {
                    "value": "dy2 * weight_y[:, 1:-1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_421": {
                "x": {
                    "value": "disp_grad_x * weight_x[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_422": {
                "x": {
                    "value": "disp_grad_y * weight_y[:, 1:, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_447": {
                "x": {
                    "value": "((y2 - cy) * disp[:, 1:, :, :] - (y1 - cy) * disp[:, :-1, :, :]) / fy - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_448": {
                "x": {
                    "value": "((x2 - cx) * disp[:, :, 1:, :] - (x1 - cx) * disp[:, :, :-1, :]) / fx - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_505": {
                "input": {
                    "value": "self.exp_mask_stack_all[s][:, :, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_529": {
                "input_tensor": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_541": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=opt.gpu_fraction)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_136": {
                "input": {
                    "value": "intrinsic_mtx[:, 1, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "input_tensor": {
                    "value": "tf.square(tf.squeeze(pred_edges[s]) - ref_edge_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_174": {
                "x": {
                    "value": "opt.smooth_weight / 2 ** s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.compute_smooth_loss_wedge(pred_disp2, pred_edges[s], mode='l2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_177": {
                "x": {
                    "value": "opt.smooth_weight / 2 ** s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.compute_smooth_loss(pred_disp2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_214": {
                "input_tensor": {
                    "value": "curr_proj_error * tf.expand_dims(curr_exp[:, :, :, 1], -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_240": {
                "variable": {
                    "value": "exp_mask_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_exp[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_248": {
                "variable": {
                    "value": "flyout_map",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flyout_map, curr_flyout_map]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "exp_mask_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[exp_mask_stack, tf.expand_dims(curr_exp[:, :, :, 1], -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_322": {
                "x": {
                    "value": "dx2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_323": {
                "x": {
                    "value": "dxdy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_338": {
                "input_tensor": {
                    "value": "tf.abs(dx2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_339": {
                "input_tensor": {
                    "value": "tf.abs(dxdy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_340": {
                "x": {
                    "value": "dydx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_529": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_533": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_598": {
                "name": {
                    "value": "evaluation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_155": {
                "x": {
                    "value": "tf.squeeze(pred_edges[s]) - ref_edge_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "input_tensor": {
                    "value": "curr_proj_error * (1.0 - pred_edges[s])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_220": {
                "input_tensor": {
                    "value": "curr_proj_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(curr_proj_image - curr_tgt_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_223": {
                "input_tensor": {
                    "value": "self.SSIM(curr_proj_image, curr_tgt_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_227": {
                "x": {
                    "value": "curr_tgt_image_grad_x - curr_proj_image_grad_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_228": {
                "x": {
                    "value": "curr_tgt_image_grad_y - curr_proj_image_grad_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_230": {
                "input_tensor": {
                    "value": "curr_proj_error_grad_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_231": {
                "input_tensor": {
                    "value": "curr_proj_error_grad_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_338": {
                "x": {
                    "value": "dx2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_339": {
                "x": {
                    "value": "dxdy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_215": {
                "input": {
                    "value": "curr_exp[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_155": {
                "input": {
                    "value": "pred_edges[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_251": {
                "input": {
                    "value": "curr_exp[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "depth2normal/depth2normal_tf.py": {
        "tensorflow": {
            "greater_8": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_map + mask_clip",
                            "BinOp"
                        ],
                        [
                            "1.0 / depth_map",
                            "BinOp"
                        ],
                        [
                            "1.0 / depth_map",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(depth_map.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "diff_x0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "diff_y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "diff_x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "diff_y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_y1 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_y1 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "diff_x0y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x0y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_x0y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_x0y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "diff_x0y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x0y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "diff_x1y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x1y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_x1y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_x1y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "diff_x1y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x1y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "normal_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat([[normals0], [normals1], [normals2], [normals3]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "normal_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.squeeze(normal_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kitti_shape[0] - 2 * nei] + [kitti_shape[1] - 2 * nei] + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_65": {
                "variable": {
                    "value": "normal_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normal_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.squeeze(normal_vector), [kitti_shape[0] - 2 * nei] + [kitti_shape[1] - 2 * nei] + [3])",
                            "Call"
                        ],
                        [
                            "normal_map * tf.tile(tf.expand_dims(tf.cast(mask[:, nei:-nei, nei:-nei], tf.float32), -1), [1, 1, 1, 3])",
                            "BinOp"
                        ],
                        [
                            "tf.pad(normal_map, [[nei, nei], [nei, nei], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.squeeze(normal_vector), [kitti_shape[0]] + [kitti_shape[1] - 2 * nei] + [kitti_shape[2] - 2 * nei] + [3])",
                            "Call"
                        ],
                        [
                            "tf.pad(normal_map, [[0, 0], [nei, nei], [nei, nei], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[nei, nei], [nei, nei], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "greater_73": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_map + mask_clip",
                            "BinOp"
                        ],
                        [
                            "1.0 / depth_map",
                            "BinOp"
                        ],
                        [
                            "1.0 / depth_map",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(depth_map.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "diff_x0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "diff_y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "diff_x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "diff_y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_y1 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_y1 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "diff_x0y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x0y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_x0y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_x0y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "diff_x0y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x0y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "diff_x1y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x1y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_x1y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_x1y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "diff_x1y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff_x1y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pix_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "variable": {
                    "value": "normal_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat([[normals0], [normals1], [normals2], [normals3]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "normal_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.squeeze(normal_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kitti_shape[0]] + [kitti_shape[1] - 2 * nei] + [kitti_shape[2] - 2 * nei] + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_125": {
                "variable": {
                    "value": "normal_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normal_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.squeeze(normal_vector), [kitti_shape[0] - 2 * nei] + [kitti_shape[1] - 2 * nei] + [3])",
                            "Call"
                        ],
                        [
                            "normal_map * tf.tile(tf.expand_dims(tf.cast(mask[:, nei:-nei, nei:-nei], tf.float32), -1), [1, 1, 1, 3])",
                            "BinOp"
                        ],
                        [
                            "tf.pad(normal_map, [[nei, nei], [nei, nei], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.squeeze(normal_vector), [kitti_shape[0]] + [kitti_shape[1] - 2 * nei] + [kitti_shape[2] - 2 * nei] + [3])",
                            "Call"
                        ],
                        [
                            "tf.pad(normal_map, [[0, 0], [nei, nei], [nei, nei], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [nei, nei], [nei, nei], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "pts_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "pts.get_shape().as_list()[:2] + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_137": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_138": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_141": {
                "variable": {
                    "value": "pts_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[pts_x], [pts_y], [pts_z]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "pts_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pts_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(pts.get_shape().as_list()[:2] + [3])",
                            "Call"
                        ],
                        [
                            "tf.concat([[pts_x], [pts_y], [pts_z]], 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts_3d, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.zeros(pts.get_shape().as_list()[:2] + [3])",
                            "Call"
                        ],
                        [
                            "tf.concat([[pts_x], [pts_y], [pts_z]], 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts_3d, perm=[1, 2, 3, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "pts_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "pts.get_shape().as_list()[:2] + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_157": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_158": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_159": {
                "variable": {
                    "value": "cx_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(cx, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, pts_shape[1], pts_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_160": {
                "variable": {
                    "value": "cy_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(cy, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, pts_shape[1], pts_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_161": {
                "variable": {
                    "value": "fx_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(fx, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, pts_shape[1], pts_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_162": {
                "variable": {
                    "value": "fy_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(fy, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, pts_shape[1], pts_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "pts_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[pts_x], [pts_y], [pts_z]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "pts_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pts_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(pts.get_shape().as_list()[:2] + [3])",
                            "Call"
                        ],
                        [
                            "tf.concat([[pts_x], [pts_y], [pts_z]], 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts_3d, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.zeros(pts.get_shape().as_list()[:2] + [3])",
                            "Call"
                        ],
                        [
                            "tf.concat([[pts_x], [pts_y], [pts_z]], 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pts_3d, perm=[1, 2, 3, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 3, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_64": {
                "input": {
                    "value": "tf.expand_dims(tf.cast(mask[nei:-nei, nei:-nei], tf.float32), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_124": {
                "input": {
                    "value": "tf.expand_dims(tf.cast(mask[:, nei:-nei, nei:-nei], tf.float32), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_171": {
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_8": {
                "shape": {
                    "value": "depth_map.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_54": {
                "a": {
                    "value": "diff_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diff_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_y1 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_y1 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_55": {
                "a": {
                    "value": "diff_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diff_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_56": {
                "a": {
                    "value": "diff_x0y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diff_x0y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_x0y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_x0y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_57": {
                "a": {
                    "value": "diff_x1y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_x1y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_x1y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diff_x1y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_59": {
                "values": {
                    "value": "[[normals0], [normals1], [normals2], [normals3]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "input": {
                    "value": "normal_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.concat([[normals0], [normals1], [normals2], [normals3]], 0), 0)",
                            "Call"
                        ],
                        [
                            "normalize_l2(normal_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.concat([[normals0], [normals1], [normals2], [normals3]], 0), 0)",
                            "Call"
                        ],
                        [
                            "normalize_l2(normals0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "tf.cast(mask[nei:-nei, nei:-nei], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "shape": {
                    "value": "depth_map.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_115": {
                "a": {
                    "value": "diff_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diff_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_y1 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_y1 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_116": {
                "a": {
                    "value": "diff_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diff_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_117": {
                "a": {
                    "value": "diff_x0y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x0y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diff_x0y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_x0y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_x0y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x0y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_118": {
                "a": {
                    "value": "diff_x1y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_x1y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y0, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_x1y0 - pts_3d_map_ctr",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y0, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "diff_x1y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y1, [pix_num, 3])",
                            "Call"
                        ],
                        [
                            "pts_3d_map_ctr - pts_3d_map_x1y1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff_x1y1, [pix_num, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_120": {
                "values": {
                    "value": "[[normals0], [normals1], [normals2], [normals3]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "input": {
                    "value": "normal_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.concat([[normals0], [normals1], [normals2], [normals3]], 0), 0)",
                            "Call"
                        ],
                        [
                            "normalize_l2(normal_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.concat([[normals0], [normals1], [normals2], [normals3]], 0), 0)",
                            "Call"
                        ],
                        [
                            "normalize_l2(normals0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_124": {
                "input": {
                    "value": "tf.cast(mask[:, nei:-nei, nei:-nei], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_159": {
                "input": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_160": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_161": {
                "input": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_162": {
                "input": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "mask[nei:-nei, nei:-nei]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_124": {
                "x": {
                    "value": "mask[:, nei:-nei, nei:-nei]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_11": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(depth_map, tf.zeros(depth_map.get_shape().as_list()))",
                            "Call"
                        ],
                        [
                            "tf.greater(depth_map, tf.zeros(depth_map.get_shape().as_list()))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_76": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(depth_map, tf.zeros(depth_map.get_shape().as_list()))",
                            "Call"
                        ],
                        [
                            "tf.greater(depth_map, tf.zeros(depth_map.get_shape().as_list()))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_139": {
                "shape": {
                    "value": "pts.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_140": {
                "shape": {
                    "value": "pts.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_163": {
                "input": {
                    "value": "tf.expand_dims(tf.meshgrid(x, y)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[pts_shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_164": {
                "input": {
                    "value": "tf.expand_dims(tf.meshgrid(x, y)[1], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[pts_shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_139": {
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_140": {
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_163": {
                "input": {
                    "value": "tf.meshgrid(x, y)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_164": {
                "input": {
                    "value": "tf.meshgrid(x, y)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_163": {
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_164": {
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, pts.get_shape().as_list()[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, pts.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "depth2normal/normal2depth_tf.py": {
        "tensorflow": {
            "range_17": {
                "variable": {
                    "value": "x_coor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_18": {
                "variable": {
                    "value": "y_coor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_19": {
                "variable": {
                    "value": "(x_ctr, y_ctr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_coor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(nei, depth_dims[1] + nei)",
                            "Call"
                        ],
                        [
                            "tf.range(nei, depth_dims[2] + nei)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_coor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(nei, depth_dims[0] + nei)",
                            "Call"
                        ],
                        [
                            "tf.range(nei, depth_dims[1] + nei)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_20": {
                "variable": {
                    "value": "x_ctr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_ctr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_ctr, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_ctr, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_21": {
                "variable": {
                    "value": "y_ctr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_ctr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_ctr, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_ctr, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_84": {
                "variable": {
                    "value": "x_coor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_85": {
                "variable": {
                    "value": "y_coor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_86": {
                "variable": {
                    "value": "(x_ctr, y_ctr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_coor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(nei, depth_dims[1] + nei)",
                            "Call"
                        ],
                        [
                            "tf.range(nei, depth_dims[2] + nei)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_coor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(nei, depth_dims[0] + nei)",
                            "Call"
                        ],
                        [
                            "tf.range(nei, depth_dims[1] + nei)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_87": {
                "variable": {
                    "value": "x_ctr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_ctr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_ctr, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_ctr, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "y_ctr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_ctr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_ctr, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_ctr, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_89": {
                "variable": {
                    "value": "x_ctr_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x_ctr, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[depth_dims[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_90": {
                "variable": {
                    "value": "y_ctr_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(y_ctr, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[depth_dims[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_100": {
                "variable": {
                    "value": "cx_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(cx, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, depth_dims[1], depth_dims[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "cy_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(cy, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, depth_dims[1], depth_dims[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_102": {
                "variable": {
                    "value": "fx_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(fx, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, depth_dims[1], depth_dims[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_103": {
                "variable": {
                    "value": "fy_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(fy, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, depth_dims[1], depth_dims[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_152": {
                "variable": {
                    "value": "img_grad_x0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tgt_image[:, :, nei:, :] - tgt_image[:, :, :-1 * nei, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, nei], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_153": {
                "variable": {
                    "value": "img_grad_y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tgt_image[:, nei:, :, :] - tgt_image[:, :-1 * nei, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, nei], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_154": {
                "variable": {
                    "value": "img_grad_x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tgt_image[:, :, 2 * nei:, :] - tgt_image[:, :, nei:-1 * nei, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [2 * nei, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_155": {
                "variable": {
                    "value": "img_grad_y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tgt_image[:, 2 * nei:, :, :] - tgt_image[:, nei:-1 * nei, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [2 * nei, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_158": {
                "variable": {
                    "value": "weights_x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.reduce_mean(tf.abs(img_grad_x0), 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_159": {
                "variable": {
                    "value": "weights_y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.reduce_mean(tf.abs(img_grad_y0), 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_160": {
                "variable": {
                    "value": "weights_x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.reduce_mean(tf.abs(img_grad_x1), 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_161": {
                "variable": {
                    "value": "weights_y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1 * alpha * tf.reduce_mean(tf.abs(img_grad_y1), 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_165": {
                "variable": {
                    "value": "depth_map_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([depth_map_x0, depth_map_y0, depth_map_x1, depth_map_y1]) * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_170": {
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_30": {
                "shape": {
                    "value": "depth_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_map.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "depth_map.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_31": {
                "shape": {
                    "value": "depth_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_map.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "depth_map.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_32": {
                "shape": {
                    "value": "depth_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_map.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "depth_map.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_33": {
                "shape": {
                    "value": "depth_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_map.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "depth_map.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_65": {
                "tensor": {
                    "value": "depth_map_x0 - 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[nei, nei], [0, 2 * nei]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [d2n_nei + nei, d2n_nei + nei], [d2n_nei, d2n_nei + 2 * nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_66": {
                "tensor": {
                    "value": "depth_map_y0 - 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 2 * nei], [nei, nei]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [d2n_nei, d2n_nei + 2 * nei], [d2n_nei + nei, d2n_nei + nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_67": {
                "tensor": {
                    "value": "depth_map_x1 - 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[nei, nei], [2 * nei, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [d2n_nei + nei, d2n_nei + nei], [d2n_nei + 2 * nei, d2n_nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_68": {
                "tensor": {
                    "value": "depth_map_y1 - 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[2 * nei, 0], [nei, nei]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [d2n_nei + 2 * nei, d2n_nei], [d2n_nei + nei, d2n_nei + nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_69": {
                "tensor": {
                    "value": "depth_map_x0y0 - 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_x0y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 2 * nei], [0, 2 * nei]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 2 * nei], [0, 2 * nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_70": {
                "tensor": {
                    "value": "depth_map_x0y1 - 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_x0y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[2 * nei, 0], [0, 2 * nei]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [2 * nei, 0], [0, 2 * nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_71": {
                "tensor": {
                    "value": "depth_map_x1y0 - 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_x1y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 2 * nei], [2 * nei, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 2 * nei], [2 * nei, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_72": {
                "tensor": {
                    "value": "depth_map_x1y1 - 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_x1y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[2 * nei, 0], [2 * nei, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [2 * nei, 0], [2 * nei, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_89": {
                "input": {
                    "value": "x_ctr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_ctr, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_ctr, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_90": {
                "input": {
                    "value": "y_ctr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_ctr, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_ctr, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(depth_dims) * intrinsic[2]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_101": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(depth_dims) * intrinsic[3]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "input": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(depth_dims) * intrinsic[0]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_103": {
                "input": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(depth_dims) * intrinsic[1]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_115": {
                "x": {
                    "value": "tf.equal(denominator_x0, tf.zeros(denominator_x0.get_shape().as_list()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_117": {
                "x": {
                    "value": "tf.equal(denominator_y0, tf.zeros(denominator_y0.get_shape().as_list()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_119": {
                "x": {
                    "value": "tf.equal(denominator_x1, tf.zeros(denominator_x1.get_shape().as_list()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "tf.equal(denominator_y1, tf.zeros(denominator_y1.get_shape().as_list()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_123": {
                "x": {
                    "value": "tf.equal(denominator_x0y0, tf.zeros(denominator_x0y0.get_shape().as_list()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_125": {
                "x": {
                    "value": "tf.equal(denominator_x0y1, tf.zeros(denominator_x0y1.get_shape().as_list()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_127": {
                "x": {
                    "value": "tf.equal(denominator_x1y0, tf.zeros(denominator_x1y0.get_shape().as_list()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_129": {
                "x": {
                    "value": "tf.equal(denominator_x1y1, tf.zeros(denominator_x1y1.get_shape().as_list()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_147": {
                "tensor": {
                    "value": "depth_map_x0 - 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[nei, nei], [0, 2 * nei]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [d2n_nei + nei, d2n_nei + nei], [d2n_nei, d2n_nei + 2 * nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_148": {
                "tensor": {
                    "value": "depth_map_y0 - 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 2 * nei], [nei, nei]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [d2n_nei, d2n_nei + 2 * nei], [d2n_nei + nei, d2n_nei + nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_149": {
                "tensor": {
                    "value": "depth_map_x1 - 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[nei, nei], [2 * nei, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [d2n_nei + nei, d2n_nei + nei], [d2n_nei + 2 * nei, d2n_nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_150": {
                "tensor": {
                    "value": "depth_map_y1 - 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[2 * nei, 0], [nei, nei]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [d2n_nei + 2 * nei, d2n_nei], [d2n_nei + nei, d2n_nei + nei]]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_162": {
                "values": {
                    "value": "[weights_x0, weights_y0, weights_x1, weights_y1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "tf.stack([weights_x0, weights_y0, weights_x1, weights_y1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_115": {
                "x": {
                    "value": "denominator_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x0 - cx) / fx * normal_x + (y_ctr - cy) / fy * normal_y + normal_z + 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x0 - cx_tile) / fx_tile * normal_x + (y_ctr_tile - cy_tile) / fy_tile * normal_y + normal_z",
                            "BinOp"
                        ],
                        [
                            "denominator_x0 + mask_x0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(denominator_x0.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_117": {
                "x": {
                    "value": "denominator_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_ctr - cx) / fx * normal_x + (y0 - cy) / fy * normal_y + normal_z + 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x_ctr_tile - cx_tile) / fx_tile * normal_x + (y0 - cy_tile) / fy_tile * normal_y + normal_z",
                            "BinOp"
                        ],
                        [
                            "denominator_y0 + mask_y0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(denominator_y0.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_119": {
                "x": {
                    "value": "denominator_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x1 - cx) / fx * normal_x + (y_ctr - cy) / fy * normal_y + normal_z + 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x1 - cx_tile) / fx_tile * normal_x + (y_ctr_tile - cy_tile) / fy_tile * normal_y + normal_z",
                            "BinOp"
                        ],
                        [
                            "denominator_x1 + mask_x1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(denominator_x1.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_121": {
                "x": {
                    "value": "denominator_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_ctr - cx) / fx * normal_x + (y1 - cy) / fy * normal_y + normal_z + 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x_ctr_tile - cx_tile) / fx_tile * normal_x + (y1 - cy_tile) / fy_tile * normal_y + normal_z",
                            "BinOp"
                        ],
                        [
                            "denominator_y1 + mask_y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(denominator_y1.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_123": {
                "x": {
                    "value": "denominator_x0y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x0 - cx) / fx * normal_x + (y0 - cy) / fy * normal_y + normal_z + 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x0 - cx_tile) / fx_tile * normal_x + (y0 - cy_tile) / fy_tile * normal_y + normal_z",
                            "BinOp"
                        ],
                        [
                            "denominator_x0y0 + mask_x0y0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(denominator_x0y0.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_125": {
                "x": {
                    "value": "denominator_x0y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x0 - cx) / fx * normal_x + (y1 - cy) / fy * normal_y + normal_z + 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x0 - cx_tile) / fx_tile * normal_x + (y1 - cy_tile) / fy_tile * normal_y + normal_z",
                            "BinOp"
                        ],
                        [
                            "denominator_x0y1 + mask_x0y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(denominator_x0y1.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_127": {
                "x": {
                    "value": "denominator_x1y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x1 - cx) / fx * normal_x + (y0 - cy) / fy * normal_y + normal_z + 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x1 - cx_tile) / fx_tile * normal_x + (y0 - cy_tile) / fy_tile * normal_y + normal_z",
                            "BinOp"
                        ],
                        [
                            "denominator_x1y0 + mask_x1y0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(denominator_x1y0.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_129": {
                "x": {
                    "value": "denominator_x1y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x1 - cx) / fx * normal_x + (y1 - cy) / fy * normal_y + normal_z + 1e-06",
                            "BinOp"
                        ],
                        [
                            "(x1 - cx_tile) / fx_tile * normal_x + (y1 - cy_tile) / fy_tile * normal_y + normal_z",
                            "BinOp"
                        ],
                        [
                            "denominator_x1y1 + mask_x1y1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros(denominator_x1y1.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "input_tensor": {
                    "value": "tf.abs(img_grad_x0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "input_tensor": {
                    "value": "tf.abs(img_grad_y0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_160": {
                "input_tensor": {
                    "value": "tf.abs(img_grad_x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "input_tensor": {
                    "value": "tf.abs(img_grad_y1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "values": {
                    "value": "[weights_x0, weights_y0, weights_x1, weights_y1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_165": {
                "values": {
                    "value": "[depth_map_x0, depth_map_y0, depth_map_x1, depth_map_y1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "shape": {
                    "value": "denominator_x0.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "shape": {
                    "value": "denominator_y0.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "shape": {
                    "value": "denominator_x1.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "shape": {
                    "value": "denominator_y1.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "shape": {
                    "value": "denominator_x0y0.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "shape": {
                    "value": "denominator_x0y1.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "shape": {
                    "value": "denominator_x1y0.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "shape": {
                    "value": "denominator_x1y1.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_132": {
                "x": {
                    "value": "numerator / denominator_x0 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "x": {
                    "value": "numerator / denominator_y0 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "x": {
                    "value": "numerator / denominator_x1 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "x": {
                    "value": "numerator / denominator_y1 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_158": {
                "x": {
                    "value": "img_grad_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(tgt_image[:, :, nei:, :] - tgt_image[:, :, :-1 * nei, :], [[0, 0], [0, 0], [0, nei], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_159": {
                "x": {
                    "value": "img_grad_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(tgt_image[:, nei:, :, :] - tgt_image[:, :-1 * nei, :, :], [[0, 0], [0, nei], [0, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_160": {
                "x": {
                    "value": "img_grad_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(tgt_image[:, :, 2 * nei:, :] - tgt_image[:, :, nei:-1 * nei, :], [[0, 0], [0, 0], [2 * nei, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_161": {
                "x": {
                    "value": "img_grad_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(tgt_image[:, 2 * nei:, :, :] - tgt_image[:, nei:-1 * nei, :, :], [[0, 0], [2 * nei, 0], [0, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "Saver_35": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GPUOptions_37": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_83": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GPUOptions_84": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.333",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_38": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_85": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_38": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.4)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.333)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_85": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.4)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.333)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nets.py": {
        "tensorflow": {
            "resize_bilinear_22": {
                "variable": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(tgt_image, [128, 416])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tgt_image, [127, 415])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[128, 416]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_23": {
                "variable": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "src_image_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(src_image_stack, [128, 416])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[128, 416]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_24": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tgt_image, src_image_stack]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_85": {
                "variable": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(tgt_image, [128, 416])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tgt_image, [127, 415])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[127, 415]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_17": {
                "images": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tgt_image, src_image_stack], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[rH.value, rW.value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "pose_exp_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "cnv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tgt_image, src_image_stack], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "cnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 16, [7, 7], stride=1, scope='cnv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(tgt_image, 32, [7, 7], stride=1, scope='cnv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "variable": {
                    "value": "cnv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv1, 32, [5, 5], stride=2, scope='cnv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv1b, 64, [5, 5], stride=2, scope='cnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "cnv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv2, 64, [3, 3], stride=2, scope='cnv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv2b, 128, [3, 3], stride=2, scope='cnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "cnv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv3, 128, [3, 3], stride=2, scope='cnv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv3b, 256, [3, 3], stride=2, scope='cnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "depth_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_95": {
                "variable": {
                    "value": "cnv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(tgt_image, [128, 416])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tgt_image, [127, 415])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "cnv1b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 16, [7, 7], stride=1, scope='cnv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(tgt_image, 32, [7, 7], stride=1, scope='cnv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv1b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_97": {
                "variable": {
                    "value": "cnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv1b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv1, 32, [7, 7], stride=1, scope='cnv1b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "cnv2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv1, 32, [5, 5], stride=2, scope='cnv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv1b, 64, [5, 5], stride=2, scope='cnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv2b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_99": {
                "variable": {
                    "value": "cnv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv2b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv2, 64, [5, 5], stride=1, scope='cnv2b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "cnv3b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv2, 64, [3, 3], stride=2, scope='cnv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv2b, 128, [3, 3], stride=2, scope='cnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv3b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "variable": {
                    "value": "cnv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv3b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv3, 128, [3, 3], stride=1, scope='cnv3b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "cnv4b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv3, 128, [3, 3], stride=2, scope='cnv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv3b, 256, [3, 3], stride=2, scope='cnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv4b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_103": {
                "variable": {
                    "value": "cnv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv4b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv4, 256, [3, 3], stride=1, scope='cnv4b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_104": {
                "variable": {
                    "value": "cnv5b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv4, 256, [3, 3], stride=2, scope='cnv5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv4b, 512, [3, 3], stride=2, scope='cnv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_105": {
                "variable": {
                    "value": "cnv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv5b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv5, 512, [3, 3], stride=1, scope='cnv5b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "cnv6b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv5, 256, [3, 3], stride=2, scope='cnv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv5b, 512, [3, 3], stride=2, scope='cnv6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv6b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "variable": {
                    "value": "cnv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv6b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv6, 512, [3, 3], stride=1, scope='cnv6b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "variable": {
                    "value": "cnv7b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv6, 256, [3, 3], stride=2, scope='cnv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv6b, 512, [3, 3], stride=2, scope='cnv7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv7b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_110": {
                "variable": {
                    "value": "upcnv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv7b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv7, 512, [3, 3], stride=1, scope='cnv7b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "i7_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv7, cnv6b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "icnv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i7_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv7, cnv6b], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_116": {
                "variable": {
                    "value": "upcnv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i7_in, 512, [3, 3], stride=1, scope='icnv7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "i6_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv6, cnv5b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "icnv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i6_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv6, cnv5b], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_121": {
                "variable": {
                    "value": "upcnv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i6_in, 512, [3, 3], stride=1, scope='icnv6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_123": {
                "variable": {
                    "value": "i5_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv5, cnv4b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "icnv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i5_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv5, cnv4b], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_126": {
                "variable": {
                    "value": "upcnv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i5_in, 256, [3, 3], stride=1, scope='icnv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "i4_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv4, cnv3b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "icnv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i4_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv4, cnv3b], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_131": {
                "variable": {
                    "value": "disp4",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * slim.conv2d(icnv4, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp4') + MIN_DISP",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_bilinear(disp4, [H // 8, W // 8])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H // 8, W // 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_132": {
                "variable": {
                    "value": "disp4_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * slim.conv2d(icnv4, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp4') + MIN_DISP",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_bilinear(disp4, [H // 8, W // 8])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[np.int(H / 4), np.int(W / 4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_134": {
                "variable": {
                    "value": "upcnv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i4_in, 128, [3, 3], stride=1, scope='icnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "i3_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv3, cnv2b, disp4_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_136": {
                "variable": {
                    "value": "icnv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i3_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv3, cnv2b, disp4_up], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_139": {
                "variable": {
                    "value": "disp3",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * slim.conv2d(icnv3, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp3') + MIN_DISP",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_bilinear(disp3, [H // 4, W // 4])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H // 4, W // 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_141": {
                "variable": {
                    "value": "disp3_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * slim.conv2d(icnv3, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp3') + MIN_DISP",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_bilinear(disp3, [H // 4, W // 4])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[cnv1b_shape[1], cnv1b_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_143": {
                "variable": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i3_in, 64, [3, 3], stride=1, scope='icnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_144": {
                "variable": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv3, 32, [5, 5], stride=2, scope='upcnv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv3, 32, [3, 3], stride=2, scope='upcnv2')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(upcnv2, [cnv1b_shape[1], cnv1b_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[cnv1b_shape[1], cnv1b_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "i2_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv2, cnv1b, disp3_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "icnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv2, cnv1b, disp3_up], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_149": {
                "variable": {
                    "value": "disp2",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * slim.conv2d(icnv2, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp2') + MIN_DISP",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_bilinear(disp2, [H // 2, W // 2])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H // 2, W // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_150": {
                "variable": {
                    "value": "disp2_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * slim.conv2d(icnv2, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp2') + MIN_DISP",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_bilinear(disp2, [H // 2, W // 2])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_152": {
                "variable": {
                    "value": "upcnv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i2_in, 32, [3, 3], stride=1, scope='icnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_153": {
                "variable": {
                    "value": "disp2_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp2_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(disp2, [H, W])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(disp2_up, [upcnv1.get_shape().as_list()[1], upcnv1.get_shape().as_list()[2]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[upcnv1.get_shape().as_list()[1], upcnv1.get_shape().as_list()[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_154": {
                "variable": {
                    "value": "i1_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv1, disp2_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_155": {
                "variable": {
                    "value": "icnv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i1_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv1, disp2_up], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_158": {
                "variable": {
                    "value": "disp1",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "disp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DISP_SCALING * slim.conv2d(icnv1, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='disp1') + MIN_DISP",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_bilinear(disp1, [H, W])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "cnv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv4, 256, [3, 3], stride=2, scope='cnv5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv4b, 512, [3, 3], stride=2, scope='cnv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "cnv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv5, 256, [3, 3], stride=2, scope='cnv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv5b, 512, [3, 3], stride=2, scope='cnv6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "pose_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv6, 256, [3, 3], stride=2, scope='cnv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv6b, 512, [3, 3], stride=2, scope='cnv7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "6 * num_source",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "pose_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pose_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv7, 6 * num_source, [1, 1], scope='pred', stride=1, normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "pose",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_55": {
                "variable": {
                    "value": "upcnv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv4, 256, [3, 3], stride=2, scope='cnv5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(cnv4b, 512, [3, 3], stride=2, scope='cnv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_57": {
                "variable": {
                    "value": "upcnv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(cnv5, 256, [3, 3], stride=2, scope='upcnv5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv6, 256, [3, 3], stride=2, scope='upcnv5')",
                            "Call"
                        ],
                        [
                            "resize_like(upcnv5, cnv4b)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "mask4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv5, 128, [3, 3], stride=2, scope='upcnv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv5, 128, [3, 3], stride=2, scope='upcnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_source * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "mask4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_transpose_61": {
                "variable": {
                    "value": "upcnv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv5, 128, [3, 3], stride=2, scope='upcnv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv5, 128, [3, 3], stride=2, scope='upcnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "mask3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv4, 64, [3, 3], stride=2, scope='upcnv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv4, 64, [3, 3], stride=2, scope='upcnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_source * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "mask3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_transpose_65": {
                "variable": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv4, 64, [3, 3], stride=2, scope='upcnv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv4, 64, [3, 3], stride=2, scope='upcnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv3, 32, [5, 5], stride=2, scope='upcnv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv3, 32, [3, 3], stride=2, scope='upcnv2')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(upcnv2, [cnv1b_shape[1], cnv1b_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_source * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "mask2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_transpose_69": {
                "variable": {
                    "value": "upcnv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv3, 32, [5, 5], stride=2, scope='upcnv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv3, 32, [3, 3], stride=2, scope='upcnv2')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(upcnv2, [cnv1b_shape[1], cnv1b_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upcnv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(upcnv2, 16, [7, 7], stride=2, scope='upcnv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(icnv2, 16, [3, 3], stride=2, scope='upcnv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_source * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "mask1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_transpose_163": {
                "variable": {
                    "value": "upcnv7_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnv7b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(cnv7, 512, [3, 3], stride=1, scope='cnv7b')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "i7_in_e",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv7_e, cnv6b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_167": {
                "variable": {
                    "value": "icnv7_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i7_in_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv7_e, cnv6b], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_169": {
                "variable": {
                    "value": "upcnv6_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv7_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i7_in_e, 512, [3, 3], stride=1, scope='icnv7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_171": {
                "variable": {
                    "value": "i6_in_e",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv6_e, cnv5b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_172": {
                "variable": {
                    "value": "icnv6_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i6_in_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv6_e, cnv5b], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_174": {
                "variable": {
                    "value": "upcnv5_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv6_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i6_in_e, 512, [3, 3], stride=1, scope='icnv6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_176": {
                "variable": {
                    "value": "i5_in_e",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv5_e, cnv4b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_177": {
                "variable": {
                    "value": "icnv5_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i5_in_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv5_e, cnv4b], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_179": {
                "variable": {
                    "value": "upcnv4_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv5_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i5_in_e, 256, [3, 3], stride=1, scope='icnv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_180": {
                "variable": {
                    "value": "i4_in_e",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv4_e, cnv3b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_181": {
                "variable": {
                    "value": "icnv4_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i4_in_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv4_e, cnv3b], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_184": {
                "variable": {
                    "value": "edge4",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "slim.conv2d(icnv4_e, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='edge4') + MIN_EDGE",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge4, [H // 8, W // 8])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H // 8, W // 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_186": {
                "variable": {
                    "value": "edge4_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "slim.conv2d(icnv4_e, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='edge4') + MIN_EDGE",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge4, [H // 8, W // 8])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[np.int(H / 4), np.int(W / 4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_188": {
                "variable": {
                    "value": "upcnv3_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv4_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i4_in_e, 128, [3, 3], stride=1, scope='icnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "i3_in_e",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv3_e, cnv2b, edge4_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_191": {
                "variable": {
                    "value": "icnv3_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i3_in_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv3_e, cnv2b, edge4_up], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_194": {
                "variable": {
                    "value": "edge3",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "slim.conv2d(icnv3_e, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='edge3') + MIN_EDGE",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge3, [H // 4, W // 4])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H // 4, W // 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_196": {
                "variable": {
                    "value": "edge3_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "slim.conv2d(icnv3_e, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='edge3') + MIN_EDGE",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge3, [H // 4, W // 4])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[np.int(H / 2), np.int(W / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_197": {
                "variable": {
                    "value": "edge3_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge3_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(edge3, [np.int(H / 2), np.int(W / 2)])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge3_up, [cnv1b_shape[1], cnv1b_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[cnv1b_shape[1], cnv1b_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_198": {
                "variable": {
                    "value": "upcnv2_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv3_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i3_in_e, 64, [3, 3], stride=1, scope='icnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_199": {
                "variable": {
                    "value": "upcnv2_e",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "upcnv2_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(icnv3_e, 32, [4, 4], stride=2, scope='upcnv2')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(upcnv2_e, [cnv1b_shape[1], cnv1b_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[cnv1b_shape[1], cnv1b_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_200": {
                "variable": {
                    "value": "i2_in_e",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv2_e, cnv1b, edge3_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_202": {
                "variable": {
                    "value": "icnv2_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2_in_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv2_e, cnv1b, edge3_up], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_205": {
                "variable": {
                    "value": "edge2",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "slim.conv2d(icnv2_e, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='edge2') + MIN_EDGE",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge2, [H // 2, W // 2])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H // 2, W // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_207": {
                "variable": {
                    "value": "edge2_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "slim.conv2d(icnv2_e, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='edge2') + MIN_EDGE",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge2, [H // 2, W // 2])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_209": {
                "variable": {
                    "value": "upcnv1_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icnv2_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i2_in_e, 32, [3, 3], stride=1, scope='icnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upcnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_210": {
                "variable": {
                    "value": "edge2_up",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "slim.conv2d(icnv2_e, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='edge2') + MIN_EDGE",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge2, [H // 2, W // 2])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[upcnv1_e.get_shape().as_list()[1], upcnv1_e.get_shape().as_list()[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_211": {
                "variable": {
                    "value": "i1_in_e",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upcnv1_e, edge2_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_213": {
                "variable": {
                    "value": "icnv1_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i1_in_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([upcnv1_e, edge2_up], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "icnv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_216": {
                "variable": {
                    "value": "edge1",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "edge1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "slim.conv2d(icnv1_e, 1, [3, 3], stride=1, activation_fn=tf.sigmoid, normalizer_fn=None, scope='edge1') + MIN_EDGE",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(edge1, [H, W])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "pose_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(pose_pred, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_source, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "exp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_129": {
                "input": {
                    "value": "icnv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i4_in, 128, [3, 3], stride=1, scope='icnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "disp4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "input": {
                    "value": "icnv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i3_in, 64, [3, 3], stride=1, scope='icnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "disp3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_147": {
                "input": {
                    "value": "icnv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i2_in, 32, [3, 3], stride=1, scope='icnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "disp2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_156": {
                "input": {
                    "value": "icnv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i1_in, 16, [3, 3], stride=1, scope='icnv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "disp1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "edge",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_182": {
                "input": {
                    "value": "icnv4_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i4_in_e, 128, [3, 3], stride=1, scope='icnv4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "edge4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_192": {
                "input": {
                    "value": "icnv3_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i3_in_e, 64, [3, 3], stride=1, scope='icnv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "edge3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_203": {
                "input": {
                    "value": "icnv2_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i2_in_e, 32, [3, 3], stride=1, scope='icnv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "edge2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_214": {
                "input": {
                    "value": "icnv1_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(i1_in_e, 16, [3, 3], stride=1, scope='icnv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "edge1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "set_random_seed_43": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8964",
                            "Constant"
                        ]
                    ]
                }
            },
            "run_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "slice_33": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ],
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ],
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_35": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_36": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_37": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "_euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "_euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_40": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_41": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [vec.get_shape().as_list()[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[vec.get_shape().as_list()[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rot_mat, translation]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[transform_mat, filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_61": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_62": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_71": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_73": {
                "variable": {
                    "value": "cosz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_74": {
                "variable": {
                    "value": "sinz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_75": {
                "variable": {
                    "value": "rotz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosz, -sinz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_76": {
                "variable": {
                    "value": "rotz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[sinz, cosz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "rotz_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, zeros, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "zmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotz_1, rotz_2, rotz_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_80": {
                "variable": {
                    "value": "cosy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_81": {
                "variable": {
                    "value": "siny",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_82": {
                "variable": {
                    "value": "roty_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosy, zeros, siny]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "roty_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, ones, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "roty_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-siny, zeros, cosy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roty_1, roty_2, roty_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_87": {
                "variable": {
                    "value": "cosx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_88": {
                "variable": {
                    "value": "sinx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_89": {
                "variable": {
                    "value": "rotx_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ones, zeros, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "rotx_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, cosx, -sinx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "rotx_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, sinx, cosx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_92": {
                "variable": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotx_1, rotx_2, rotx_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "a": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_521": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_523": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (depth + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "depth / normalizer",
                            "BinOp"
                        ],
                        [
                            "depth / (np.percentile(depth, pc) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "np.clip(depth, 0, 1)",
                            "Call"
                        ],
                        [
                            "gray2rgb(depth, cmap=cmap)",
                            "Call"
                        ],
                        [
                            "depth[:keep_H]",
                            "Subscript"
                        ],
                        [
                            "depth",
                            "Name"
                        ],
                        [
                            "tf.reshape(depth, [batch_size, 1, img_height * img_width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(depth, [batch_size, 1, img_height * img_width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, img_height * img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_525": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(grid, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_527": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, img_height * img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_528": {
                "variable": {
                    "value": "cam_coords_hom",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cam_coords, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_535": {
                "variable": {
                    "value": "hom_filler",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_536": {
                "variable": {
                    "value": "hom_filler",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hom_filler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(hom_filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(hom_filler, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_537": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsics, tf.zeros([batch_size, 3, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_538": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsics, hom_filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_539": {
                "variable": {
                    "value": "proj_cam_to_src_pixel",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([intrinsics, tf.zeros([batch_size, 3, 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsics, hom_filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsics, tf.zeros([batch_size, 3, 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsics, hom_filler], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pose_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose",
                            "Name"
                        ],
                        [
                            "_pose_vec2mat(pose)",
                            "Call"
                        ],
                        [
                            "_pose_vec2mat(pose)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_541": {
                "variable": {
                    "value": "src_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "src_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cam2pixel(cam_coords_hom, proj_cam_to_src_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(src_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(src_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "_cam2pixel(cam_coords_hom, proj_cam_to_src_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(src_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(src_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 2, img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_543": {
                "variable": {
                    "value": "src_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "src_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cam2pixel(cam_coords_hom, proj_cam_to_src_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(src_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(src_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "_cam2pixel(cam_coords_hom, proj_cam_to_src_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(src_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(src_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_785": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_787": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (depth + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "depth / normalizer",
                            "BinOp"
                        ],
                        [
                            "depth / (np.percentile(depth, pc) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "np.clip(depth, 0, 1)",
                            "Call"
                        ],
                        [
                            "gray2rgb(depth, cmap=cmap)",
                            "Call"
                        ],
                        [
                            "depth[:keep_H]",
                            "Subscript"
                        ],
                        [
                            "depth",
                            "Name"
                        ],
                        [
                            "tf.reshape(depth, [batch_size, 1, img_height * img_width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(depth, [batch_size, 1, img_height * img_width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, img_height * img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_789": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(grid, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_791": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, img_height * img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_792": {
                "variable": {
                    "value": "cam_coords_hom",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cam_coords, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_797": {
                "variable": {
                    "value": "hom_filler",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_798": {
                "variable": {
                    "value": "hom_filler",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hom_filler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(hom_filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(hom_filler, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_799": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsics, tf.zeros([batch_size, 3, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_800": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsics, hom_filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_801": {
                "variable": {
                    "value": "proj_cam_to_src_pixel",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([intrinsics, tf.zeros([batch_size, 3, 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsics, hom_filler], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsics, tf.zeros([batch_size, 3, 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsics, hom_filler], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pose_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose",
                            "Name"
                        ],
                        [
                            "_pose_vec2mat(pose)",
                            "Call"
                        ],
                        [
                            "_pose_vec2mat(pose)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_803": {
                "variable": {
                    "value": "src_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "src_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cam2pixel(cam_coords_hom, proj_cam_to_src_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(src_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(src_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "_cam2pixel(cam_coords_hom, proj_cam_to_src_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(src_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(src_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 2, img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_805": {
                "variable": {
                    "value": "src_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "src_pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cam2pixel(cam_coords_hom, proj_cam_to_src_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(src_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(src_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "_cam2pixel(cam_coords_hom, proj_cam_to_src_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(src_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(src_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "pcoords",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "proj_c2p",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pixel2cam(depth, grid, intrinsics_inv)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics_inv, pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "_pixel2cam(depth, grid, intrinsics_inv)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics_inv, pixel_coords) * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "slice_126": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ],
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_127": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ],
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_128": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ],
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X_norm, Y_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "(x_t + 1.0) * 0.5 * tf.cast(width, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "(x_t + 1.0) * 0.5 * tf.cast(width, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ],
                        [
                            "(y_t + 1.0) * 0.5 * tf.cast(height, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ],
                        [
                            "(y_t + 1.0) * 0.5 * tf.cast(height, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_147": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_148": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_166": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_167": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_171": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_176": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_178": {
                "variable": {
                    "value": "cosz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_179": {
                "variable": {
                    "value": "sinz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_180": {
                "variable": {
                    "value": "rotz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosz, -sinz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "rotz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[sinz, cosz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "rotz_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, zeros, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_183": {
                "variable": {
                    "value": "zmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotz_1, rotz_2, rotz_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_185": {
                "variable": {
                    "value": "cosy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_186": {
                "variable": {
                    "value": "siny",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_187": {
                "variable": {
                    "value": "roty_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosy, zeros, siny]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_188": {
                "variable": {
                    "value": "roty_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, ones, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "roty_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-siny, zeros, cosy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roty_1, roty_2, roty_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_192": {
                "variable": {
                    "value": "cosx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_193": {
                "variable": {
                    "value": "sinx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_194": {
                "variable": {
                    "value": "rotx_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ones, zeros, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "rotx_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, cosx, -sinx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_196": {
                "variable": {
                    "value": "rotx_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, sinx, cosx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotx_1, rotx_2, rotx_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "a": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_209": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_210": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ],
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ],
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_211": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_212": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_213": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "_euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "_euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_216": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_217": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [vec.get_shape().as_list()[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_218": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rot_mat, translation]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_219": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[transform_mat, filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_496": {
                "variable": {
                    "value": "img_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(img)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_497": {
                "variable": {
                    "value": "img_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(img)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_499": {
                "variable": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_500": {
                "variable": {
                    "value": "py",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_502": {
                "variable": {
                    "value": "flyout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(px < 0) | (px > img_width) | (py < 0) | (py > img_height)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_505": {
                "variable": {
                    "value": "flyout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flyout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast((px < 0) | (px > img_width) | (py < 0) | (py > img_height), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(flyout_mask, [1, 1, 1, img_channels])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, img_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_509": {
                "variable": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "px / img_width * 2.0 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_510": {
                "variable": {
                    "value": "py",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "py / img_height * 2.0 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_579": {
                "variable": {
                    "value": "pcoords",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "proj_c2p",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "cam_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pixel2cam(depth, grid, intrinsics_inv)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics_inv, pixel_coords) * depth",
                            "BinOp"
                        ],
                        [
                            "_pixel2cam(depth, grid, intrinsics_inv)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsics_inv, pixel_coords) * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "slice_580": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ],
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_581": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ],
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_582": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ],
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_586": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X_norm, Y_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_591": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_593": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_598": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "(x_t + 1.0) * 0.5 * tf.cast(width, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "(x_t + 1.0) * 0.5 * tf.cast(width, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_599": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ],
                        [
                            "(y_t + 1.0) * 0.5 * tf.cast(height, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ],
                        [
                            "(y_t + 1.0) * 0.5 * tf.cast(height, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_601": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_602": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_620": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_621": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_622": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-np.pi",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_625": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_626": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_627": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_629": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_630": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_632": {
                "variable": {
                    "value": "cosz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_633": {
                "variable": {
                    "value": "sinz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_634": {
                "variable": {
                    "value": "rotz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosz, -sinz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_635": {
                "variable": {
                    "value": "rotz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[sinz, cosz, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_636": {
                "variable": {
                    "value": "rotz_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, zeros, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_637": {
                "variable": {
                    "value": "zmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotz_1, rotz_2, rotz_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_639": {
                "variable": {
                    "value": "cosy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_640": {
                "variable": {
                    "value": "siny",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_641": {
                "variable": {
                    "value": "roty_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosy, zeros, siny]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_642": {
                "variable": {
                    "value": "roty_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, ones, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_643": {
                "variable": {
                    "value": "roty_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-siny, zeros, cosy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_644": {
                "variable": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roty_1, roty_2, roty_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_646": {
                "variable": {
                    "value": "cosx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_647": {
                "variable": {
                    "value": "sinx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_648": {
                "variable": {
                    "value": "rotx_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ones, zeros, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_649": {
                "variable": {
                    "value": "rotx_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, cosx, -sinx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_650": {
                "variable": {
                    "value": "rotx_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, sinx, cosx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_651": {
                "variable": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotx_1, rotx_2, rotx_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_653": {
                "a": {
                    "value": "xmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([rotx_1, rotx_2, rotx_3], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([roty_1, roty_2, roty_3], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_663": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_664": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ],
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ],
                        [
                            "tf.slice(vec, [0, 0], [-1, 3])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(translation, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_665": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_666": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_667": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_669": {
                "variable": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "_euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "_euler2mat(rz, ry, rx)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(rot_mat, squeeze_dims=[1])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_670": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_671": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [vec.get_shape().as_list()[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_672": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rot_mat, translation]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_673": {
                "variable": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[transform_mat, filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_773": {
                "variable": {
                    "value": "img_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(img)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_774": {
                "variable": {
                    "value": "img_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(img)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_775": {
                "variable": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_776": {
                "variable": {
                    "value": "py",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_778": {
                "variable": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "px / img_width * 2.0 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_779": {
                "variable": {
                    "value": "py",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "py / img_height * 2.0 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_59": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_119": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_232": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_233": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_234": {
                "variable": {
                    "value": "height_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_235": {
                "variable": {
                    "value": "width_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_239": {
                "variable": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_240": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_247": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_249": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_272": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_274": {
                "variable": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_275": {
                "variable": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(target_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_400": {
                "variable": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "v1 + v2 + v3 + v4 + v5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_402": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_mean(tf.abs(candidates - tf.expand_dims(target_flat, axis=-1)), axis=1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_403": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmin(tf.reduce_mean(tf.abs(candidates - tf.expand_dims(target_flat, axis=-1)), axis=1, keep_dims=True), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(idx, [1, channels])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_406": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_410": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4)), output1, tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id])",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_a, im_flat * wa)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_b, im_flat * wb)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_c, im_flat * wc)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_d, im_flat * wd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, height, width, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_424": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_425": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_431": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_432": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_433": {
                "variable": {
                    "value": "height_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_434": {
                "variable": {
                    "value": "width_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_435": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_436": {
                "variable": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_437": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_444": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_446": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_449": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_450": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ],
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_451": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_452": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_458": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_repeat(tf.range(num_batch) * dim1, out_height * out_width)",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_459": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_repeat(tf.range(num_batch) * dim1, out_height * out_width)",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_460": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_repeat(tf.range(num_batch) * dim1, out_height * out_width)",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_470": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_471": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_472": {
                "variable": {
                    "value": "pixel_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x0_c",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x0_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_473": {
                "variable": {
                    "value": "pixel_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x0_c",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x0_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_474": {
                "variable": {
                    "value": "pixel_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x1_c",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x1_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_475": {
                "variable": {
                    "value": "pixel_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x1_c",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x1_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_478": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ],
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_479": {
                "variable": {
                    "value": "y1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_481": {
                "variable": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_482": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (1.0 - (y1_f - y))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_483": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - (x1_f - x)) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_484": {
                "variable": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - (x1_f - x)) * (1.0 - (y1_f - y))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_486": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_487": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4)), output1, tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id])",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_a, im_flat * wa)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_b, im_flat * wb)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_c, im_flat * wc)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_d, im_flat * wd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, height, width, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_525": {
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_meshgrid_abs(img_height, img_width)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, 0), [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], axis=0)",
                            "Call"
                        ],
                        [
                            "_meshgrid_abs(img_height, img_width)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, 0), [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_571": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_573": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_574": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_687": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_688": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_694": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_695": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_696": {
                "variable": {
                    "value": "height_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_697": {
                "variable": {
                    "value": "width_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_698": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_699": {
                "variable": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_700": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_707": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_709": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_712": {
                "variable": {
                    "value": "x0_c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_713": {
                "variable": {
                    "value": "x1_c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ],
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_714": {
                "variable": {
                    "value": "y0_c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_715": {
                "variable": {
                    "value": "y1_c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_721": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_repeat(tf.range(num_batch) * dim1, out_height * out_width)",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_722": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_repeat(tf.range(num_batch) * dim1, out_height * out_width)",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_723": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_repeat(tf.range(num_batch) * dim1, out_height * out_width)",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ],
                        [
                            "tf.range(num_batch) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_733": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_734": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_735": {
                "variable": {
                    "value": "pixel_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x0_c",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x0_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_736": {
                "variable": {
                    "value": "pixel_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x0_c",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x0_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_737": {
                "variable": {
                    "value": "pixel_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x1_c",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x1_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_738": {
                "variable": {
                    "value": "pixel_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x1_c",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x1_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_741": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x1_, zero, max_x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_742": {
                "variable": {
                    "value": "y1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y1_, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_744": {
                "variable": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_745": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (1.0 - (y1_f - y))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_746": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - (x1_f - x)) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_747": {
                "variable": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - (x1_f - x)) * (1.0 - (y1_f - y))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_748": {
                "variable": {
                    "value": "zerof",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((x1_f - x) * (y1_f - y) / scale, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((x1_f - x) * (y1_f - y), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((x1_f - x) * (y1_f - y), 1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(tf.equal(x1_c, x1), tf.equal(y1_c, y1)), wa, zerof)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_749": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(batch_size * height * width), int(channels)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_750": {
                "variable": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.equal(x1_c, x1), tf.equal(y1_c, y1))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((x1_f - x) * (y1_f - y) / scale, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((x1_f - x) * (y1_f - y), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((x1_f - x) * (y1_f - y), 1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(tf.equal(x1_c, x1), tf.equal(y1_c, y1)), wa, zerof)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zerof",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_751": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.equal(x1_c, x1), tf.equal(y0_c, y0))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((x1_f - x) * (y - y0_f) / scale, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((x1_f - x) * (1.0 - (y1_f - y)), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((x1_f - x) * (1.0 - (y1_f - y)), 1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(tf.equal(x1_c, x1), tf.equal(y0_c, y0)), wb, zerof)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zerof",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_752": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.equal(x0_c, x0), tf.equal(y1_c, y1))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((x - x0_f) * (y1_f - y) / scale, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((1.0 - (x1_f - x)) * (y1_f - y), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((1.0 - (x1_f - x)) * (y1_f - y), 1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(tf.equal(x0_c, x0), tf.equal(y1_c, y1)), wc, zerof)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zerof",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_753": {
                "variable": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.equal(x0_c, x0), tf.equal(y0_c, y0))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((x - x0_f) * (y - y0_f) / scale, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((1.0 - (x1_f - x)) * (1.0 - (y1_f - y)), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((1.0 - (x1_f - x)) * (1.0 - (y1_f - y)), 1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(tf.equal(x0_c, x0), tf.equal(y0_c, y0)), wd, zerof)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zerof",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_754": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([B, N, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.zeros([B, N, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.zeros([B, N, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=[int(batch_size * height * width), int(channels)], dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_757": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4)), output1, tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id])",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_a, im_flat * wa)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_b, im_flat * wb)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_c, im_flat * wc)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_d, im_flat * wd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([B, N, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.zeros([B, N, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.zeros([B, N, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=[int(batch_size * height * width), int(channels)], dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_764": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4)), output1, tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id])",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_a, im_flat * wa)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_b, im_flat * wb)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_c, im_flat * wc)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_d, im_flat * wd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, height, width, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_789": {
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_meshgrid_abs(img_height, img_width)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, 0), [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], axis=0)",
                            "Call"
                        ],
                        [
                            "_meshgrid_abs(img_height, img_width)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, 0), [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "a": {
                    "value": "intrinsics_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([X_norm, Y_norm], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([X_norm, Y_norm], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_137": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_138": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_140": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_142": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_143": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_164": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "_interpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_360": {
                "variable": {
                    "value": "x0_c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0_",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_361": {
                "variable": {
                    "value": "x1_c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1_",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_363": {
                "variable": {
                    "value": "y0_c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0_",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_364": {
                "variable": {
                    "value": "y1_c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1_",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_374": {
                "variable": {
                    "value": "Ia",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x0_c",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x0_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_375": {
                "variable": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x0_c",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x0_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_376": {
                "variable": {
                    "value": "Ic",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x1_c",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x1_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_377": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x1_c",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x1_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_380": {
                "variable": {
                    "value": "x0_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_381": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_382": {
                "variable": {
                    "value": "y0_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_383": {
                "variable": {
                    "value": "y1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_384": {
                "variable": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y) / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_385": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y - y0_f) / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_386": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y1_f - y) / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_387": {
                "variable": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y - y0_f) / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_388": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_423": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'_interpolate'",
                            "MethodArgument"
                        ],
                        [
                            "'_interpolate'",
                            "MethodArgument"
                        ],
                        [
                            "'_interpolate'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_512": {
                "input": {
                    "value": "target_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_537": {
                "shape": {
                    "value": "[batch_size, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_566": {
                "a": {
                    "value": "intrinsics_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "pixel_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([X_norm, Y_norm], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([X_norm, Y_norm], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_570": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_575": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_591": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_592": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_593": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_594": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_596": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_597": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_618": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_686": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'_interpolate'",
                            "MethodArgument"
                        ],
                        [
                            "'_interpolate'",
                            "MethodArgument"
                        ],
                        [
                            "'_interpolate'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scatter_add_759": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4)), output1, tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id])",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_a, im_flat * wa)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_b, im_flat * wb)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_c, im_flat * wc)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_d, im_flat * wd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x0_c",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x0_c",
                            "BinOp"
                        ]
                    ]
                },
                "updates": {
                    "value": "im_flat * wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scatter_add_760": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4)), output1, tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id])",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_a, im_flat * wa)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_b, im_flat * wb)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_c, im_flat * wc)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_d, im_flat * wd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x0_c",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x0_c",
                            "BinOp"
                        ]
                    ]
                },
                "updates": {
                    "value": "im_flat * wb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scatter_add_761": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4)), output1, tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id])",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_a, im_flat * wa)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_b, im_flat * wb)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_c, im_flat * wc)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_d, im_flat * wd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x1_c",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ],
                        [
                            "base_y0 + x1_c",
                            "BinOp"
                        ]
                    ]
                },
                "updates": {
                    "value": "im_flat * wc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scatter_add_762": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(error_small_pred, tf.logical_and(idx >= 0, idx < 4)), output1, tf.where(tf.logical_and(idx >= 4, idx < 8), output2, tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id])",
                            "Call"
                        ],
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_a, im_flat * wa)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_b, im_flat * wb)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_c, im_flat * wc)",
                            "Call"
                        ],
                        [
                            "tf.scatter_add(output, idx_d, im_flat * wd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=tf.stack([num_batch, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x1_c",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ],
                        [
                            "base_y1 + x1_c",
                            "BinOp"
                        ]
                    ]
                },
                "updates": {
                    "value": "im_flat * wd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_799": {
                "shape": {
                    "value": "[batch_size, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_139": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_227": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_228": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_229": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_230": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_247": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_249": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_271": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_274": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_402": {
                "input_tensor": {
                    "value": "tf.abs(candidates - tf.expand_dims(target_flat, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_405": {
                "input": {
                    "value": "tf.reduce_mean(tf.abs(output1 - target_flat), axis=1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_or_406": {
                "x": {
                    "value": "error_small_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reduce_mean(tf.abs(output1 - target_flat), axis=1, keep_dims=True), [1, channels]) < 0.1",
                            "Compare"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.logical_and(idx >= 0, idx < 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_407": {
                "condition": {
                    "value": "tf.logical_and(idx >= 4, idx < 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(tf.logical_and(idx >= 8, idx < 12), output3, tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_428": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_444": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_446": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_470": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_496": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_497": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_572": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_574": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_592": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_593": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_691": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_707": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_709": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y, -np.pi, np.pi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(y, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_733": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_750": {
                "x": {
                    "value": "tf.equal(x1_c, x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(y1_c, y1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_751": {
                "x": {
                    "value": "tf.equal(x1_c, x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(y0_c, y0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_752": {
                "x": {
                    "value": "tf.equal(x0_c, x0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(y1_c, y1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_753": {
                "x": {
                    "value": "tf.equal(x0_c, x0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(y0_c, y0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_758": {
                "control_inputs": {
                    "value": "[init]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_773": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_774": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_118": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_137": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_138": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_140": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_402": {
                "x": {
                    "value": "candidates - tf.expand_dims(target_flat, axis=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_405": {
                "input_tensor": {
                    "value": "tf.abs(output1 - target_flat)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logical_and_406": {
                "x": {
                    "value": "idx >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "idx < 4",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_407": {
                "x": {
                    "value": "idx >= 4",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "idx < 8",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_408": {
                "condition": {
                    "value": "tf.logical_and(idx >= 8, idx < 12)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "output3",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(tf.logical_and(idx >= 12, idx < 16), output4, output5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_410": {
                "values": {
                    "value": "[num_batch, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_488": {
                "values": {
                    "value": "[num_batch, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_572": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_591": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_592": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_594": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_750": {
                "x": {
                    "value": "y1_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y1_, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_751": {
                "x": {
                    "value": "y0_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y0_, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_752": {
                "x": {
                    "value": "y1_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y1_, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ],
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_753": {
                "x": {
                    "value": "y0_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y0_, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_765": {
                "values": {
                    "value": "[num_batch, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_239": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_240": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_389": {
                "input": {
                    "value": "Ia",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(im_flat, idx_a)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_390": {
                "input": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(im_flat, idx_b)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_391": {
                "input": {
                    "value": "Ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(im_flat, idx_c)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_392": {
                "input": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(im_flat, idx_d)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_405": {
                "x": {
                    "value": "output1 - target_flat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_408": {
                "x": {
                    "value": "idx >= 8",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "idx < 12",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_409": {
                "condition": {
                    "value": "tf.logical_and(idx >= 12, idx < 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "output4",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "output5",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_436": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_437": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_699": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_700": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_118": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_402": {
                "input": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(target_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_and_409": {
                "x": {
                    "value": "idx >= 12",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "idx < 16",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_572": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}