{
    "ATM_ide/main.py": {
        "torch": {
            "zeros_96": {
                "variable": {
                    "value": "log_std_a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "log_std_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_99": {
                "variable": {
                    "value": "criterion_enh",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_100": {
                "variable": {
                    "value": "criterion_speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "optimizer_enh",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in enh_model.parameters()] + [log_std_a] + [log_std_b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "enh_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./1104Enhanced_result_LSTM2_mask/ENHANCE_' + Path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_168": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "speaker_out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "n_sp.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "ndarray": {
                    "value": "frames_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label[label['cleanID'].isin([a])]",
                            "Subscript"
                        ],
                        [
                            "frames_label.iloc[0, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.array(frames_label, dtype='float32')",
                            "Call"
                        ],
                        [
                            "label[label['cleanID'].isin([a])]",
                            "Subscript"
                        ],
                        [
                            "frames_label.iloc[0, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.array(frames_label, dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_134": {
                "input": {
                    "value": "torch.from_numpy(c_sp.astype('float32'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_139": {
                "input": {
                    "value": "log_std_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1,), requires_grad=True, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_140": {
                "input": {
                    "value": "log_std_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1,), requires_grad=True, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_169": {
                "input": {
                    "value": "prediction == torch.from_numpy(frames_label).cuda()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "n_sp.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "ndarray": {
                    "value": "frames_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label[label['cleanID'].isin([a])]",
                            "Subscript"
                        ],
                        [
                            "frames_label.iloc[0, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.array(frames_label, dtype='float32')",
                            "Call"
                        ],
                        [
                            "label[label['cleanID'].isin([a])]",
                            "Subscript"
                        ],
                        [
                            "frames_label.iloc[0, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.array(frames_label, dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_164": {
                "input": {
                    "value": "torch.from_numpy(c_sp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "frames_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label[label['cleanID'].isin([a])]",
                            "Subscript"
                        ],
                        [
                            "frames_label.iloc[0, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.array(frames_label, dtype='float32')",
                            "Call"
                        ],
                        [
                            "label[label['cleanID'].isin([a])]",
                            "Subscript"
                        ],
                        [
                            "frames_label.iloc[0, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.array(frames_label, dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "c_sp.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "c_sp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ATM_ide/test.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "ndarray": {
                    "value": "n_sp.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}