{
    "datasets/dtu.py": {
        "torch": {
            "stack_121": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "imgs + [img]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_122": {
                "variable": {
                    "value": "proj_mats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proj_mats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "proj_mats + [proj_mat]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(proj_mats)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_110": {
                "variable": {
                    "value": "depth_values",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "depth_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(lines[11].split()[0])",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "depth_interval * self.n_depths + depth_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(lines[11].split()[1]) * self.interval_scale",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_117": {
                "input": {
                    "value": "proj_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extrinsics",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "SmoothL1Loss_9": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "topk_16": {
                "variable": {
                    "value": "(loss, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "num_hard_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.topk * loss.numel())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_19": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(inputs[mask], targets[mask])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "ref_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_grid, torch.ones_like(ref_grid[:, :1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_57": {
                "variable": {
                    "value": "warped_src_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "src_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_grid_d[:, :2] / src_grid_d[:, -1:]",
                            "BinOp"
                        ],
                        [
                            "src_grid.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "src_grid.view(B, D, H * W, 2)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p * depth_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "ref_grid[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/mvsnet.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(64, 32, kernel_size=3, padding=1, output_padding=1, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(32, 16, kernel_size=3, padding=1, output_padding=1, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(16, 8, kernel_size=3, padding=1, output_padding=1, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_54": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "prob_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cost_regularization(volume_variance).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_126": {
                "variable": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_volume_sum4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * F.avg_pool3d(F.pad(prob_volume.unsqueeze(1), pad=(0, 0, 0, 0, 1, 2)), (4, 1, 1), stride=1).squeeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "depth_index.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_43": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_47": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_51": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool3d_116": {
                "input": {
                    "value": "F.pad(prob_volume.unsqueeze(1), pad=(0, 0, 0, 0, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_116": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_121": {
                "start": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_values.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "prob_volume.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "prob_volume.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_116": {
                "input": {
                    "value": "prob_volume.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "stack_117": {
                "variable": {
                    "value": "mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_117": {
                "variable": {
                    "value": "mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "mean_abs_err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_abs_err'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_118": {
                "variable": {
                    "value": "mean_abs_err",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "mean_acc_1mm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_acc_1mm'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_119": {
                "variable": {
                    "value": "mean_acc_1mm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "mean_acc_2mm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_acc_2mm'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_120": {
                "variable": {
                    "value": "mean_acc_2mm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "mean_acc_4mm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_acc_4mm'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "mean_acc_4mm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_147": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DTUDataset(root_dir=self.hparams.root_dir, split='train', n_views=self.hparams.n_views, n_depths=self.hparams.n_depths, interval_scale=self.hparams.interval_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_150": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DTUDataset(root_dir=self.hparams.root_dir, split='train', n_views=self.hparams.n_views, n_depths=self.hparams.n_depths, interval_scale=self.hparams.interval_scale)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_165": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DTUDataset(root_dir=self.hparams.root_dir, split='val', n_views=self.hparams.n_views, n_depths=self.hparams.n_depths, interval_scale=self.hparams.interval_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_168": {
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DTUDataset(root_dir=self.hparams.root_dir, split='val', n_views=self.hparams.n_views, n_depths=self.hparams.n_depths, interval_scale=self.hparams.interval_scale)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_, depth_gt_, depth_pred_, prob]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_, depth_gt_, depth_pred_, prob]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/__init__.py": {
        "torch": {
            "SGD_13": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "hparams.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "hparams.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_32": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=hparams.lr, momentum=hparams.momentum, weight_decay=hparams.weight_decay)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=hparams.lr, eps=eps, weight_decay=hparams.weight_decay)",
                            "Call"
                        ],
                        [
                            "RAdam(model.parameters(), lr=hparams.lr, eps=eps, weight_decay=hparams.weight_decay)",
                            "Call"
                        ],
                        [
                            "Ranger(model.parameters(), lr=hparams.lr, eps=eps, weight_decay=hparams.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "hparams.decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "hparams.decay_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_16": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07 if hparams.use_amp else 1e-08",
                            "IfExp"
                        ],
                        [
                            "1e-07 if hparams.use_amp else 1e-08",
                            "IfExp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "hparams.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_35": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(model.parameters(), lr=hparams.lr, momentum=hparams.momentum, weight_decay=hparams.weight_decay)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=hparams.lr, eps=eps, weight_decay=hparams.weight_decay)",
                            "Call"
                        ],
                        [
                            "RAdam(model.parameters(), lr=hparams.lr, eps=eps, weight_decay=hparams.weight_decay)",
                            "Call"
                        ],
                        [
                            "Ranger(model.parameters(), lr=hparams.lr, eps=eps, weight_decay=hparams.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "hparams.num_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07 if hparams.use_amp else 1e-08",
                            "IfExp"
                        ],
                        [
                            "1e-07 if hparams.use_amp else 1e-08",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/optimizers.py": {
        "torch": {
            "zeros_like_50": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_51": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_138": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_349": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_350": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_353": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualization.py": {
        "torch": {}
    },
    "utils/warmup_scheduler.py": {
        "torch": {}
    }
}