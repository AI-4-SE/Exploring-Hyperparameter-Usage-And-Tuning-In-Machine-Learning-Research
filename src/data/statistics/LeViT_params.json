{
    "datasets.py": {
        "torch": {
            "ConcatDataset_73": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[dataset for _ in range(100)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "engine.py": {
        "torch": {
            "CrossEntropyLoss_73": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "levit.py": {
        "torch": {
            "BatchNorm2d_80": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - self.bn.running_mean * self.bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "b @ self.l.weight.T",
                            "BinOp"
                        ],
                        [
                            "(l.weight @ b[:, None]).view(-1) + self.l.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "w.size(1) * self.c.groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "w.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.c.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.c.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.c.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.c.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_108": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - self.bn.running_mean * self.bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "b @ self.l.weight.T",
                            "BinOp"
                        ],
                        [
                            "(l.weight @ b[:, None]).view(-1) + self.l.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - self.bn.running_mean * self.bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "b @ self.l.weight.T",
                            "BinOp"
                        ],
                        [
                            "(l.weight @ b[:, None]).view(-1) + self.l.bias",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "*args": {
                    "value": "Conv2d_BN(3, n // 8, 3, 2, 1, resolution=resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "activation()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.attention_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_heads, len(attention_offsets))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Subsample(stride, resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "activation()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_315": {
                "variable": {
                    "value": "self.attention_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_heads, len(attention_offsets))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_431": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - self.bn.running_mean * self.bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "b @ self.l.weight.T",
                            "BinOp"
                        ],
                        [
                            "(l.weight @ b[:, None]).view(-1) + self.l.bias",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - self.bn.running_mean * self.bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "b @ self.l.weight.T",
                            "BinOp"
                        ],
                        [
                            "(l.weight @ b[:, None]).view(-1) + self.l.bias",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_138": {
                "num_features": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "*size": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(x) for x in N.split('_')]",
                            "ListComp"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "[3]",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "len(attention_offsets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "*size": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(x) for x in N.split('_')]",
                            "ListComp"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "[3]",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "len(attention_offsets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_501": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_183": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_183": {
                "input": {
                    "value": "1 - self.drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_403": {
                "*args": {
                    "value": "Linear_BN(ed, h, resolution=resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_424": {
                "*args": {
                    "value": "Linear_BN(embed_dim[i + 1], h, resolution=resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "levit_c.py": {
        "torch": {
            "BatchNorm2d_80": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - self.bn.running_mean * self.bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "b @ self.l.weight.T",
                            "BinOp"
                        ],
                        [
                            "(l.weight @ b[:, None]).view(-1) + self.l.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "w.size(1) * self.c.groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "w.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.c.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.c.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.c.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.c.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - self.bn.running_mean * self.bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "b @ self.l.weight.T",
                            "BinOp"
                        ],
                        [
                            "(l.weight @ b[:, None]).view(-1) + self.l.bias",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "Conv2d_BN(3, n // 8, 3, 2, 1, resolution=resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "activation()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.attention_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_heads, len(attention_offsets))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AvgPool2d(1, stride, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "activation()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_266": {
                "variable": {
                    "value": "self.attention_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_heads, len(attention_offsets))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_380": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_399": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(v @ attn.transpose(-2, -1)).view(B, -1, H, W)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "(v @ attn.transpose(-2, -1)).reshape(B, -1, self.resolution_, self.resolution_)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.adaptive_avg_pool2d(x, 1).flatten(1)",
                            "Call"
                        ],
                        [
                            "(self.head(x), self.head_dist(x))",
                            "Tuple"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "(x[0] + x[1]) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_399": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.running_mean * bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "bn.bias - self.bn.running_mean * self.bn.weight / (bn.running_var + bn.eps) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "b @ self.l.weight.T",
                            "BinOp"
                        ],
                        [
                            "(l.weight @ b[:, None]).view(-1) + self.l.bias",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_107": {
                "num_features": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(x) for x in N.split('_')]",
                            "ListComp"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "[3]",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "len(attention_offsets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_243": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(x) for x in N.split('_')]",
                            "ListComp"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "[3]",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "len(attention_offsets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_454": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_152": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_152": {
                "input": {
                    "value": "1 - self.drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_352": {
                "*args": {
                    "value": "Conv2d_BN(ed, h, resolution=resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_373": {
                "*args": {
                    "value": "Conv2d_BN(embed_dim[i + 1], h, resolution=resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_62": {
                "variable": {
                    "value": "distillation_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_kd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "target": {
                    "value": "teacher_outputs.argmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_55": {
                "input": {
                    "value": "F.log_softmax(outputs_kd / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.log_softmax(teacher_outputs / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_56": {
                "input": {
                    "value": "outputs_kd / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_57": {
                "input": {
                    "value": "teacher_outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_194": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "RASampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(1.5 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_198": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RandomSampler_228": {
                "variable": {
                    "value": "sampler_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_229": {
                "variable": {
                    "value": "sampler_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_295": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_model(args.model, num_classes=args.nb_classes, distillation=args.distillation_type != 'none', pretrained=args.eval, fuse=args.eval)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_215": {
                "variable": {
                    "value": "sampler_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_223": {
                "variable": {
                    "value": "sampler_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_226": {
                "variable": {
                    "value": "sampler_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_269": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.finetune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_317": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_333": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.teacher_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_351": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "samplers.py": {
        "torch": {
            "Generator_41": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_44": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "speed_test.py": {
        "torch": {
            "set_grad_enabled_13": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_21": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "batch_size0",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['cuda:0', 'cpu']",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_32": {
                "variable": {
                    "value": "timing",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "timing",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(timing, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(timing, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "batch_size0",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['cuda:0', 'cpu']",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_54": {
                "variable": {
                    "value": "timing",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "timing",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(timing, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(timing, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_97": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "batch_size0",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ],
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['cuda:0', 'cpu']",
                            "List"
                        ]
                    ]
                }
            },
            "trace_103": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eval(n)(num_classes=1000)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(model, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_70": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_73": {
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mem_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_232": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_214": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_247": {
                "variable": {
                    "value": "child.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(child.weight.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "child.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}