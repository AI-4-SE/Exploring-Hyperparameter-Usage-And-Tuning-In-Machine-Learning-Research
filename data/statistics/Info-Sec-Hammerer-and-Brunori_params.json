{
    "cleverhans/cleverhans/model_zoo/soft_nearest_neighbor_loss/SNNL_regularized_train.py": {
        "sklearn": {
            "TSNE_143": {
                "variable": {
                    "value": "X_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_70": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sign_138": {
                "variable": {
                    "value": "adv_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gradients(cross_entropy_loss.fprop(x, y), x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_64": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_138": {
                "ys": {
                    "value": "cross_entropy_loss.fprop(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_rows, img_cols, nchannels))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attack_bundling.py": {
        "tensorflow": {
            "ones_88": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dev_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_151": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dev_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_224": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dev_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1147": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dev_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "batch_size // num_devices",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "cls_params[y_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(ones * cls, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_157": {
                "variable": {
                    "value": "cls_params[y_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(ones * cls, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_230": {
                "variable": {
                    "value": "cls_params[y_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(ones * cls, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_1000": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_1002": {
                "variable": {
                    "value": "max_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_batch)",
                            "Call"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1040": {
                "variable": {
                    "value": "max_wrong_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions * (1.0 - y_batch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_1150": {
                "variable": {
                    "value": "cls_params[y_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(ones * cls, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_94": {
                "indices": {
                    "value": "ones * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_157": {
                "indices": {
                    "value": "ones * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_230": {
                "indices": {
                    "value": "ones * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_1000": {
                "input": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[idxs]",
                            "Subscript"
                        ],
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ],
                        [
                            "y_batch",
                            "Method Argument"
                        ],
                        [
                            "y_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_1001": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_batch)",
                            "Call"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_1150": {
                "indices": {
                    "value": "ones * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ],
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/__init__.py": {
        "tensorflow": {
            "as_dtype_41": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/attack.py": {
        "tensorflow": {
            "as_dtype_43": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(x_val.shape)[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "feedable.items()",
                            "Call"
                        ],
                        [
                            "feedable",
                            "variable"
                        ]
                    ]
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(value.shape[1:])",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "feedable.items()",
                            "Call"
                        ],
                        [
                            "feedable",
                            "variable"
                        ]
                    ]
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "arg_names",
                            "variable"
                        ],
                        [
                            "feedable.items()",
                            "Call"
                        ],
                        [
                            "feedable",
                            "variable"
                        ]
                    ]
                }
            },
            "to_float_280": {
                "variable": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_281": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_280": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/bapp.py": {
        "tensorflow": {
            "as_dtype_11": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.input_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None] + list(self.shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_102": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "bapp_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bapp_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x[0], self.y_target[0], self.image_target[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_348": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_108": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x, target_image: bapp_wrap(x, None, target_image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x[0], self.image_target[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_114": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: bapp_wrap(x, None, None)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_347": {
                "control_inputs": {
                    "value": "[check_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_346": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/carlini_wagner_l2.py": {
        "tensorflow": {
            "as_dtype_15": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_82": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "cw_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cw_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_214": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_217": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_218": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_220": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_224": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_225": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_227": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_263": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_265": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_274": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_251": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_254": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_242": {
                "x": {
                    "value": "self.newimg - self.other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_232": {
                "x": {
                    "value": "modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_239": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/deep_fool.py": {
        "tensorflow": {
            "reshape_67": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.top_k(logits, k=self.nb_candidate)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.nb_candidate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "jacobian_graph(preds, x, self.nb_candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_81": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "deepfool_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepfool_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_68": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "self.nb_candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/elastic_net_method.py": {
        "tensorflow": {
            "as_dtype_15": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_86": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "ead_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ead_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_239": {
                "variable": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_246": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_247": {
                "variable": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_249": {
                "variable": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_251": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_253": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_257": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_258": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_260": {
                "variable": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_264": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_267": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_268": {
                "variable": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_271": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step_t + tf.cast(3, tf_dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_273": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.subtract(self.slack, self.timg), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_275": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_278": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_281": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_283": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_286": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.subtract(self.slack, self.timg), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.subtract(self.slack, self.beta_t), tf.cast(self.clip_max, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_295": {
                "variable": {
                    "value": "self.setter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_296": {
                "variable": {
                    "value": "self.setter_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_349": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.MAX_ITERATIONS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_358": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_362": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_372": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.global_step] + [self.slack] + [self.newimg] + new_vars",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_287": {
                "x": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_288": {
                "x": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t)), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.add(self.slack, self.beta_t), tf.cast(self.clip_min, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_291": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_newimg - self.newimg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_332": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_333": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other_y - real_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_336": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_337": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real_y - other_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_273": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_275": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.slack, self.timg))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_278": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_281": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_282": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_283": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_284": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_303": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_305": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_307": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_309": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_311": {
                "x": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_313": {
                "x": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_347": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss21",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_272": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_273": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_275": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_278": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_279": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_275": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/fast_feature_adversaries.py": {
        "tensorflow": {
            "gradients_111": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_124": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_157": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.zeros([]), eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_122": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_163": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_114": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_147": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_151": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_108": {
                "x": {
                    "value": "a_feat - g_feat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/fast_gradient_method.py": {
        "tensorflow": {
            "gradients_191": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(labels=y, logits=logits)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_181": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(logits, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_182": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(logits, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_233": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_239": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimize_linear(grad, eps, ord)",
                            "Call"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(optimal_perturbation)",
                            "Call"
                        ],
                        [
                            "sign * tied_for_max / num_ties",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_209": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_241": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_242": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_243": {
                "variable": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(grad)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_244": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(abs_grad, max_abs_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_245": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(abs_grad, max_abs_grad))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_181": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(logits, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_208": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "maximum_248": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_170": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_173": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_244": {
                "x": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(abs_grad, red_ind, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_252": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_249": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/lbfgs.py": {
        "tensorflow": {
            "as_dtype_14": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_71": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lbfgs_wrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lbfgs_wrap",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.ori_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ori_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_164": {
                "variable": {
                    "value": "(self.grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_156": {
                "x": {
                    "value": "self.x - self.ori_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/max_confidence.py": {
        "tensorflow": {
            "argmax_73": {
                "variable": {
                    "value": "true_y_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "expanded_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x] * self.nb_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "target_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "target_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.to_float(tf.one_hot(tf.ones(m, dtype=tf.int32) * cls, self.nb_classes)) for cls in range(self.nb_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_83": {
                "variable": {
                    "value": "adv_x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "adv_x_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.attack_class(expanded_x, target_y)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_84": {
                "variable": {
                    "value": "all_probs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "expanded_all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(adv_x_cls)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_100": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(e, 1) for e in prob_cls]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "most_confident",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(e, 1) for e in prob_cls], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_104": {
                "variable": {
                    "value": "fused_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "most_confident",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fused_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(most_confident, self.nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_91": {
                "variable": {
                    "value": "cur_prob_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "all_probs - true_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "variable": {
                    "value": "chosen_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_probs_list[cls]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_96": {
                "variable": {
                    "value": "eligible",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(true_y_idx, chosen_cls)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_76": {
                "x": {
                    "value": "tf.one_hot(tf.ones(m, dtype=tf.int32) * cls, self.nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[m] + [1] * (len(x.get_shape()) - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_76": {
                "indices": {
                    "value": "tf.ones(m, dtype=tf.int32) * cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_96": {
                "x": {
                    "value": "true_y_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(true_y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "chosen_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(all_probs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_76": {
                "shape": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/momentum_iterative_method.py": {
        "tensorflow": {
            "zeros_like_67": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_115": {
                "variable": {
                    "value": "(_, adv_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.zeros([]), adv_x, momentum)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_87": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(labels=y, logits=logits)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ],
                        [
                            "ax",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_91": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_111": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ],
                        [
                            "ax",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_77": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_121": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.while_loop(cond, body, (tf.zeros([]), adv_x, momentum), back_prop=True, maximum_iterations=self.nb_iter)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_92": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_mean(tf.abs(grad), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_120": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_58": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_63": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_94": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, ax)",
                            "Call"
                        ],
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/noise.py": {
        "tensorflow": {
            "clip_by_value_55": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_50": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/projected_gradient_descent.py": {
        "tensorflow": {
            "while_loop_145": {
                "variable": {
                    "value": "(_, adv_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.zeros([]), adv_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_94": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_96": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_126": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_167": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, body, (tf.zeros([]), adv_x), back_prop=True, maximum_iterations=self.nb_iter)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "FGM.generate(adv_x, **fgm_params)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_75": {
                "x": {
                    "value": "self.rand_init_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_78": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_152": {
                "x": {
                    "value": "self.eps_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "common_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_154": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "common_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_166": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_64": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_69": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_95": {
                "x": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_159": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_162": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/saliency_map_method.py": {
        "tensorflow": {
            "as_dtype_13": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_164": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_276": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y_target, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_152": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_target, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_target, tf.float32)",
                            "Call"
                        ],
                        [
                            "y_target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_157": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_target, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_target, tf.float32)",
                            "Call"
                        ],
                        [
                            "y_target",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_192": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_193": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y_target.shape[-1].value)",
                            "Call"
                        ],
                        [
                            "self.get_or_guess_labels(x, kwargs)",
                            "Call"
                        ],
                        [
                            "gt.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(list_derivatives)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_209": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_243": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=[-1, nb_features * nb_features])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_246": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "floordiv_247": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_248": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_249": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floordiv(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_252": {
                "variable": {
                    "value": "mod_not_done",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_in.shape[1:].as_list()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_270": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_186": {
                "x": {
                    "value": "tf.less(i_in, max_iters)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_198": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "logits[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_265": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_267": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_min",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "py_func_71": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "random_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_targets",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_171": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_174": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_186": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_193": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_201": {
                "values": {
                    "value": "list_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_208": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_in",
                            "Method Argument"
                        ],
                        [
                            "y_in",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_209": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=[1, 0]), shape=[nb_classes, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_218": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_223": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "variable"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "variable"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "variable"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "variable"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scores_mask, tf_dtype) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features * nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_256": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_218": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_222": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_228": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * other_classes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_239": {
                "x": {
                    "value": "scores_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/sparse_l1_descent.py": {
        "tensorflow": {
            "gradients_303": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(labels=y, logits=logits)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_prod_309": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.shape(x)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_314": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.broadcast_to(q, tf.shape(x)[0:1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_315": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x)[1:])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_325": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.range(tf.shape(abs_grad)[0]), k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_326": {
                "variable": {
                    "value": "percentiles",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sorted_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.nn.top_k(-abs_grad, k=dim, sorted=True)[0]",
                            "UnaryOp"
                        ],
                        [
                            "tf.sort(abs_grad, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((tf.range(tf.shape(abs_grad)[0]), k), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_327": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.abs(grad), (-1, dim))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(percentiles, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_328": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tied_for_max, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_329": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(abs_grad, tf.expand_dims(percentiles, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(tied_for_max, x.dtype), tf.shape(grad))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_136": {
                "variable": {
                    "value": "(_, adv_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.zeros([]), adv_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_293": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(logits, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_294": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(logits, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_323": {
                "variable": {
                    "value": "sorted_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.abs(grad), (-1, dim))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_227": {
                "variable": {
                    "value": "self.grad_sparsity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.grad_sparsity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_311": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_to_314": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.broadcast_to(q, tf.shape(x)[0:1]), tf.float32)",
                            "Call"
                        ],
                        [
                            "99",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(x)[0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "floor_315": {
                "x": {
                    "value": "q / 100 * tf.cast(dim, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_327": {
                "input": {
                    "value": "percentiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(sorted_grad, idx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_328": {
                "x": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(abs_grad, tf.expand_dims(percentiles, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(tied_for_max, x.dtype), tf.shape(grad))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_328": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_344": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + utils_tf.mul(eps, optimal_perturbation)",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, body, (tf.zeros([]), adv_x), back_prop=True, maximum_iterations=self.nb_iter)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "sparse_l1_descent(adv_x, logits, y=labels, eps=self.eps_iter, q=self.grad_sparsity, clip_min=self.clip_min, clip_max=self.clip_max, clip_grad=self.clip_grad, targeted=self.y_target is not None, sanity_checks=self.sanity_checks)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_95": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_96": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_97": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(logits, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_105": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_149": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + utils_tf.mul(eps, optimal_perturbation)",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(cond, body, (tf.zeros([]), adv_x), back_prop=True, maximum_iterations=self.nb_iter)",
                            "Call"
                        ],
                        [
                            "tf.identity(adv_x)",
                            "Call"
                        ],
                        [
                            "sparse_l1_descent(adv_x, logits, y=labels, eps=self.eps_iter, q=self.grad_sparsity, clip_min=self.clip_min, clip_max=self.clip_max, clip_grad=self.clip_grad, targeted=self.y_target is not None, sanity_checks=self.sanity_checks)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "utils_tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_293": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(adv_x)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(logits, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_309": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_331": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, x)",
                            "Call"
                        ],
                        [
                            "utils_tf.zero_out_clipped_grads(grad, x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_343": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_76": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_143": {
                "x": {
                    "value": "self.eps_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "common_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_145": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "common_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_148": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_282": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_285": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_314": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_321": {
                "input": {
                    "value": "-abs_grad",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x)[1:])",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_71": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_77": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_96": {
                "x": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(logits, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_325": {
                "input": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.abs(grad), (-1, dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/spsa.py": {
        "tensorflow": {
            "as_dtype_15": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_500": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_513": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[dx_in_px, dy_in_px]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_561": {
                "variable": {
                    "value": "all_xents",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_compute_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_xent",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "transformed_ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel_apply_transformations(x, transforms, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_apply_transformation, elems, dtype=tf.float32, parallel_iterations=1)",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_569": {
                "variable": {
                    "value": "all_xents",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_xents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_compute_xent, transformed_ims, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(all_xents)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_572": {
                "variable": {
                    "value": "worst_sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_xents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_compute_xent, transformed_ims, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(all_xents)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_575": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size, dtype=tf.int32), tf.cast(worst_sample_idx, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_579": {
                "variable": {
                    "value": "transformed_ims_bshwc",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "sbhwc->bshwc",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "transformed_ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel_apply_transformations(x, transforms, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_apply_transformation, elems, dtype=tf.float32, parallel_iterations=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_580": {
                "variable": {
                    "value": "after_lookup",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformed_ims_bshwc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('sbhwc->bshwc', transformed_ims)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int32), tf.cast(worst_sample_idx, tf.int32)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_592": {
                "variable": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itertools.product(*[dxs, dys, angles]))",
                            "Call"
                        ],
                        [
                            "zip(sampled_dxs, sampled_dys, sampled_angles)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(transforms, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "transforms",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_600": {
                "variable": {
                    "value": "tiled_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(x, [num_transforms, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_transforms, -1] + im_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "map_fn_604": {
                "variable": {
                    "value": "transformed_ims",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_apply_transformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_apply_transformation",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tiled_x, transforms]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_721": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(0.0), init_perturbation, flat_init_optim_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_432": {
                "variable": {
                    "value": "(_, all_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[0, tf.TensorArray(size=self._num_iters, dtype=tf_dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_457": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "variable"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_461": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label, depth=nb_classes, axis=-1)",
                            "Call"
                        ],
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "tf.to_float(logit_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_482": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [border_size, border_size], [border_size, border_size], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_535": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_536": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('y', [None] * batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_745": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_758": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_221": {
                "control_inputs": {
                    "value": "[utils_tf.assert_less_equal(input_image, tf.cast(clip_max, input_image.dtype)), utils_tf.assert_greater_equal(input_image, tf.cast(clip_min, input_image.dtype))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_270": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + static_x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_420": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_421": {
                "variable": {
                    "value": "loss_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_fn(x + delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self._num_samples] + [1] * (len(x_shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_425": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(all_grads.stack(), axis=0)",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_vals * delta_x, axis=0) / delta",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(avg_grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_558": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('y', [None] * batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "model.get_logits(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_574": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_601": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_transforms, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_667": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'Starting PGD attack with epsilon: %s' % epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_672": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_718": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_756": {
                "control_inputs": {
                    "value": "[check_diff] + check_range",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_346": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_347": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_396": {
                "x": {
                    "value": "tf.random_uniform([self._num_samples] + x_shape[1:], minval=-1.0, maxval=1.0, dtype=tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_535": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "model.get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_576": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_577": {
                "x": {
                    "value": "worst_sample_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(all_xents, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_666": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_673": {
                "x": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_674": {
                "x": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1e-09",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_712": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(loss, early_stop_loss_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : float(num_steps)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_739": {
                "x": {
                    "value": "perturbation_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * 1.1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "final_perturbation.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_750": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_753": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_135": {
                "control_inputs": {
                    "value": "[check_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_709": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Total batch loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_724": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x, (orig_width - 2 * border_size, orig_height - 2 * border_size))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padding, padding], [padding, padding], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x, translation, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "_apply_black_border(x, black_border_size)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_223": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_225": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_367": {
                "x": {
                    "value": "self._beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_368": {
                "x": {
                    "value": "self._beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_436": {
                "size": {
                    "value": "self._num_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_708": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_712": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "early_stop_loss_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_370": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['u'][i] / (1.0 - tf.pow(self._beta2, t))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks/virtual_adversarial_method.py": {
        "tensorflow": {
            "as_dtype_14": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_133": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_140": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(kl, d)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_144": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_139": {
                "ys": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.kl_with_logits(logits, logits_d)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(x), dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "xi * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(Hd)",
                            "Call"
                        ],
                        [
                            "eps * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/attacks_tfe.py": {
        "tensorflow": {
            "as_dtype_38": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_158": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/augmentation.py": {
        "tensorflow": {
            "pad_24": {
                "variable": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_crop_25": {
                "value": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]], mode)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_rand_crop_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_rand_crop_img",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_36": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/CPU:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_37": {
                "fn": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, rows + pad_rows, cols + pad_cols)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_rand_crop_img, x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_crop_48": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[rows, cols, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_53": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/canary.py": {
        "tensorflow": {
            "Graph_35": {
                "variable": {
                    "value": "canary_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState([2018, 10, 16]).randn(2, 2)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_55": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_47": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(v, trainable=False, collections=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_52": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(w))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(v, trainable=False, collections=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_56": {
                "var_list": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_51": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/compat.py": {
        "tensorflow": {
            "stop_gradient_78": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/confidence_report.py": {
        "tensorflow": {
            "Session_163": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_314": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_308": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/dataset.py": {
        "tensorflow": {
            "load_data_282": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_299": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_utils.to_categorical(y_train, nb_classes)",
                            "Call"
                        ],
                        [
                            "y_train[train_start:train_end, :]",
                            "Subscript"
                        ],
                        [
                            "data_mnist(train_start=train_start, train_end=train_end, test_start=test_start, test_end=test_end)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "to_categorical_300": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_utils.to_categorical(y_test, nb_classes)",
                            "Call"
                        ],
                        [
                            "y_test[test_start:test_end, :]",
                            "Subscript"
                        ],
                        [
                            "data_mnist(train_start=train_start, train_end=train_end, test_start=test_start, test_end=test_end)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "range_72": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "image_data_format_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_80": {
                "func": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lookup",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/evaluation.py": {
        "tensorflow": {
            "equal_538": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_592": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_593": {
                "variable": {
                    "value": "max_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_644": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_646": {
                "variable": {
                    "value": "max_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_538": {
                "input": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ],
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ],
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ],
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_539": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_644": {
                "input": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ],
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ],
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ],
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_645": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_324": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/experimental/certification/certify.py": {
        "tensorflow": {
            "set_verbosity_79": {
                "level": {
                    "value": "FLAGS.verbosity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_86": {
                "msg": {
                    "value": "Loaded neural network with size of layers: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_88": {
                "msg": {
                    "value": "Loaded neural network with input shapes: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.input_shapes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_90": {
                "msg": {
                    "value": "Loaded neural network with output shapes: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn_params.output_shapes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_157": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "info_107": {
                "msg": {
                    "value": "Running certification for adversarial class %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "adv_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_class in range(start_class, end_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/experimental/certification/dual_formulation.py": {
        "tensorflow": {
            "convert_to_tensor_61": {
                "variable": {
                    "value": "self.test_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_input",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_64": {
                "variable": {
                    "value": "self.input_minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "input_minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_minval",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_65": {
                "variable": {
                    "value": "self.input_maxval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "input_maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_maxval",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_66": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.size(self.final_linear), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "projected_nu",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "min_eig_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_graph_215": {
                "variable": {
                    "value": "self.min_eigen_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.tf_lanczos_smallest_eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "zeros_m",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_225": {
                "variable": {
                    "value": "self.m_min_vec_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(self.matrix_m_dimension, 1), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "m_min_vec_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_233": {
                "variable": {
                    "value": "self.m_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.m_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_234": {
                "variable": {
                    "value": "self.m_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.m_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "zeros_h",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension - 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_238": {
                "variable": {
                    "value": "self.h_min_vec_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(self.matrix_m_dimension - 1, 1), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.matrix_m_dimension - 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "h_min_vec_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_246": {
                "variable": {
                    "value": "self.h_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_min_eig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_247": {
                "variable": {
                    "value": "self.h_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_min_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_297": {
                "variable": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "g_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_313": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_349": {
                "variable": {
                    "value": "h_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "h_beta_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_364": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.nn_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_365": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_372": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[alpha * self.nu + tf.reduce_sum(tf.multiply(beta, self.vector_g)), tf.multiply(alpha, self.vector_g) + h_beta]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_414": {
                "variable": {
                    "value": "self.matrix_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "h_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_417": {
                "variable": {
                    "value": "self.matrix_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([tf.reshape(self.nu, (1, 1)), tf.transpose(self.vector_g)], axis=1), tf.concat([self.vector_g, self.matrix_h], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_350": {
                "x": {
                    "value": "h_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(h_beta_rows, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_h_product(beta)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_378": {
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([alpha * self.nu + tf.reduce_sum(tf.multiply(beta, self.vector_g)), tf.multiply(alpha, self.vector_g) + h_beta], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "self.nn_dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_411": {
                "variable": {
                    "value": "current_column",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "current_col_elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_489": {
                "msg": {
                    "value": "'Nu after modifying: ' + str(second_term)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_493": {
                "msg": {
                    "value": "Inner step: %d, current value of certificate: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_step",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "computed_certificate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.unconstrained_objective, feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_501": {
                "variable": {
                    "value": "input_vector_m",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_89": {
                "x": {
                    "value": "self.test_input - self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_minval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_91": {
                "x": {
                    "value": "self.test_input + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_169": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_170": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_172": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_174": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_345": {
                "x": {
                    "value": "self.lambda_quad[self.nn_params.num_hidden_layers] + self.lambda_lu[self.nn_params.num_hidden_layers]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_415": {
                "a": {
                    "value": "self.matrix_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_500": {
                "msg": {
                    "value": "'min eig val from lanczos: ' + str(min_eig_val_m)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_515": {
                "msg": {
                    "value": "'min eig val m from scipy: ' + str(min_eig_val_m_scipy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_103": {
                "features": {
                    "value": "current_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (lo_plus_up + lo_minus_up) + self.nn_params.biases[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_104": {
                "features": {
                    "value": "current_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (lo_plus_up + up_minus_lo) + self.nn_params.biases[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_180": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i] - projected_lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_183": {
                "x": {
                    "value": "self.negative_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "projected_lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_185": {
                "x": {
                    "value": "self.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(projected_lambda_neg[i], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_258": {
                "input_tensor": {
                    "value": "tf.multiply(self.nn_params.biases[i], self.lambda_pos[i + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_262": {
                "input_tensor": {
                    "value": "tf.multiply(tf.multiply(self.lower[i], self.upper[i]), self.lambda_lu[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_293": {
                "x": {
                    "value": "self.lambda_quad[self.nn_params.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.biases[self.nn_params.num_hidden_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_337": {
                "x": {
                    "value": "self.lambda_quad[i + 1] + self.lambda_lu[i + 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_338": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.forward_pass(gamma, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_419": {
                "values": {
                    "value": "[tf.reshape(self.nu, (1, 1)), tf.transpose(self.vector_g)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_420": {
                "values": {
                    "value": "[self.vector_g, self.matrix_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_518": {
                "msg": {
                    "value": "Found certificate of robustness!",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_71": {
                "input": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_186": {
                "x": {
                    "value": "projected_lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_259": {
                "x": {
                    "value": "self.nn_params.biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_pos[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_263": {
                "x": {
                    "value": "self.lower[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.upper[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_277": {
                "x": {
                    "value": "self.lambda_quad[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nn_params.biases[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_282": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_290": {
                "x": {
                    "value": "self.lower[self.nn_params.num_hidden_layers] + self.upper[self.nn_params.num_hidden_layers]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[self.nn_params.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_374": {
                "input_tensor": {
                    "value": "tf.multiply(beta, self.vector_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_375": {
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector[0], shape=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "shape": {
                    "value": "[self.nn_params.sizes[j], self.nn_params.sizes[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_405": {
                "a": {
                    "value": "utils.diag(-1 * self.lambda_quad[i + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.nn_params.weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_410": {
                "shape": {
                    "value": "[self.nn_params.sizes[j], self.nn_params.sizes[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_178": {
                "x": {
                    "value": "-min_eig_h",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_275": {
                "x": {
                    "value": "self.lower[i] + self.upper[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_323": {
                "x": {
                    "value": "2 * self.lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i]:self.dual_index[i + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_330": {
                "x": {
                    "value": "self.lambda_quad[i] + self.lambda_lu[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i]:self.dual_index[i + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_333": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_374": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(vector, self.nn_dtype)",
                            "Call"
                        ],
                        [
                            "vector[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_419": {
                "tensor": {
                    "value": "self.nu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_419": {
                "a": {
                    "value": "self.vector_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_325": {
                "x": {
                    "value": "self.lambda_quad[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[self.dual_index[i + 1]:self.dual_index[i + 2]]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/experimental/certification/nn.py": {
        "tensorflow": {
            "load_checkpoint_191": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_106": {
                "variable": {
                    "value": "self.final_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "net_weights[self.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "variable": {
                    "value": "self.final_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[self.num_hidden_layers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_131": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.output_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.input_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_159": {
                "tensor": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(vector, weight, output_shape=self.input_shapes[layer_index], strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(vector, weight, strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.sizes[layer_index + 1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_71": {
                "variable": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_92": {
                "variable": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "net_biases[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_93": {
                "variable": {
                    "value": "large_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(small_bias, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[current_num_rows * current_num_columns, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_139": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_158": {
                "tensor": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(vector, weight, output_shape=self.input_shapes[layer_index], strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(vector, weight, strides=[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1], padding=self.cnn_params[layer_index]['padding'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.sizes[layer_index], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_64": {
                "value": {
                    "value": "net_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_143": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "self.input_shapes[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.cnn_params[layer_index]['padding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_150": {
                "variable": {
                    "value": "return_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vector, self.output_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vector, self.input_shapes[layer_index])",
                            "Call"
                        ],
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights[layer_index]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(weight)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weight)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.cnn_params[layer_index]['stride'], self.cnn_params[layer_index]['stride'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.cnn_params[layer_index]['padding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "small_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(net_biases[i], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/experimental/certification/optimization.py": {
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "self.penalty_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.eig_init_vec_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1 + self.dual_object.dual_index[-1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.smooth_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.eig_num_iter_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_61": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eig_vals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_70": {
                "variable": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(eig_vals, self.smooth_placeholder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "scaling_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.divide(eig_vals, self.smooth_placeholder))",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_74": {
                "variable": {
                    "value": "eig_vec_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(eig_vectors, tf.diag(tf.sqrt(exp_eig_vals)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(scaling_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_graph_99": {
                "variable": {
                    "value": "min_eigen_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.minimum_eigen_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_148": {
                "variable": {
                    "value": "self.stopped_eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "variable": {
                    "value": "self.eig_val_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(self.stopped_eig_vec_estimate)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.dual_object.get_psd_product(self.stopped_eig_vec_estimate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_159": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_207": {
                "variable": {
                    "value": "self.proj_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "proj_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "tensor": {
                    "value": "eig_vectors[:, index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[eig_vectors.shape[0].value, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "tf.reduce_sum(eig_vec_smooth, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[eig_vec_smooth.shape[0].value, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "input_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_165": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_70": {
                "x": {
                    "value": "eig_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.smooth_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "eig_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.diag(tf.sqrt(exp_eig_vals))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "x": {
                    "value": "scaling_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(exp_eig_vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "eig_vec_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.matmul(eig_vectors, tf.diag(tf.sqrt(exp_eig_vals))), tf.sqrt(scaling_factor))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_93": {
                "pred": {
                    "value": "self.smooth_placeholder < 1e-08",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "self.tf_min_eig_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "self.tf_smooth_eig_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "self.eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.dual_object.matrix_m_dimension, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_151": {
                "a": {
                    "value": "self.stopped_eig_vec_estimate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_167": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MkDir_212": {
                "dirname": {
                    "value": "self.params['stats_folder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_273": {
                "msg": {
                    "value": "Current inner step: %d, optimization stats: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.current_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'total_objective': float(self.current_total_objective), 'unconstrained_objective': float(self.current_unconstrained_objective), 'min_eig_val_estimate': float(self.current_eig_val_estimate)}",
                            "Dict"
                        ],
                        [
                            "json.dumps(stats)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_314": {
                "msg": {
                    "value": "Running outer step %d with penalty %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.current_outer_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "penalty_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['init_penalty']",
                            "Subscript"
                        ],
                        [
                            "penalty_val * self.params['beta']",
                            "BinOp"
                        ],
                        [
                            "penalty_val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_75": {
                "diagonal": {
                    "value": "tf.sqrt(exp_eig_vals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_157": {
                "x": {
                    "value": "tf.maximum(-self.penalty_placeholder * self.eig_val_estimate, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_169": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.params['momentum_parameter']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_174": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_211": {
                "dirname": {
                    "value": "self.params['stats_folder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "x": {
                    "value": "exp_eig_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.divide(eig_vals, self.smooth_placeholder))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_158": {
                "x": {
                    "value": "-self.penalty_placeholder * self.eig_val_estimate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_201": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_quad[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_205": {
                "features": {
                    "value": "self.dual_object.lambda_lu[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_190": {
                "x": {
                    "value": "self.dual_object.positive_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.dual_object.lambda_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_192": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_pos[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_195": {
                "x": {
                    "value": "self.dual_object.negative_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.dual_object.lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_197": {
                "x": {
                    "value": "self.dual_object.switch_indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.dual_object.lambda_neg[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_202": {
                "features": {
                    "value": "self.dual_object.lambda_quad[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_193": {
                "features": {
                    "value": "self.dual_object.lambda_pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_198": {
                "features": {
                    "value": "self.dual_object.lambda_neg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/experimental/certification/tests/dual_formulation_test.py": {
        "tensorflow": {
            "matmul_197": {
                "variable": {
                    "value": "explicit_product",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matrix_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dual_formulation_object.get_full_psd_matrix()",
                            "Call"
                        ],
                        [
                            "dual_formulation_object.get_full_psd_matrix()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "six_dim_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=(6, 1), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/experimental/certification/tests/nn_test.py": {
        "tensorflow": {}
    },
    "cleverhans/cleverhans/experimental/certification/tests/optimization_test.py": {
        "tensorflow": {
            "reshape_60": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.get_variable('nu', initializer=200.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_64": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "name": {
                    "value": "lambda_pos0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "name": {
                    "value": "lambda_pos1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "name": {
                    "value": "lambda_neg0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "name": {
                    "value": "lambda_neg1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "name": {
                    "value": "lambda_quad0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "name": {
                    "value": "lambda_quad1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "name": {
                    "value": "lambda_lu0",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(2, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "name": {
                    "value": "lambda_lu1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.random.uniform(0, 0.1, size=(3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/experimental/certification/tests/utils_test.py": {
        "tensorflow": {
            "to_graph_29": {
                "variable": {
                    "value": "min_eigen_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.minimum_eigen_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "tf_num_iter",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "tf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_graph_44": {
                "variable": {
                    "value": "min_eigen_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "entity": {
                    "value": "utils.tf_lanczos_smallest_eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "init_vec_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(MATRIX_DIMENTION, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_27": {
                "a": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 2.0], [2.0, 5.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.random((MATRIX_DIMENTION, MATRIX_DIMENTION))",
                            "Call"
                        ],
                        [
                            "matrix + matrix.T",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(2, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_42": {
                "a": {
                    "value": "tf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(x, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(2, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/experimental/certification/utils.py": {
        "tensorflow": {
            "reshape_111": {
                "variable": {
                    "value": "current_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(tf.transpose(current_vector), grad) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_118": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_119": {
                "variable": {
                    "value": "grad_norm_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "directional_second_derivative",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "2 * tf.matmul(tf.transpose(norm_grad), vector_prod_fn(norm_grad))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_178": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x)",
                            "Call"
                        ],
                        [
                            "eig_one_step(x, learning_rate, vector_prod_fn)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorArray_216": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorArray_218": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorArray_220": {
                "variable": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "(matrix_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_233": {
                "variable": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_ * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_vectors.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, matrix_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_265": {
                "variable": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=0, dynamic_size=True, element_shape=())",
                            "Call"
                        ],
                        [
                            "beta.stack()",
                            "Call"
                        ],
                        [
                            "beta.write(i - 1, cur_beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "eigh_270": {
                "variable": {
                    "value": "(eigvals, eigvecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tridiag_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(alpha) + tf.pad(offdiag_submatrix, [[0, 1], [1, 0]]) + tf.pad(offdiag_submatrix, [[1, 0], [0, 1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_273": {
                "variable": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(eigvecs[:, 0], (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=1, dynamic_size=True, element_shape=(matrix_dim, 1))",
                            "Call"
                        ],
                        [
                            "q_vectors.write(0, w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_vectors.stack(), (-1, matrix_dim))",
                            "Call"
                        ],
                        [
                            "q_vectors.write(i, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(eigvecs[:, 0], (1, -1)), q_vectors)",
                            "Call"
                        ],
                        [
                            "smallest_eigvec / tf.norm(smallest_eigvec)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(smallest_eigvec, (matrix_dim, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(matrix_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_19": {
                "diagonal": {
                    "value": "tf.reshape(diag_elements, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_nu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "nu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "1.0 * dual_var_init_val['nu']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_159": {
                "x": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_241": {
                "variable": {
                    "value": "cur_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_251": {
                "variable": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_ * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "tensor": {
                    "value": "diag_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diag_elements",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_224": {
                "tensor": {
                    "value": "initial_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=(matrix_dim, 1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "initial_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_228": {
                "tensor": {
                    "value": "initial_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=(matrix_dim, 1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "initial_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_mul_235": {
                "scalar": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "pad_268": {
                "tensor": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(beta)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "tensor": {
                    "value": "eigvecs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_275": {
                "tensor": {
                    "value": "smallest_eigvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(eigvecs[:, 0], (1, -1)), q_vectors)",
                            "Call"
                        ],
                        [
                            "smallest_eigvec / tf.norm(smallest_eigvec)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(smallest_eigvec, (matrix_dim, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_111": {
                "a": {
                    "value": "tf.transpose(current_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "a": {
                    "value": "tf.transpose(current_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * vector_prod_fn(current_vector)",
                            "BinOp"
                        ],
                        [
                            "grad - current_vector * tf.matmul(tf.transpose(current_vector), grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_127": {
                "a": {
                    "value": "tf.transpose(norm_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "vector_prod_fn(norm_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_257": {
                "scalar": {
                    "value": "cur_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(w_ * w)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_vector / tf.norm(initial_vector)",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ],
                        [
                            "w / cur_beta",
                            "BinOp"
                        ],
                        [
                            "w_",
                            "variable"
                        ]
                    ]
                }
            },
            "diag_266": {
                "diagonal": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype, size=1, dynamic_size=True, element_shape=())",
                            "Call"
                        ],
                        [
                            "alpha.write(0, cur_alpha)",
                            "Call"
                        ],
                        [
                            "alpha.stack()",
                            "Call"
                        ],
                        [
                            "alpha.write(i, cur_alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_267": {
                "tensor": {
                    "value": "offdiag_submatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(beta)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "name": {
                    "value": "'lambda_pos_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "name": {
                    "value": "'lambda_neg_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "name": {
                    "value": "'lambda_quad_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "name": {
                    "value": "'lambda_lu_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, random_init_variance, size=(neural_net_params_object.sizes[i], 1)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "name": {
                    "value": "'lambda_pos_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_pos'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "name": {
                    "value": "'lambda_neg_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_neg'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "'lambda_quad_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_quad'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "name": {
                    "value": "'lambda_lu_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "dual_var_init_val['lambda_lu'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(init_dual_file).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "a": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "a": {
                    "value": "current_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_vector + step * norm_grad",
                            "BinOp"
                        ],
                        [
                            "current_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_127": {
                "a": {
                    "value": "norm_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / grad_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_150": {
                "input_tensor": {
                    "value": "current_vector * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "input_tensor": {
                    "value": "current_vector * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/future/tf2/attacks/fast_gradient_method.py": {
        "tensorflow": {
            "multiply_127": {
                "variable": {
                    "value": "scaled_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimize_linear(grad, eps, ord)",
                            "Call"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(optimal_perturbation)",
                            "Call"
                        ],
                        [
                            "sign * tied_for_max / num_ties",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_55": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_108": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(model_fn, x, y, targeted)",
                            "Call"
                        ],
                        [
                            "g.gradient(loss, x)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_112": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimize_linear(grad, eps, ord)",
                            "Call"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(optimal_perturbation)",
                            "Call"
                        ],
                        [
                            "sign * tied_for_max / num_ties",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GradientTape_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_114": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(model_fn, x, y, targeted)",
                            "Call"
                        ],
                        [
                            "g.gradient(loss, x)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_115": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(model_fn, x, y, targeted)",
                            "Call"
                        ],
                        [
                            "g.gradient(loss, x)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_116": {
                "variable": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(grad)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_117": {
                "variable": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(abs_grad, max_abs_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tied_for_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(tf.equal(abs_grad, max_abs_grad), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "greater_equal_36": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_equal_39": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_121": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(tf.square(grad), axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_117": {
                "x": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(abs_grad, axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_122": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, tf.reduce_sum(tf.square(grad), axis, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_121": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(model_fn, x, y, targeted)",
                            "Call"
                        ],
                        [
                            "g.gradient(loss, x)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/future/tf2/attacks/projected_gradient_descent.py": {
        "tensorflow": {
            "uniform_62": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-rand_minmax",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "rand_minmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "variable"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_70": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "fast_gradient_method(model_fn, adv_x, eps_iter, ord, clip_min=clip_min, clip_max=clip_max, y=y, targeted=targeted)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_90": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "fast_gradient_method(model_fn, adv_x, eps_iter, ord, clip_min=clip_min, clip_max=clip_max, y=y, targeted=targeted)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_54": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_equal_57": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/future/tf2/attacks/spsa.py": {
        "tensorflow": {
            "as_dtype_5": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_205": {
                "variable": {
                    "value": "highest_nonlabel_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_with_target_label_neg_inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_logits - logit_mask * 99999",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "uniform_277": {
                "variable": {
                    "value": "init_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(input_image)",
                    "type": "Call",
                    "possible_values": []
                },
                "minval": {
                    "value": "tf.cast(-epsilon, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tf.cast(epsilon, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_320": {
                "variable": {
                    "value": "flat_init_optim_state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "init_optim_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.init_state([init_perturbation])",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_321": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(0.0), init_perturbation, flat_init_optim_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_119": {
                "variable": {
                    "value": "(_, all_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond",
                            "Call"
                        ],
                        [
                            "cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[0, tf.TensorArray(size=self._num_iters, dtype=tf_dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "all_grads.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_192": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_196": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label, depth=nb_classes, axis=-1)",
                            "Call"
                        ],
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "tf.cast(logit_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_198": {
                "variable": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logit_mask * model_logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_224": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbation",
                            "Method Argument"
                        ],
                        [
                            "perturbation",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_225": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_sequence_as_287": {
                "variable": {
                    "value": "optim_state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "init_optim_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.init_state([init_perturbation])",
                            "Call"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_optim_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_optim_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_less_equal_337": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "final_perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(cond, loop_body, loop_vars=(tf.constant(0.0), init_perturbation, flat_init_optim_state), parallel_iterations=1, back_prop=False, maximum_iterations=num_steps)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(perturbation_max, final_perturbation.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "'final_perturbation must change no pixel by more than %s' % perturbation_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_op_345": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_356": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + static_x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "loss_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_fn(x + delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self._num_samples] + [1] * (len(x_shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(all_grads.stack(), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_vals * delta_x, axis=0) / delta",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(avg_grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_220": {
                "control_inputs": {
                    "value": "[tf.debugging.assert_less_equal(input_image, tf.cast(clip_max, input_image.dtype)), tf.debugging.assert_greater_equal(input_image, tf.cast(clip_min, input_image.dtype))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_277": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_306": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "wrapped_loss_fn(projected_perturbation)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_318": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "i in range(len(x))",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_steps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_less_equal_350": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_max, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_greater_equal_351": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_min, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_354": {
                "control_inputs": {
                    "value": "[check_diff] + check_range",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_75": {
                "x": {
                    "value": "tf.random.uniform([self._num_samples] + x_shape[1:], minval=-1.0, maxval=1.0, dtype=tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_274": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "print_275": {
                "*inputs": {
                    "value": "'Starting PGD attack with epsilon: %s' % epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_278": {
                "x": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_279": {
                "x": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_313": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(loss, early_stop_loss_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : float(num_steps)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "flatten_315": {
                "structure": {
                    "value": "new_optim_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(wrapped_loss_fn, [perturbation], optim_state)",
                            "Call"
                        ],
                        [
                            "{'t': optim_state['t'] + 1.0, 'm': [None] * len(x), 'u': [None] * len(x)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_339": {
                "x": {
                    "value": "perturbation_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * 1.1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "final_perturbation.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_350": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_351": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_76": {
                "shape": {
                    "value": "[self._num_samples] + x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "loss_vals * delta_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_165": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_less_equal_221": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_max, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_greater_equal_222": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_min, input_image.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_324": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TensorArray_123": {
                "size": {
                    "value": "self._num_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_155": {
                "x": {
                    "value": "self.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_156": {
                "x": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_221": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_222": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_309": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "print_310": {
                "*inputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "Total batch loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_313": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(wrapped_loss_fn(projected_perturbation), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "early_stop_loss_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_157": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['u'][i] / (1.0 - tf.pow(self.beta_2, t))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/future/tf2/utils_tf.py": {
        "tensorflow": {
            "clip_by_value_20": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_31": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.divide(eps, norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, tf.reduce_sum(tf.square(eta), axis, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_31": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.maximum(avoid_zero_div, tf.reduce_sum(tf.square(eta), axis, keepdims=True)))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_29": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(tf.square(eta), axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "tf.square(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_29": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/initializers.py": {
        "tensorflow": {
            "rsqrt_21": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.reduce_prod(shape[:-1]), tf.float32) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_21": {
                "x": {
                    "value": "tf.reduce_prod(shape[:-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_21": {
                "input_tensor": {
                    "value": "shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/loss.py": {
        "tensorflow": {
            "maximum_190": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf_distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "mix_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf_distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_195": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=ym, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_219": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_220": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d1[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_234": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ],
                        [
                            "terms",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_302": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_386": {
                "variable": {
                    "value": "sqr_norm_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.pow(A, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, batchA]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_387": {
                "variable": {
                    "value": "sqr_norm_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.pow(B, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batchB, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_388": {
                "variable": {
                    "value": "inner_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_390": {
                "variable": {
                    "value": "tile_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqr_norm_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.pow(A, 2), 1), [1, batchA])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batchB, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_391": {
                "variable": {
                    "value": "tile_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqr_norm_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.pow(B, 2), 1), [batchB, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, batchA]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_402": {
                "variable": {
                    "value": "normalized_A",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_403": {
                "variable": {
                    "value": "normalized_B",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_404": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "normalized_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(A, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "normalized_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(B, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_477": {
                "variable": {
                    "value": "summed_masked_pick_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "SNNLCrossEntropy.masked_pick_probability(x, y, temp, cos_distance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_495": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "temp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_503": {
                "variable": {
                    "value": "updated_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, dtype=tf.float32, trainable=False, name='temp')",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.subtract(t, 0.1 * tf.gradients(ent_loss, t)[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_113": {
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ],
                        [
                            "terms",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_222": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d2[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_423": {
                "x": {
                    "value": "-(distance_matrix / temp)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_450": {
                "x": {
                    "value": "tf.squeeze(tf.equal(y, tf.expand_dims(y2, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_479": {
                "input_tensor": {
                    "value": "-tf.log(SNNLCrossEntropy.STABILITY_EPS + summed_masked_pick_prob)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_186": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_216": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_231": {
                "t": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_299": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_383": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_384": {
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_386": {
                "input_tensor": {
                    "value": "tf.pow(A, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "input_tensor": {
                    "value": "tf.pow(B, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_438": {
                "num_rows": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_450": {
                "input": {
                    "value": "tf.equal(y, tf.expand_dims(y2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_500": {
                "x": {
                    "value": "initial_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_temp",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, dtype=tf.float32, trainable=False, name='temp')",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "subtract_503": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, dtype=tf.float32, trainable=False, name='temp')",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.1 * tf.gradients(ent_loss, t)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_216": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_299": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_386": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_387": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_440": {
                "input": {
                    "value": "tf.reduce_sum(f, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_450": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - self.smoothing * (y - 1.0 / tf.cast(y.shape[-1], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(y2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_480": {
                "x": {
                    "value": "SNNLCrossEntropy.STABILITY_EPS + summed_masked_pick_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_513": {
                "structure": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_514": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - self.smoothing * (y - 1.0 / tf.cast(y.shape[-1], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_518": {
                "inputs": {
                    "value": "layers_SNNL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[loss_fn(tf.layers.flatten(layer), tf.argmax(y, axis=1), self.temperature, self.cos_distance) for layer in self.layers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_168": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_438": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "(x, self.attack.generate(x, **attack_params))",
                            "Tuple"
                        ],
                        [
                            "(x[1],)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_440": {
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SNNLCrossEntropy.fits(x, x, temp, cos_distance) - tf.eye(tf.shape(x)[0])",
                            "BinOp"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_450": {
                "input": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_161": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_265": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_328": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "(x, self.attack.generate(x, **attack_params))",
                            "Tuple"
                        ],
                        [
                            "(x[1],)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_503": {
                "ys": {
                    "value": "ent_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SNNLCrossEntropy.SNNL(x, y, inverse_temp(t), cos_distance)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, dtype=tf.float32, trainable=False, name='temp')",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_189": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "(x, self.attack.generate(x, **attack_params))",
                            "Tuple"
                        ],
                        [
                            "(x[1],)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "tuple([x])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_163": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_267": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/model.py": {
        "tensorflow": {
            "get_collection_129": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_77": {
                "input": {
                    "value": "self.get_logits(x, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_88": {
                "variable": {
                    "value": "min_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_89": {
                "variable": {
                    "value": "max_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_134": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_232": {
                "variable": {
                    "value": "min_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_233": {
                "variable": {
                    "value": "max_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_95": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "executing_eagerly_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_239": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d[self.O_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ],
                        [
                            "self.callable_fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_94": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[utils_tf.assert_greater_equal(min_prob, tf.cast(0.0, min_prob.dtype)), utils_tf.assert_less_equal(max_prob, tf.cast(1.0, min_prob.dtype))]",
                            "List"
                        ],
                        [
                            "[utils_tf.assert_greater_equal(min_prob, tf.cast(0.0, min_prob.dtype)), utils_tf.assert_less_equal(max_prob, tf.cast(1.0, max_prob.dtype))]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_98": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_238": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[utils_tf.assert_greater_equal(min_prob, tf.cast(0.0, min_prob.dtype)), utils_tf.assert_less_equal(max_prob, tf.cast(1.0, min_prob.dtype))]",
                            "List"
                        ],
                        [
                            "[utils_tf.assert_greater_equal(min_prob, tf.cast(0.0, min_prob.dtype)), utils_tf.assert_less_equal(max_prob, tf.cast(1.0, max_prob.dtype))]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_91": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "min_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_93": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "min_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_235": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "min_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_237": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/model_zoo/all_convolutional.py": {
        "tensorflow": {
            "conv2d_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.nb_filters << scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.nb_filters << scale + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling2d_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_filters << scale + 1, **conv_args)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(y, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(y, self.nb_classes, **conv_args)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(y, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/model_zoo/basic_cnn.py": {
        "tensorflow": {
            "dense_39": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.layers.flatten(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.HeReLuNormalInitializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_40": {
                "structure": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_conv(x, self.nb_filters, 8, strides=2, padding='same')",
                            "Call"
                        ],
                        [
                            "my_conv(y, 2 * self.nb_filters, 6, strides=2, padding='valid')",
                            "Call"
                        ],
                        [
                            "my_conv(y, 2 * self.nb_filters, 5, strides=1, padding='valid')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_43": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.layers.flatten(y), self.nb_classes, kernel_initializer=initializers.HeReLuNormalInitializer)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/model_zoo/deep_k_nearest_neighbors/dknn.py": {
        "tensorflow": {
            "py_func_234": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.fprop_np",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_integer_418": {
                "name": {
                    "value": "nb_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs to train model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_419": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of training batches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_420": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_422": {
                "name": {
                    "value": "nb_cali",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "750",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of calibration points for the DkNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_424": {
                "name": {
                    "value": "neighbors",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "75",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of neighbors per layer for the DkNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_349": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_351": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "dknn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_374": {
                "variable": {
                    "value": "layer_sym",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "model.get_layer(x, layer)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/model_zoo/madry_lab_challenges/cifar10_model.py": {
        "tensorflow": {
            "zeros_124": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "(None",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "(None",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "debug_268": {
                "msg": {
                    "value": "image after unit %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_278": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_285": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(2.0 / n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_294": {
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_299": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "map_fn_132": {
                "variable": {
                    "value": "input_standardized",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.image.per_image_standardization(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_211": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim, self.num_hid]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.variance_scaling(distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_215": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_hid]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.constant()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_221": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [self.dim, self.num_hid], initializer=tf.initializers.variance_scaling(distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "self.make_vars()",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [self.num_hid], initializer=tf.initializers.constant())",
                            "Call"
                        ],
                        [
                            "self.make_vars()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_226": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.name",
                            "Attribute"
                        ],
                        [
                            "layer.__class__.__name__ + str(i)",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_261": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_262": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.name",
                            "Attribute"
                        ],
                        [
                            "layer.__class__.__name__ + str(i)",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_289": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [filter_size, filter_size, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(2.0 / n)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 2]",
                            "List"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_294": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_312": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_329": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "_batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], _stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], _stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], _stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], _stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "_batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "_global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "unit_1_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "unit_2_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "unit_3_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "'unit_1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "'unit_2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "'unit_3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_277": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_287": {
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "per_image_standardization_133": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/model_zoo/madry_lab_challenges/make_cifar10_joblib.py": {
        "tensorflow": {
            "latest_checkpoint_29": {
                "variable": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_string_71": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "default_ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cifar10_root, 'models/model_0')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Checkpoint directory to load",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_74": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_55": {
                "ref": {
                    "value": "var2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var2 in enumerate(model2.get_vars())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_vars()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/model_zoo/soft_nearest_neighbor_loss/SNNL_regularized_model.py": {
        "tensorflow": {
            "placeholder_29": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_45": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.layers.flatten(conv3)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializers.HeReLuNormalInitializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_46": {
                "structure": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_conv(conv2, 2 * self.nb_filters, 5, strides=1, padding='valid')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_49": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.layers.flatten(conv3), self.nb_classes, kernel_initializer=initializers.HeReLuNormalInitializer)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/picklable_model.py": {
        "tensorflow": {
            "matmul_201": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_279": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_306": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_401": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_430": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_467": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_468": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(x - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_564": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(tf.square(x), axis=axis, keepdims=True) - tf.square(mean)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_565": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(tf.square(x), axis=axis, keepdims=True) - tf.square(mean)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_569": {
                "variable": {
                    "value": "min_stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(num_pixels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_570": {
                "variable": {
                    "value": "pixel_value_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(variance)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.to_float(num_pixels))",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_573": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pixel_value_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "variable"
                        ]
                    ]
                }
            },
            "div_574": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pixel_value_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(stddev, min_stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_751": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_753": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size,) + self.expanded_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "moments_754": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_756": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "moments_785": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tuple(self.input_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "variable": {
                    "value": "squared_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_254": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-07 + squared_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_322": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.leak * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_342": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_361": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_383": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_420": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_437": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_451": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_469": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_min(x), mean, tf.reduce_max(x), std]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Print layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_697": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_701": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_719": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_849": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_853": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_468": {
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_563": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_569": {
                "x": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_prod(tf.shape(x)[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_638": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "include_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.include_prob",
                            "Attribute"
                        ],
                        [
                            "dropout_dict[self.name]",
                            "Subscript"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_755": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_786": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.layers[-1].get_output_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_186": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_253": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_322": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_468": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_470": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_470": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_567": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "tf.subtract(x, pixel_value_offset)",
                            "Call"
                        ],
                        [
                            "tf.div(x, pixel_value_scale)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_186": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_403": {
                "x": {
                    "value": "(1.0 - mask) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_186": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/plot/pyplot_image.py": {
        "tensorflow": {
            "placeholder_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_127": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.lin_space(float(min_epsilon), float(max_epsilon), num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_points, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/serial.py": {
        "tensorflow": {
            "Variable_42": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_default_session_45": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "d['var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_session_53": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_87": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_112": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_172": {
                "variable": {
                    "value": "trainable_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_177": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.MODEL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "executing_eagerly_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/train.py": {
        "tensorflow": {
            "placeholder_162": {
                "variable": {
                    "value": "epoch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "batch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_168": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_decay(epoch_tf, batch_tf)",
                            "Call"
                        ],
                        [
                            "0.998",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + y_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_159": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_136": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            },
            "get_collection_159": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_169": {
                "control_inputs": {
                    "value": "[train_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_175": {
                "initial_value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_178": {
                "ref": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_180": {
                "control_inputs": {
                    "value": "param_to_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(tmp, param) for (tmp, param) in safe_zip(tmp_params, var_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_183": {
                "control_inputs": {
                    "value": "avg_to_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(param, avg) for (param, avg) in safe_zip(var_list, avg_params)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_300": {
                "inputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[g for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "assign_181": {
                "ref": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_184": {
                "ref": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/utils_keras.py": {
        "tensorflow": {
            "image_data_format_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_data_format_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/utils_pytorch.py": {
        "tensorflow": {
            "get_default_graph_33": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_30": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad-' + '%0x' % getrandbits(30 * 4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_38": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tout",
                            "Method Argument"
                        ]
                    ]
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_83": {
                "func": {
                    "value": "_bprop_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_bprop_fn",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[op.inputs[0], grads_in]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_108": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "eta.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_61": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_72": {
                "variable": {
                    "value": "grads_in_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_state['logits'] * grads_in_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_111": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_125": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(1.0, dtype=eta.dtype, device=eta.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_175": {
                "variable": {
                    "value": "optimal_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_116": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12, dtype=eta.dtype, device=eta.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1e-12, dtype=grad.dtype, device=grad.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_155": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_177": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_178": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_180": {
                "variable": {
                    "value": "abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_184": {
                "variable": {
                    "value": "(max_abs_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_grad.view(grad.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_121": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(avoid_zero_div, torch.sum(eta ** 2, dim=reduc_ind, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "eta.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_ties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_mask",
                            "variable"
                        ],
                        [
                            "torch.sum(num_ties, red_scalar, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "red_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_ind",
                            "variable"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "all_193": {
                "input": {
                    "value": "opt_pert_norm == torch.ones_like(opt_pert_norm)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_195": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12, dtype=eta.dtype, device=eta.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1e-12, dtype=grad.dtype, device=grad.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_118": {
                "input": {
                    "value": "torch.abs(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.size())))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "allclose_205": {
                "input": {
                    "value": "opt_pert_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimal_perturbation.pow(2).sum(dim=red_ind, keepdim=True).sqrt()",
                            "Call"
                        ],
                        [
                            "optimal_perturbation.abs().sum(dim=red_ind)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "one_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(square <= avoid_zero_div).to(torch.float) * opt_pert_norm + (square > avoid_zero_div).to(torch.float)",
                            "BinOp"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_118": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_121": {
                "input": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12, dtype=eta.dtype, device=eta.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1e-12, dtype=grad.dtype, device=grad.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_193": {
                "input": {
                    "value": "opt_pert_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimal_perturbation.pow(2).sum(dim=red_ind, keepdim=True).sqrt()",
                            "Call"
                        ],
                        [
                            "optimal_perturbation.abs().sum(dim=red_ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_197": {
                "input": {
                    "value": "grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(grad.size())))",
                            "Call"
                        ],
                        [
                            "list(range(1, len(grad.size())))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_199": {
                "input": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(avoid_zero_div, torch.sum(grad ** 2, red_ind, keepdim=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_123": {
                "input": {
                    "value": "eta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.size())))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/utils_tf.py": {
        "tensorflow": {
            "global_variables_61": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_429": {
                "variable": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(clip, mul(grad, 0), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_433": {
                "variable": {
                    "value": "clip_low",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(x, tf.cast(clip_min, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(signed_grad, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_435": {
                "variable": {
                    "value": "clip_high",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(x, tf.cast(clip_max, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater(signed_grad, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_437": {
                "variable": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.less_equal(x, tf.cast(clip_min, x.dtype)), tf.less(signed_grad, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "clip_high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.greater_equal(x, tf.cast(clip_max, x.dtype)), tf.greater(signed_grad, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_438": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(clip_low, clip_high)",
                            "Call"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "mul(grad, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(clip, mul(grad, 0), grad)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_560": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_226": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_283": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_335": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_336": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_339": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.sqrt(epsilon) + square_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_340": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(np.sqrt(epsilon) + square_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_349": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_350": {
                "variable": {
                    "value": "p_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_351": {
                "variable": {
                    "value": "q_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_prod_489": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_501": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.uniform((shape[0], 1), dtype=dtype, seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / tf.cast(dim, dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_672": {
                "t": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(mu - js * (cumsums - eps), 0), eta.dtype)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_value_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast_clip(clip_value_min)",
                            "Call"
                        ],
                        [
                            "clip_value_min",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_value_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast_clip(clip_value_max)",
                            "Call"
                        ],
                        [
                            "clip_value_max",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_726": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(a, b.dtype)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "b.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_729": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(b, a.dtype)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "a.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_775": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "predictions[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_variable_initialized_64": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_141": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_186": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_334": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_341": {
                "tensor": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, x_inv_norm)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_348": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_loss_354": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(reduce_sum(p * (p_log - q_log), axis=1), name=name)",
                            "Call"
                        ],
                        [
                            "model_loss(y, predictions)",
                            "Call"
                        ],
                        [
                            "(loss + model_loss(y, predictions_adv)) / 2",
                            "BinOp"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.REGULARIZATION_LOSSES",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_380": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(eps, eta.dtype)",
                            "Call"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_382": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.shape(eta)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_383": {
                "variable": {
                    "value": "eta_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_384": {
                "variable": {
                    "value": "abs_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eta_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(eta, (-1, dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_391": {
                "variable": {
                    "value": "cumsums",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.sort(-abs_eta, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.nn.top_k(abs_eta, k=dim, sorted=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_392": {
                "variable": {
                    "value": "js",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(1, tf.range(1, dim + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_393": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(mu - js * (cumsums - eps), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_395": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t * cumsums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_396": {
                "variable": {
                    "value": "rho_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "t * cumsums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_397": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rho_val - eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(1 + rho, eta.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_399": {
                "variable": {
                    "value": "eta_sgn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eta_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(eta, (-1, dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_401": {
                "variable": {
                    "value": "eta_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eta_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eta_sgn * tf.maximum(abs_eta - theta[:, tf.newaxis], 0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(eta_proj, tf.shape(eta))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(eta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_403": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(eta.get_shape())))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_404": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(norm, eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "eta_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eta_sgn * tf.maximum(abs_eta - theta[:, tf.newaxis], 0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(eta_proj, tf.shape(eta))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_equal_433": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_min, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_434": {
                "x": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_435": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(clip_max, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_436": {
                "x": {
                    "value": "signed_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_494": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_605": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_739": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_less_equal_740": {
                "x": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_748": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_greater_equal_749": {
                "x": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_757": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_758": {
                "x": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variables_initializer_73": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for (var, init) in zip(global_vars, is_initialized) if not init]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_collection_141": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_226": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_227": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_338": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_409": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, reduce_sum(tf.square(eta), reduc_ind, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_415": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "div(eps, norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_433": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_435": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_497": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(x), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_501": {
                "shape": {
                    "value": "(shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_503": {
                "tensor": {
                    "value": "w * x / norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape()",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_664": {
                "variable": {
                    "value": "clip_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "clip.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_337": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "divide_392": {
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.range(1, dim + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_393": {
                "x": {
                    "value": "mu - js * (cumsums - eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_397": {
                "x": {
                    "value": "1 + rho",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_400": {
                "x": {
                    "value": "abs_eta - theta[:, tf.newaxis]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_401": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_403": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_404": {
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.maximum(avoid_zero_div, reduce_sum(tf.square(eta), reduc_ind, keepdims=True)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(eta), reduc_ind)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(x), axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(x), axis=-1, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(eps, eta.dtype)",
                            "Call"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_494": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_502": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(eta)[1:])",
                            "Call"
                        ],
                        [
                            "tf.reduce_prod(shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_566": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_566": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_382": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_387": {
                "values": {
                    "value": "-abs_eta",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "top_k_390": {
                "input": {
                    "value": "abs_eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(eta_flat)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(eta)[1:])",
                            "Call"
                        ],
                        [
                            "tf.reduce_prod(shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_409": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_497": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_666": {
                "x": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(clip_low, clip_high)",
                            "Call"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_826": {
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_497": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "random_laplace((shape[0], dim), loc=1.0, scale=1.0, dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((shape[0], dim), dtype=dtype, seed=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_410": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.greater(norm, eps), eta_proj, eta)",
                            "Call"
                        ],
                        [
                            "eta",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/utils_tfe.py": {
        "tensorflow": {
            "AdamOptimizer_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_121": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_192": {
                "variable": {
                    "value": "cur_corr_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(batch_y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_185": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + X_test.shape[1:], dtype=X_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_186": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + Y_test.shape[1:], dtype=Y_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_216": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(tf_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_218": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(tf_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_93": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_94": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "input": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_193": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(batch_adv_x)",
                            "Call"
                        ],
                        [
                            "model.get_probs(batch_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/cifar10_tutorial_tf.py": {
        "tensorflow": {
            "Session_79": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**config_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_69": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_180": {
                "variable": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack(x)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/evaluate_pickled_model.py": {
        "tensorflow": {
            "Session_51": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**config_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_41": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_blackbox.py": {
        "tensorflow": {
            "Session_220": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_54": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_115": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, img_rows, img_cols, nchannels))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_dense(y, self.nb_classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_tutorial_cw.py": {
        "tensorflow": {
            "Session_72": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_69": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_117": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_tutorial_jsma.py": {
        "tensorflow": {
            "Session_63": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_60": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_tutorial_keras.py": {
        "tensorflow": {
            "ConfigProto_54": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_61": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_52": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_session_62": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_175": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgsm.generate(model.input, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(model.input, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "categorical_crossentropy_187": {
                "variable": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_192": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgsm.generate(model.input, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(model.input, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "categorical_crossentropy_196": {
                "variable": {
                    "value": "cross_ent_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_adv)",
                            "Call"
                        ],
                        [
                            "model(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_data_format_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "categorical_accuracy_179": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_adv)",
                            "Call"
                        ],
                        [
                            "model(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_96": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LEARNING_RATE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_138": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LEARNING_RATE",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_tutorial_keras_tf.py": {
        "tensorflow": {
            "Session_74": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_120": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TRAIN_DIR",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_150": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_68": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_session_75": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_126": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_data_format_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_tutorial_picklable.py": {
        "tensorflow": {
            "Session_78": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**config_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_68": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_191": {
                "variable": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack(x)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_tutorial_pytorch.py": {
        "tensorflow": {
            "Session_144": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "x_op",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "run_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BATCH_SIZE",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BATCH_SIZE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_97": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "torch_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LEARNING_RATE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_65": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 7 * 7)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_110": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_model(xs)",
                            "Call"
                        ],
                        [
                            "torch_model(xs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "Variable(ys)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "ys.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(ys)",
                            "Call"
                        ],
                        [
                            "ys.cuda()",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ]
                    ]
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_60": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_tutorial_tf.py": {
        "tensorflow": {
            "Session_80": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**config_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_70": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_171": {
                "variable": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack(x)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/mnist_tutorial_tfe.py": {
        "tensorflow": {
            "executing_eagerly_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_111": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans_tutorials/tutorial_models_tfe.py": {
        "tensorflow": {
            "Conv2D_35": {
                "variable": {
                    "value": "self.layers[conv_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.nb_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "variable": {
                    "value": "self.layers[conv_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.nb_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_43": {
                "variable": {
                    "value": "self.layers[conv_3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.nb_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_47": {
                "variable": {
                    "value": "self.layers[flatten]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_48": {
                "variable": {
                    "value": "self.layers[logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "self.nb_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "self.layer_acts[probs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.layer_acts['logits']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "shape": {
                    "value": "(32, 28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "executing_eagerly_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/RL-attack/enjoy-adv.py": {
        "tensorflow": {
            "Graph_208": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_209": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_77": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_90": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_89": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/RL-attack/model.py": {
        "tensorflow": {
            "flatten_18": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_dense(actions_hidden, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(actions_hidden, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "action_scores - tf.expand_dims(action_scores_mean, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_90": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/RL-attack/train.py": {
        "tensorflow": {
            "FileWriter_243": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "savedir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save_dir",
                            "Attribute"
                        ],
                        [
                            "tempfile.TemporaryDirectory().name",
                            "Attribute"
                        ],
                        [
                            "savedir",
                            "Method Argument"
                        ],
                        [
                            "savedir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_189": {
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "input_tensor": {
                    "value": "tf.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_240": {
                "x": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/adversarial_asr/src_combine.py": {
        "tensorflow": {
            "expand_dims_41": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(audio, axis=0)",
                            "Call"
                        ],
                        [
                            "audio",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_130": {
                "variable": {
                    "value": "input_unpack",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tf",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "features_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "src_paddings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(features)[0], tf.shape(features)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_146": {
                "variable": {
                    "value": "src_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MakeLogMel(input_unpack[i], sample_rate_tf)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, shape=[-1, 80])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features, dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "inputs.sample_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MakeLogMel(input_unpack[i], sample_rate_tf)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, shape=[-1, 80])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features, dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_134": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MakeLogMel(input_unpack[i], sample_rate_tf)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, shape=[-1, 80])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features, dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stft_168": {
                "variable": {
                    "value": "win",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "self.frame_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "frame_step": {
                    "value": "self.frame_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_170": {
                "variable": {
                    "value": "psd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * tf.abs(win / FLAGS.window_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_239": {
                "variable": {
                    "value": "self.loss_th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.loss_th_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_242": {
                "variable": {
                    "value": "self.optimizer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_step1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_243": {
                "variable": {
                    "value": "self.optimizer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_step2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_252": {
                "variable": {
                    "value": "self.train2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.train21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.train22",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_258": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[x for x in tf.global_variables() if x.name.startswith('librispeech')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_345": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[x for x in tf.global_variables() if x.name.startswith('librispeech')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConfigProto_467": {
                "variable": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_44": {
                "control_inputs": {
                    "value": "[tf.assert_equal(sample_rate, static_sample_rate)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_186": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_194": {
                "variable": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, 223200), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "self.input_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_198": {
                "variable": {
                    "value": "self.tgt_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "variable": {
                    "value": "self.sample_rate_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_sample_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_200": {
                "variable": {
                    "value": "self.th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_th",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_201": {
                "variable": {
                    "value": "self.psd_max_ori",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_psd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_202": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_203": {
                "variable": {
                    "value": "self.mask_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_205": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_206": {
                "variable": {
                    "value": "self.maxlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_207": {
                "variable": {
                    "value": "self.lr_step2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_210": {
                "variable": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones((batch_size, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_rescale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_211": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones(batch_size, dtype=np.float32) * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_214": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.identity(self.delta_large)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, self.maxlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_218": {
                "variable": {
                    "value": "self.pass_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.new_input + self.noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2 ** 15",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2 ** 15 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_236": {
                "variable": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(logits_delta - self.th[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_237": {
                "variable": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack.attack_step2(audios, trans, adv, th_batch, psd_max_batch, maxlen, sample_rate, masks, masks_freq, l, data_sub, FLAGS.lr_step2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.relu(logits_delta - self.th[i]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(loss_th, dim=0)",
                            "Call"
                        ],
                        [
                            "[np.inf] * self.batch_size",
                            "BinOp"
                        ],
                        [
                            "[np.inf] * self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_465": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_169": {
                "x": {
                    "value": "win / FLAGS.window_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_192": {
                "device_name": {
                    "value": "cluster.GetPlacer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_261": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((self.batch_size, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_264": {
                "ref": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros((self.batch_size, 223200), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_348": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((self.batch_size, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_349": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size, dtype=np.float32) * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_352": {
                "ref": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, 223200])",
                            "Call"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_468": {
                "config": {
                    "value": "tfconf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_45": {
                "x": {
                    "value": "sample_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ReadFromWav(data_sub, batch_size)",
                            "Call"
                        ],
                        [
                            "sample_rate",
                            "Method Argument"
                        ],
                        [
                            "sample_rate",
                            "Method Argument"
                        ],
                        [
                            "sample_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "static_sample_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16000",
                            "int"
                        ]
                    ]
                }
            },
            "shape_144": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MakeLogMel(input_unpack[i], sample_rate_tf)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, shape=[-1, 80])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features, dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_171": {
                "x": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "9.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "tensor": {
                    "value": "psd_max_ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psd_max_ori",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_214": {
                "input": {
                    "value": "self.delta_large",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_215": {
                "t": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2000",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_227": {
                "key": {
                    "value": "per_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_236": {
                "features": {
                    "value": "logits_delta - self.th[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_249": {
                "x": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_327": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "rescale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.rescale)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_438": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_432": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.alpha)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/facenet_adversarial_faces/facenet_fgsm.py": {
        "tensorflow": {
            "get_default_graph_20": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.victim_embedding_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.embedding_output - self.victim_embedding_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_38": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "distance > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 + (distance - threshold) * 0.5 / (4.0 - threshold)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * distance / threshold",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "variable": {
                    "value": "self.softmax_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([reverse_score, score])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_66": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_32": {
                "x": {
                    "value": "self.embedding_output - self.victim_embedding_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_43": {
                "values": {
                    "value": "[reverse_score, score]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/imagenet_featadvs/model.py": {
        "tensorflow": {
            "flatten_28": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "my_dense(y, 4096, tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "my_dense(y, 1000)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/madry_lab_challenges/cifar10/attack_model.py": {
        "tensorflow": {
            "latest_checkpoint_27": {
                "variable": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_50": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_integer_114": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_116": {
                "name": {
                    "value": "nb_samples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of samples to test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_118": {
                "name": {
                    "value": "attack_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "fgsm",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Attack type: 'fgsm'->'fast gradient sign method', 'pgd'->'projected gradient descent', 'cwl2'->'Carlini & Wagner L2'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_123": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "default_ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cifar10_root, 'models/adv_trained')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Checkpoint directory to load",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_126": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "default_data_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cifar10_root, 'cifar10_data')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Dataset directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_128": {
                "name": {
                    "value": "sweep",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Sweep epsilon or single epsilon?",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_130": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/madry_lab_challenges/mnist/attack_model.py": {
        "tensorflow": {
            "latest_checkpoint_27": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_67": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_91": {
                "name": {
                    "value": "label_smooth",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Amount to subtract from correct label and distribute among other labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_94": {
                "name": {
                    "value": "attack_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "fgsm",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Attack type: 'fgsm'->fast gradient signmethod, 'bim'->'basic iterative method'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_97": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "default_checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(*dirs)",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Checkpoint directory to load",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_99": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/madry_lab_challenges/mnist/madry_mnist_model.py": {
        "tensorflow": {
            "relu_51": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._conv2d(x, self.W_conv1) + self.b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._conv2d(h_pool1, self.W_conv2) + self.b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, self.W_fc1) + self.b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "output[self.O_PROBS]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, self.W_fc2) + self.b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "truncated_normal_75": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_80": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_76": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_81": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_85": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_89": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, self.W_fc1) + self.b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_fc2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_fc1",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/attacks_multigpu.py": {
        "tensorflow": {
            "device_36": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_60": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "model_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "init_rand",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_65": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(x), -self.eps, self.eps)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta, self.ord, self.eps)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(eta)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "clone_variable('eta', eta)",
                            "Call"
                        ],
                        [
                            "self.attack_single_step(x, eta, y_p)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clone_variable('x', x)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=x_val.shape, name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_80": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "'attack_%d' % len(self.graphs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "'step%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_103": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x, name='adv_x')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "adv_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_117": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clone_variable('x', x)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=x_val.shape, name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_102": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x, name='adv_x')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/evaluator.py": {
        "tensorflow": {
            "merge_all_125": {
                "variable": {
                    "value": "self.sum_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_175": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "attack_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack_type",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "image_124": {
                "name": {
                    "value": "att_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams.attack_type_test.split(',')",
                            "Call"
                        ],
                        [
                            "self.attack_type_test",
                            "Attribute"
                        ],
                        [
                            "self.attack_type_test",
                            "Attribute"
                        ],
                        [
                            "att_type",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack.generate(x, **params)",
                            "Call"
                        ],
                        [
                            "create_adv_by_name(model, x, att_type, sess, dataset=hparams.dataset, y=y)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/model.py": {
        "tensorflow": {
            "get_variable_18": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.name",
                            "Attribute"
                        ],
                        [
                            "layer.__class__.__name__ + str(i)",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2)))",
                            "BinOp"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(kernel_shape, stddev=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_96": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((self.num_hid,)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2)))",
                            "BinOp"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(kernel_shape, stddev=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_121": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((self.output_channels,)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_260": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.name",
                            "Attribute"
                        ],
                        [
                            "layer.__class__.__name__ + str(i)",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "initializer.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "lambda shape, dtype, partition_info: initializer",
                    "type": "Lambda",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_389": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_409": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_shape[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_413": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_shape[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_419": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_421": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-07 + tf.reduce_mean(tf.square(x), (1, 2), keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_149": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_165": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_185": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_336": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dim, self.num_hid]",
                            "List"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_362": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(self.kernel_shape) + (input_channels, self.output_channels)",
                            "BinOp"
                        ],
                        [
                            "tuple(self.kernel_shape) + (input_channels, self.output_channels)",
                            "BinOp"
                        ],
                        [
                            "kernel_shape",
                            "Method Argument"
                        ],
                        [
                            "kernel_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_pool_396": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "(1,) + tuple(self.ksize) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_289": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unify_device_name(device_name)",
                            "Call"
                        ],
                        [
                            "self.device_name",
                            "Attribute"
                        ],
                        [
                            "device_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_342": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_376": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_411": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_415": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_422": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_422": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x / std",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_93": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2)))",
                            "BinOp"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(kernel_shape, stddev=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_118": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=(0, 1, 2)))",
                            "BinOp"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(kernel_shape, stddev=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_310": {
                "ref": {
                    "value": "params[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "host_params[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/resnet_tf.py": {
        "tensorflow": {
            "get_or_create_global_step_48": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_162": {
                "variable": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hps.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_164": {
                "variable": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hps.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "momentum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_167": {
                "variable": {
                    "value": "trainable_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_168": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(xent, name='xent')",
                            "Call"
                        ],
                        [
                            "cost + self._decay()",
                            "BinOp"
                        ],
                        [
                            "cost",
                            "variable"
                        ],
                        [
                            "cost",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "trainable_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_186": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "multiply_289": {
                "variable": {
                    "value": "self.decay_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.hps.weight_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_model(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, self.hps.nb_classes)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_152": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_model(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, self.hps.nb_classes)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_310": {
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv('init_conv', x, 3, x.shape[3], 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "bn.fprop(x)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_327": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv('init_conv', x, 3, x.shape[3], 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "bn.fprop(x)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "Resnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "unit_1_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "unit_2_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "unit_3_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "costs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_227": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._conv('project', orig_x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_228": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._conv('project', orig_x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "sub3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_290": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "less_310": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv('init_conv', x, 3, x.shape[3], 16, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "bn.fprop(x)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._layer_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "'unit_1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "'unit_2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "'unit_3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "common_bn_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_245": {
                "name_or_scope": {
                    "value": "residual_bn_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_282": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "layer.params_device[self.device_name].values()",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_287": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "layer.params_device[self.device_name].values()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/test_attack_multigpu.py": {
        "tensorflow": {
            "constant_35": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.W1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(x, self.W1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/test_run_multigpu.py": {
        "tensorflow": {
            "set_random_seed_53": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_64": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_112": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_126": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/test_runner.py": {
        "tensorflow": {
            "Session_19": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'v%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/trainer.py": {
        "tensorflow": {
            "Session_61": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_280": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_58": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_66": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.hparams.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "x_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, 28, 28, 1)",
                            "Tuple"
                        ],
                        [
                            "(batch_size, 32, 32, 3)",
                            "Tuple"
                        ],
                        [
                            "(batch_size, 32, 32, 3)",
                            "Tuple"
                        ],
                        [
                            "self.input_shape",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_186": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "hparams.adam_lrn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_111": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_359": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i]['x'].device",
                            "Attribute"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_379": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i]['x'].device",
                            "Attribute"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_408": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i]['x'].device",
                            "Attribute"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConfigProto_62": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_271": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_333": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i]['x'].device",
                            "Attribute"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ],
                        [
                            "'/gpu:%d' % (hparams.ngpu - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_334": {
                "name_or_scope": {
                    "value": "'step%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/utils.py": {
        "tensorflow": {
            "split_18": {
                "variable": {
                    "value": "images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "int(images_batch.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_24": {
                "variable": {
                    "value": "result_images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "result_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "preprocess",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "reshaped_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_list",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "img.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "input": {
                    "value": "processed_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preproc_func(reshaped_img)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/utils_cifar.py": {
        "tensorflow": {
            "random_crop_167": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_169": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_172": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_173": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_174": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "per_image_standardization_176": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/multigpu_advtrain/utils_svhn.py": {
        "tensorflow": {
            "random_crop_100": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_attacks/fgsm/attack_fgsm.py": {
        "tensorflow": {
            "DEFINE_string_20": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_64": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_136": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_148": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_149": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_154": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_150": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_attacks/noop/attack_noop.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_25": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_57": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_attacks/random_noise/attack_random_noise.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_25": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_57": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_94": {
                "variable": {
                    "value": "x_output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "noisy_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input + eps * tf.sign(tf.random_normal(batch_shape))",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "run_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_96": {
                "target": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_93": {
                "x": {
                    "value": "tf.random_normal(batch_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_defenses/adv_inception_v3/defense.py": {
        "tensorflow": {
            "DEFINE_string_22": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output file to save labels.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_63": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_84": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_94": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['Predictions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_97": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_98": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_103": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_99": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_defenses/base_inception_model/defense.py": {
        "tensorflow": {
            "DEFINE_string_22": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output file to save labels.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_63": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_83": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_93": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['Predictions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_96": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_97": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_102": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_98": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_defenses/ens_adv_inception_resnet_v2/defense.py": {
        "tensorflow": {
            "DEFINE_string_23": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output file to save labels.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_64": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_85": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_95": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['Predictions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_98": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_99": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_104": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_100": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_defenses/ens_adv_inception_resnet_v2/inception_resnet_v2.py": {
        "tensorflow": {
            "concat_47": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_88": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, nb_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_231": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_270": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_350": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, nb_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_266": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_326": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_targeted_attacks/iter_target_class/attack_iter_target_class.py": {
        "tensorflow": {
            "DEFINE_string_20": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_35": {
                "name": {
                    "value": "iter_alpha",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Step size for one iteration.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "num_iter",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_76": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_120": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_127": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_128": {
                "variable": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input - eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "target_class_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_136": {
                "variable": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_class_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[FLAGS.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1001",
                            "int"
                        ]
                    ]
                }
            },
            "Saver_155": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_156": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_142": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(target_class_input, nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v3(x_adv, num_classes=nb_classes, is_training=False, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_151": {
                "variable": {
                    "value": "x_next",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv - alpha * tf.sign(tf.gradients(cross_entropy, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x_next, x_min, x_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x_input - eps, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x_input + eps, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_146": {
                "onehot_labels": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(target_class_input, nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "end_points['AuxLogits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weights": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MonitoredSession_161": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_157": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_150": {
                "x": {
                    "value": "tf.gradients(cross_entropy, x_adv)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_150": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(one_hot_target_class, logits, label_smoothing=0.1, weights=1.0)",
                            "Call"
                        ],
                        [
                            "cross_entropy + tf.losses.softmax_cross_entropy(one_hot_target_class, end_points['AuxLogits'], label_smoothing=0.1, weights=0.4)",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input",
                            "variable"
                        ],
                        [
                            "x_next",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/nips17_adversarial_competition/dev_toolkit/sample_targeted_attacks/step_target_class/attack_step_target_class.py": {
        "tensorflow": {
            "DEFINE_string_20": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory with images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "max_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum size of adversarial perturbation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Width of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "299",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Height of each input images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many images process at one time.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_70": {
                "filename": {
                    "value": "os.path.join(input_dir, '*.png')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_111": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]",
                            "List"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "target_class_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_124": {
                "variable": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_class_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[FLAGS.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1001",
                            "int"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_125": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(target_class_input, nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v3(x_input, num_classes=nb_classes, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_134": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_input - eps * tf.sign(tf.gradients(cross_entropy, x_input)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_137": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_138": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_129": {
                "onehot_labels": {
                    "value": "one_hot_target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(target_class_input, nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "end_points['AuxLogits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weights": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MonitoredSession_143": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_133": {
                "x": {
                    "value": "tf.gradients(cross_entropy, x_input)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Scaffold_139": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_133": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(one_hot_target_class, logits, label_smoothing=0.1, weights=1.0)",
                            "Call"
                        ],
                        [
                            "cross_entropy + tf.losses.softmax_cross_entropy(one_hot_target_class, end_points['AuxLogits'], label_smoothing=0.1, weights=0.4)",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=batch_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/examples/robust_vision_benchmark/cleverhans_attack_example/utils.py": {
        "tensorflow": {
            "get_default_graph_33": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_8": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_32": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_36": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tout",
                            "Method Argument"
                        ]
                    ]
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_67": {
                "variable": {
                    "value": "gradient_x",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_backward_py",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_backward_py",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[grad, images]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/examples/test_imagenet_attacks.py": {
        "tensorflow": {
            "DEFINE_string_41": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "DEFAULT_INCEPTION_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(CLEVERHANS_ROOT, 'examples/nips17_adversarial_competition/dev_toolkit/sample_attacks/fgsm/inception_v3.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "Path to checkpoint for inception network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_48": {
                "name": {
                    "value": "input_image_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.path.join(CLEVERHANS_ROOT, 'examples/nips17_adversarial_competition/dataset/images')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to image directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_54": {
                "name": {
                    "value": "metadata_file_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.path.join(CLEVERHANS_ROOT, 'examples/nips17_adversarial_competition/dataset/dev_dataset.csv')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to metadata file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "input_tensor": {
                    "value": "tf.cast(tf.nn.in_top_k(logits, labels, 1), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_123": {
                "x": {
                    "value": "tf.nn.in_top_k(logits, labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_137": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(num_images, 299, 299, 3)",
                            "Tuple"
                        ],
                        [
                            "(num_images, 299, 299, 3)",
                            "Tuple"
                        ],
                        [
                            "(num_images, 299, 299, 3)",
                            "Tuple"
                        ],
                        [
                            "batch_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_images,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_147": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_149": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_172": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,) + batch_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_186": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_187": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_215": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,) + batch_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_232": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "slim.get_model_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_233": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(saver=saver)",
                    "type": "Call",
                    "possible_values": []
                },
                "checkpoint_filename_with_path": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "in_top_k_123": {
                "targets": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "model.get_logits(x_adv)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(num_images, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "load_images(input_dir, metadata_file_path, batch_shape)",
                            "Call"
                        ],
                        [
                            "load_images(input_dir, metadata_file_path, batch_shape)",
                            "Call"
                        ],
                        [
                            "load_images(input_dir, metadata_file_path, batch_shape)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_154": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_156": {
                "msg": {
                    "value": "Accuracy: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "acc_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(acc, feed_dict={x_input: images, y_label: labels})",
                            "Call"
                        ],
                        [
                            "sess.run(acc, feed_dict=feed_dict_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "MonitoredSession_192": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "MonitoredSession_239": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ],
                        [
                            "tf.train.ChiefSessionCreator(scaffold=tf.train.Scaffold(saver=saver), checkpoint_filename_with_path=FLAGS.checkpoint_path, master=FLAGS.master)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_150": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_188": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_234": {
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(slim.get_model_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "info_244": {
                "msg": {
                    "value": "Accuracy: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "acc_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(acc, feed_dict={x_input: images, y_label: labels})",
                            "Call"
                        ],
                        [
                            "sess.run(acc, feed_dict=feed_dict_i)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/scripts/compute_accuracy.py": {
        "tensorflow": {
            "Session_83": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_81": {
                "seed": {
                    "value": "20181014",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/scripts/make_confidence_report.py": {
        "tensorflow": {
            "run_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/scripts/make_confidence_report_bundle_examples.py": {
        "tensorflow": {
            "Session_57": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/scripts/make_confidence_report_bundled.py": {
        "tensorflow": {
            "run_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/scripts/make_confidence_report_spsa.py": {
        "tensorflow": {
            "Session_91": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_85": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/scripts/plot_success_fail_curve.py": {
        "tensorflow": {
            "run_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_attacks.py": {
        "tensorflow": {
            "sigmoid_54": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(x, w1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-2.4, 1.2], [0.5, -2.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.5, 0.3], [-2, 0.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, -1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_100": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_134": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_144": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_190": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_274": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_311": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_316": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_320": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_335": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_339": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_363": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_367": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_389": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_393": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_413": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_426": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_427": {
                "variable": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_498": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_685": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_747": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_920": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "90",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_935": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_979": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_980": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "feed_labs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_1075": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_1120": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "feed_labs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_1215": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1246": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_1318": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1329": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1374": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_1387": {
                "variable": {
                    "value": "x_src",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(input_shape, 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_1388": {
                "variable": {
                    "value": "x_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(input_shape, 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1399": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1421": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1448": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_1449": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "feed_labs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_1494": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_1495": {
                "variable": {
                    "value": "first_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.flatten(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1497": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[second_logit, first_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_1514": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1527": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1546": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1569": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_1589": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1617": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1685": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1686": {
                "variable": {
                    "value": "y_target_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1687": {
                "variable": {
                    "value": "image_target_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_90": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_915": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "90",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_926": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(101,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "90",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_1385": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.5, 0.3], [-2, 0.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, -1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_57": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w1)",
                            "Call"
                        ],
                        [
                            "tf.stack([second_logit, first_logit], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w1)",
                            "Call"
                        ],
                        [
                            "tf.stack([second_logit, first_logit], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "virtual_adv_dummy_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_883": {
                "name": {
                    "value": "sparse_l1_descent_dummy_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_885": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_1221": {
                "name": {
                    "value": "dummy_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_1496": {
                "input": {
                    "value": "first_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(flat_x, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1499": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w1)",
                            "Call"
                        ],
                        [
                            "tf.stack([second_logit, first_logit], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1519": {
                "name": {
                    "value": "dummy_model_spatial",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_94": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, 10, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_151": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_884": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1222": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1520": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_dtype_51": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_53": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_1363": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(100, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "my_conv(x, depth)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, x_val.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, 2, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [1, 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_1503": {
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1360": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1369": {
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, feed_labs.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, feed_labs.shape)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "my_dense(y, 4096, tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "my_dense(y, 1000)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, feed_labs.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros([100, 2])",
                            "Call"
                        ],
                        [
                            "np.zeros([100, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/tests_tf/test_attacks_tf.py": {
        "tensorflow": {
            "sigmoid_34": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(x, w1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-2.4, 1.2], [0.5, -2.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_42": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, nb_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, input_dim])",
                            "Call"
                        ],
                        [
                            "tf.ones([3, 200, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [input_dim, nb_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "res[self.model.O_LOGITS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "slice_57": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x, probs)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[random_example, random_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_58": {
                "variable": {
                    "value": "(dx,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(adv_x, [random_example, random_feature], [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, input_dim])",
                            "Call"
                        ],
                        [
                            "tf.ones([3, 200, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "x_val_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[100, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_234": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 200, 200, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_245": {
                "variable": {
                    "value": "worst_sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_247": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size, dtype=tf.int32), tf.cast(worst_sample_idx, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_252": {
                "variable": {
                    "value": "transformed_ims_bshwc",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "sbhwc->bshwc",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "transformed_ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel_apply_transformations(x, transforms, black_border_size=30)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_253": {
                "variable": {
                    "value": "after_lookup",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformed_ims_bshwc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('sbhwc->bshwc', transformed_ims)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int32), tf.cast(worst_sample_idx, tf.int32)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_30": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_89": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(init_model_logits, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_93": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbation",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_95": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-5.0",
                            "Method Argument"
                        ],
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Method Argument"
                        ],
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, input_dim])",
                            "Call"
                        ],
                        [
                            "tf.ones([3, 200, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.5, 0.3], [-2, 0.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_36": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ],
                        [
                            "self.model.fprop(input_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_246": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, input_dim])",
                            "Call"
                        ],
                        [
                            "tf.ones([3, 200, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_78": {
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "res[self.model.O_LOGITS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_89": {
                "input": {
                    "value": "init_model_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_model_output[self.model.O_LOGITS]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_248": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_249": {
                "x": {
                    "value": "worst_sample_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_31": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_33": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_confidence_report.py": {
        "tensorflow": {
            "Session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_defenses.py": {
        "tensorflow": {
            "sigmoid_34": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(x, w1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[-2.4, 1.2], [0.5, -2.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_86": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.5, 0.3], [-2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.4, 1.2], [0.5, -2.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.5, 0.3], [-2, 0.3]], dtype=tf.as_dtype(x.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_38": {
                "logits": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, w2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_dtype_31": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_33": {
                "type_value": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_mnist_blackbox.py": {
        "tensorflow": {
            "Graph_26": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_37": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_mnist_tutorial_cw.py": {
        "tensorflow": {
            "Graph_19": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_32": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_mnist_tutorial_jsma.py": {
        "tensorflow": {
            "Graph_22": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_37": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_mnist_tutorial_keras.py": {
        "tensorflow": {
            "Graph_24": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_36": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_mnist_tutorial_keras_tf.py": {
        "tensorflow": {
            "Graph_27": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_39": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_mnist_tutorial_tf.py": {
        "tensorflow": {
            "Graph_24": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_38": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_picklable_model.py": {
        "tensorflow": {
            "Session_23": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_31": {
                "variable": {
                    "value": "self.y_true",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fn": {
                    "value": "tf.image.per_image_standardization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_68": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_87": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_108": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_projected_gradient_descent.py": {
        "tensorflow": {
            "Session_29": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_40": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_27": {
                "shape": {
                    "value": "(batch_size, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_serial.py": {
        "tensorflow": {
            "Session_20": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_26": {
                "ref": {
                    "value": "xv.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_utils.py": {
        "tensorflow": {
            "Session_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_utils_keras.py": {
        "tensorflow": {
            "Session_31": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_53": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_tf/test_utils_tf.py": {
        "tensorflow": {
            "Session_32": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "q_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2.0], [3.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_109": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0], [-1.0], [1], [0.5], [-1], [1], [-0.9], [0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_110": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0], [-1.0], [1.0], [1.0], [1.0], [-1.0], [-1.0], [1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_91": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.clip_eta(eta, ord_arg, eps)",
                            "Call"
                        ],
                        [
                            "self.sess.run(clipped)",
                            "Call"
                        ],
                        [
                            "utils_tf.clip_eta(eta * sign, ord_arg, eps)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((5, 3))",
                            "Call"
                        ],
                        [
                            "tf.constant([[2.0], [3.0], [4.0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0], [-1.0], [1], [0.5], [-1], [1], [-0.9], [0.9]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/tutorials/future/tf2/mnist_tutorial.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_49": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_53": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_54": {
                "variable": {
                    "value": "test_acc_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_55": {
                "variable": {
                    "value": "test_acc_fgsm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_56": {
                "variable": {
                    "value": "test_acc_pgd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Progbar_79": {
                "variable": {
                    "value": "progress_bar_test",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_18": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_19": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_20": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Progbar_70": {
                "variable": {
                    "value": "progress_bar_train",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "60000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-attack/enjoy-adv.py": {
        "tensorflow": {
            "Graph_222": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_223": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_70": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_82": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_81": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl-attack/model.py": {
        "tensorflow": {
            "get_collection_22": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/convnet'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=self.num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=self.num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_23": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/action_value'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=self.num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=self.num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_dense(actions_hidden, name='noisy_fc2', size=num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(actions_hidden, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "action_scores - tf.expand_dims(action_scores_mean, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc1', size=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "noisy_dense(out, name='noisy_fc2', size=self.num_actions)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=512, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=self.num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rl-attack/rlattack/common/distributions.py": {
        "tensorflow": {
            "one_hot_134": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_141": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_142": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - U.max(other.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_149": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_163": {
                "variable": {
                    "value": "self.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "low",
                            "Method Argument"
                        ],
                        [
                            "low",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_186": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_189": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=len(flat.shape) - 1, num_or_size_splits=2, value=flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_212": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_43": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_135": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_155": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_170": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x - self.low, axis=len(x.get_shape()) - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_172": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_176": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "round_216": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_225": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_154": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_168": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_178": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_218": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_222": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_224": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_225": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_249": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_155": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_164": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "high - low + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_168": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_178": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_220": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_146": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_152": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_196": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_204": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_218": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_170": {
                "value": {
                    "value": "x - self.low",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(x.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_195": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_200": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl-attack/rlattack/common/misc_util.py": {
        "tensorflow": {
            "set_random_seed_76": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-attack/rlattack/common/mpi_adam.py": {
        "tensorflow": {
            "Variable_57": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_62": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "stepsize",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_random_seed_55": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_69": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_70": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize * np.sqrt(1 - self.beta2 ** self.t) / (1 - self.beta1 ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_59": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-attack/rlattack/common/mpi_running_mean_std.py": {
        "tensorflow": {
            "get_variable_8": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_25": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.to_float(self._sumsq / self._count) - tf.square(self.mean), 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_26": {
                "x": {
                    "value": "tf.to_float(self._sumsq / self._count) - tf.square(self.mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_11": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_21": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_26": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_32": {
                "ref": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_33": {
                "ref": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='var')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_34": {
                "ref": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float64, name='count')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-attack/rlattack/common/tests/test_tf_util.py": {
        "tensorflow": {
            "Variable_12": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "42.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_16": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "other",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "rl-attack/rlattack/common/tf_util.py": {
        "tensorflow": {
            "cond_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ConfigProto_228": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cpu",
                            "Method Argument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cpu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_277": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_283": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_299": {
                "variable": {
                    "value": "mu_init",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1 * 1 / np.power(x.get_shape().as_list()[1], 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1 * 1 / np.power(x.get_shape().as_list()[1], 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_301": {
                "variable": {
                    "value": "sigma_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.4 / np.power(x.get_shape().as_list()[1], 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_306": {
                "variable": {
                    "value": "b_epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(q)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_309": {
                "variable": {
                    "value": "w_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/w_mu'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "mu_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(minval=-1 * 1 / np.power(x.get_shape().as_list()[1], 0.5), maxval=1 * 1 / np.power(x.get_shape().as_list()[1], 0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_310": {
                "variable": {
                    "value": "w_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/w_sigma'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "sigma_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.4 / np.power(x.get_shape().as_list()[1], 0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_312": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_mu + tf.multiply(w_sigma, w_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_361": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_362": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_mu + tf.multiply(w_sigma, w_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_371": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/V'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(x.get_shape()[1]), size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_373": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/g'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_374": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_377": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_646": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_689": {
                "variable": {
                    "value": "inds0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inds0, tf.int64)",
                            "Call"
                        ],
                        [
                            "inds0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_690": {
                "variable": {
                    "value": "inds1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inds1, tf.int64)",
                            "Call"
                        ],
                        [
                            "inds1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_691": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_693": {
                "variable": {
                    "value": "Xflat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_747": {
                "variable": {
                    "value": "lengths_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lengths_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(lengths_b)",
                            "Call"
                        ],
                        [
                            "lengths_b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_19": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_24": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_33": {
                "x": {
                    "value": "var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_38": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_43": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_47": {
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "arrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_194": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_233": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_265": {
                "variable": {
                    "value": "set_endpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_315": {
                "variable": {
                    "value": "b_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b_mu'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "mu_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(minval=-1 * 1 / np.power(x.get_shape().as_list()[1], 0.5), maxval=1 * 1 / np.power(x.get_shape().as_list()[1], 0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_316": {
                "variable": {
                    "value": "b_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b_sigma'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "sigma_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.4 / np.power(x.get_shape().as_list()[1], 0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_346": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_348": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_364": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_448": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_647": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_659": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_666": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_674": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gather_694": {
                "params": {
                    "value": "Xflat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "inds0 * ncols + inds1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_719": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_770": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(X), tf.int64)",
                            "Call"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_780": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, intprod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_788": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_29": {
                "x": {
                    "value": "x - meanx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_n_80": {
                "inputs": {
                    "value": "[sum(tf.square(p)) for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variables_initializer_247": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_297": {
                "x": {
                    "value": "tf.sign(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.pow(tf.abs(x), 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_311": {
                "x": {
                    "value": "w_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/w_sigma', [x.get_shape()[1], size], initializer=sigma_init)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_p * f_q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_326": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "self._call(*args)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_378": {
                "x": {
                    "value": "sum(tf.square(v), axis=0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_379": {
                "tensor": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g / tf.sqrt(sum(tf.square(v), axis=0, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_387": {
                "x": {
                    "value": "pkeep + tf.random_uniform(tf.shape(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_515": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_515": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "dict(zip(self.nondata_inputs, nondata_vals))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "feed_dict",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_560": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_565": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_691": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_727": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_749": {
                "input": {
                    "value": "lengths_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(lengths_b)",
                            "Call"
                        ],
                        [
                            "lengths_b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_92": {
                "x": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(X))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_152": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_170": {
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_172": {
                "x": {
                    "value": "super().get()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_195": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_196": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_297": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_297": {
                "x": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_317": {
                "x": {
                    "value": "b_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/b_sigma', [size], initializer=sigma_init)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(f_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_346": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_352": {
                "name": {
                    "value": "summary_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.transpose(tf.reshape(w, [filter_size[0], filter_size[1], -1, 1]), [2, 0, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_images": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_357": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_mu + tf.multiply(w_sigma, w_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_372": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_373": {
                "value": {
                    "value": "init_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_374": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_541": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "not self.first_time",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Session_756": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_197": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_norm_213": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_297": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_353": {
                "a": {
                    "value": "tf.reshape(w, [filter_size[0], filter_size[1], -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_378": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_542": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_648": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_664": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_80": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_noise([x.get_shape().as_list()[1], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_353": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_mu + tf.multiply(w_sigma, w_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[filter_size[0], filter_size[1], -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_387": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_664": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(X), tf.int64)",
                            "Call"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_674": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_648": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-attack/rlattack/deepq/build_graph.py": {
        "tensorflow": {
            "enable_eager_execution_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_116": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func', noisy=noisy)",
                            "Call"
                        ],
                        [
                            "q_values.get_logits(observations_ph.get())",
                            "Call"
                        ],
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func', noisy=noisy)",
                            "Call"
                        ],
                        [
                            "q_values.get_logits(observations_ph.get())",
                            "Call"
                        ],
                        [
                            "U.function([obs_t_input], q_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_121": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_123": {
                "variable": {
                    "value": "output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "stochastic_ph_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic_adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_181": {
                "variable": {
                    "value": "update_eps_ph_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps_adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_182": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_245": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_246": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_248": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_252": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func', noisy=noisy)",
                            "Call"
                        ],
                        [
                            "q_values.get_logits(observations_ph.get())",
                            "Call"
                        ],
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func', noisy=noisy)",
                            "Call"
                        ],
                        [
                            "q_values.get_logits(observations_ph.get())",
                            "Call"
                        ],
                        [
                            "U.function([obs_t_input], q_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_257": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_259": {
                "variable": {
                    "value": "output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_324": {
                "variable": {
                    "value": "act_t_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_325": {
                "variable": {
                    "value": "rew_t_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_327": {
                "variable": {
                    "value": "done_mask_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "done",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_328": {
                "variable": {
                    "value": "importance_weights_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_341": {
                "variable": {
                    "value": "q_t_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_t * tf.one_hot(act_t_ph, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_359": {
                "variable": {
                    "value": "weighted_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "importance_weights_ph * errors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_374": {
                "variable": {
                    "value": "update_target_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_target_expr",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "deepq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arg_max_347": {
                "variable": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_tp1_using_online_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='q_func', noisy=noisy, reuse=True)",
                            "Call"
                        ],
                        [
                            "q_tp1_using_online_net.get_logits(obs_tp1_input.get())",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_348": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1 * tf.one_hot(q_tp1_best_using_online_net, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_350": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='target_q_func', noisy=noisy)",
                            "Call"
                        ],
                        [
                            "q_tp1.get_logits(obs_tp1_input.get())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_119": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_124": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_183": {
                "pred": {
                    "value": "update_eps_ph_adv >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph_adv",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_254": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_255": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_260": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stop_gradient_357": {
                "input": {
                    "value": "q_t_selected_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rew_t_ph + gamma * q_tp1_best_masked",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_111": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_120": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_182": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_248": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_256": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_341": {
                "indices": {
                    "value": "act_t_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='action')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_348": {
                "indices": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.arg_max(q_tp1_using_online_net, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-attack/rlattack/deepq/models.py": {
        "tensorflow": {
            "flatten_43": {
                "variable": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inpt",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "inpt",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_12": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inpt",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "inpt",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "action_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "action_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_63": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rl-attack/rlattack/deepq/simple.py": {
        "tensorflow": {
            "AdamOptimizer_178": {
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rl-attack/rlattack/logger.py": {
        "tensorflow": {
            "as_bytes_108": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-attack/statistics.py": {
        "tensorflow": {
            "merge_30": {
                "variable": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.scalar_summaries + self.histogram_summaries",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.scalar.summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_21": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.scalar.summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', None, name=k + '.scalar.summary')",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', None, name=k + '.histogram.summary')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.histogram.summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_26": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.histogram.summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', None, name=k + '.scalar.summary')",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', None, name=k + '.histogram.summary')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rl-attack/train.py": {
        "tensorflow": {
            "FileWriter_191": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "savedir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save_dir",
                            "Attribute"
                        ],
                        [
                            "tempfile.TemporaryDirectory().name",
                            "Attribute"
                        ],
                        [
                            "savedir",
                            "Method Argument"
                        ],
                        [
                            "savedir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_146": {
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "input_tensor": {
                    "value": "tf.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_188": {
                "x": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/future/torch/attacks/fast_gradient_method.py": {
        "torch": {
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_37": {
                "variable": {
                    "value": "assert_ge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ge(x, torch.tensor(clip_min, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_41": {
                "variable": {
                    "value": "assert_le",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.le(x, torch.tensor(clip_max, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_49": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_69": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + optimal_perturbation",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ge_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().to(torch.float).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_min, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "le_41": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().to(torch.float).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_max, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/cleverhans/future/torch/attacks/noise.py": {
        "torch": {
            "clamp_39": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, min=clip_min, max=clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cleverhans/cleverhans/future/torch/attacks/projected_gradient_descent.py": {
        "torch": {
            "all_52": {
                "variable": {
                    "value": "assert_ge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ge(x, torch.tensor(clip_min, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_56": {
                "variable": {
                    "value": "assert_le",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.le(x, torch.tensor(clip_max, device=x.device, dtype=x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_62": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_70": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "fast_gradient_method(model_fn, adv_x, eps_iter, ord, clip_min=clip_min, clip_max=clip_max, y=y, targeted=targeted)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_74": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_90": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "fast_gradient_method(model_fn, adv_x, eps_iter, ord, clip_min=clip_min, clip_max=clip_max, y=y, targeted=targeted)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ge_52": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_min, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "le_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(clip_max, device=x.device, dtype=x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tests_pytorch/test_utils.py": {
        "torch": {
            "tensor_13": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, -2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_15": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5 ** 0.5, -0.5 ** 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_24": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, -2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, -2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * eta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cleverhans/tutorials/future/torch/cifar10_tutorial.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='/tmp/data', train=True, transform=train_transforms, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_40": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='/tmp/data', train=False, transform=test_transforms, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}