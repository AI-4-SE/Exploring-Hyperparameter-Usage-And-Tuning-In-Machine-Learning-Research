{
    "eval.py": {
        "torch": {
            "Event_83": {
                "variable": {
                    "value": "model_start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_84": {
                "variable": {
                    "value": "model_end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_86": {
                "variable": {
                    "value": "postprocess_start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_87": {
                "variable": {
                    "value": "postprocess_end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_458": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=config['SOLVER']['LR'], betas=(config['SOLVER']['MOMENTUM_1'], config['SOLVER']['MOMENTUM_2']))",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config['SOLVER']['MILESTONES']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.full_load(file)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "config['SOLVER']['LR_DECAY']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.full_load(file)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_454": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['SOLVER']['LR']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.full_load(file)",
                            "Call"
                        ]
                    ]
                },
                "betas": {
                    "value": "(config['SOLVER']['MOMENTUM_1'], config['SOLVER']['MOMENTUM_2'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "ModelWrapper(backbone, head)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_129": {
                "obj": {
                    "value": "delta_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['delta']",
                            "Subscript"
                        ],
                        [
                            "delta_gt.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_131": {
                "obj": {
                    "value": "delta_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta_hat.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/backbones/ContentAware.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=4, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=4, out_channels=8, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=8, out_channels=16, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=32, out_channels=1, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_34": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / (max_value * strength)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(mask, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=4, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=4, out_channels=8, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=8, out_channels=1, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.resnet34.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.resnet34.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_130": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_predictor(input_1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_extractor(input_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_136": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_predictor(input_2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_extractor(input_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_140": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g1, g2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g2, g1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/backbones/HomographyNet.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.layer7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * 16 * 16, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p1, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.layer8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.layer8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.layer9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.layer10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.layer11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.layer12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "128 * 16 * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/backbones/ResNet34.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.resnet34.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.resnet34.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p1, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "x21",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p2, p1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/backbones/Rethinking.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=2, out_channels=64, kernel_size=7, padding=3, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p1, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet50ConvBlock(input_channels=64, output_channels=256, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet50ConvBlock(input_channels=256, output_channels=512, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet50ConvBlock(input_channels=512, output_channels=1024, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet50IdentityBlock(input_channels=512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet50IdentityBlock(input_channels=256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.layer7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet50IdentityBlock(input_channels=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.layer8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=512, kernel_size=1, padding=0, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "x21",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p2, p1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet34ConvBlock(input_channels=64, output_channels=64, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet34ConvBlock(input_channels=64, output_channels=128, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet34ConvBlock(input_channels=128, output_channels=256, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet34IdentityBlock(input_channels=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet34IdentityBlock(input_channels=64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.layer7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResNet34IdentityBlock(input_channels=32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.layer8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=16, out_channels=128, kernel_size=1, padding=0, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/backbones/utils.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.upper_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=input_channels, out_channels=mid_channels, kernel_size=1, padding=0, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.lower_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=input_channels, out_channels=output_channels, kernel_size=1, padding=0, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.upper_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=input_channels, out_channels=input_channels // 4, kernel_size=1, padding=0, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.upper_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=input_channels, out_channels=input_channels, kernel_size=2, padding=0, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.lower_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=input_channels, out_channels=input_channels // 2, kernel_size=2, padding=0, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.upper_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=input_channels, out_channels=output_channels, kernel_size=3, padding=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.upper_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=input_channels, out_channels=input_channels, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.upper_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=input_channels, out_channels=input_channels // 2, kernel_size=2, padding=0, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.lower_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=input_channels, out_channels=input_channels // 2, kernel_size=2, padding=0, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.lower_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=input_channels, out_channels=output_channels, kernel_size=1, padding=0, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels // stride",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels // stride",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels // stride",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels // stride",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels // stride",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels // stride",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "input_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "input_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "input_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "input_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_65": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_75": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_139": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_145": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "num_features": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/cifar10/dataset.py": {
        "torch": {
            "Dataset_315": {
                "variable": {
                    "value": "cifar10_testset",
                    "type": "variable",
                    "possible_values": []
                },
                "root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/CIFAR-10'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/CIFAR-10'",
                            "Constant"
                        ]
                    ]
                },
                "train": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transform": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([Rescale((192, 192)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=[], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((192, 192)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_348": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cifar10_testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(root=dataset_root, train=False, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(root=dataset_root, train=False, transform=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dataset_421": {
                "variable": {
                    "value": "cifar10_testset",
                    "type": "variable",
                    "possible_values": []
                },
                "root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/CIFAR-10'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/CIFAR-10'",
                            "Constant"
                        ]
                    ]
                },
                "train": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transform": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([Rescale((192, 192)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=[], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((192, 192)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_456": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cifar10_testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(root=dataset_root, train=False, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(root=dataset_root, train=False, transform=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/clevr_change/dataset.py": {
        "torch": {
            "Dataset_174": {
                "variable": {
                    "value": "clevr_change_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ]
                    ]
                },
                "nsc_images": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sc_images": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transforms": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "clevr_change_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=True, sc_images=False, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=False, sc_images=True, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=True, sc_images=True, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "clevr_change_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='nsc')",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='sc')",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='both')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dataset_219": {
                "variable": {
                    "value": "clevr_change_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ]
                    ]
                },
                "nsc_images": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sc_images": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "transforms": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_230": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "clevr_change_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=True, sc_images=False, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=False, sc_images=True, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=True, sc_images=True, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "clevr_change_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='nsc')",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='sc')",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='both')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dataset_264": {
                "variable": {
                    "value": "clevr_change_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/ChangeDetection/CLEVR_Change'",
                            "Constant"
                        ]
                    ]
                },
                "nsc_images": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sc_images": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "transforms": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([CenterCrop(patch_size), ChangeAwarePrep(['patch_1', 'patch_2']), DictToTensor(['patch_1', 'patch_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_275": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "clevr_change_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=True, sc_images=False, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=False, sc_images=True, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, nsc_images=True, sc_images=True, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "clevr_change_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='nsc')",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='sc')",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=clevr_change_dataset, batch_size=2, samples_per_epoch=100, mode='both')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/coco/dataset.py": {
        "torch": {
            "Dataset_180": {
                "variable": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ]
                    ]
                },
                "transforms": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), ToGrayscale(), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=[], target_gen='4_points'), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(keys=['image_1', 'image_2', 'patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(keys=['image_1', 'image_2', 'patch_1', 'patch_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_213": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "coco_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dataset_287": {
                "variable": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ]
                    ]
                },
                "transforms": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), ToGrayscale(), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=[], target_gen='4_points'), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(keys=['image_1', 'image_2', 'patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(keys=['image_1', 'image_2', 'patch_1', 'patch_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_322": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "coco_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dataset_407": {
                "variable": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/COCO/train2014'",
                            "Constant"
                        ]
                    ]
                },
                "transforms": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), ToGrayscale(), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=[], target_gen='4_points'), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(keys=['image_1', 'image_2', 'patch_1', 'patch_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((320, 240)), CenterCrop((320, 240)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(keys=['image_1', 'image_2', 'patch_1', 'patch_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_443": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "coco_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode=None)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CollatorWithBlobs('patch_1', 'patch_2', blob_porosity=0.1, blobiness=0.2, random_seed=42)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/flir_adas/dataset.py": {
        "torch": {
            "Dataset_155": {
                "variable": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/FLIR_ADAS_1_3/train/thermal_8_bit'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/FLIR_ADAS_1_3/train/thermal_8_bit'",
                            "Constant"
                        ]
                    ]
                },
                "transforms": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([Rescale((320, 256)), CenterCrop((320, 256)), ToGrayscale(), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=[], target_gen='4_points'), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((320, 256)), CenterCrop((320, 256)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(keys=['image_1', 'image_2', 'patch_1', 'patch_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "coco_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode='single')",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode='single')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dataset_262": {
                "variable": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset_root": {
                    "value": "dataset_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/input/datasets/FLIR_ADAS_1_3/train/thermal_8_bit'",
                            "Constant"
                        ],
                        [
                            "'/data/input/datasets/FLIR_ADAS_1_3/train/thermal_8_bit'",
                            "Constant"
                        ]
                    ]
                },
                "transforms": {
                    "value": "composed_transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.Compose([Rescale((320, 256)), CenterCrop((320, 256)), ToGrayscale(), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=[], target_gen='4_points'), DictToTensor(['patch_1', 'patch_2', 'image_1', 'image_2'])])",
                            "Call"
                        ],
                        [
                            "transforms.Compose([Rescale((320, 256)), CenterCrop((320, 256)), HomographyNetPrep(rho=patch_size // 4, patch_size=patch_size, photometric_distort_keys=['image_1', 'image_2'], target_gen='4_points'), DictToGrayscale(keys=['image_1', 'image_2', 'patch_1', 'patch_2']), DictToTensor(keys=['image_1', 'image_2', 'patch_1', 'patch_2'])])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_297": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coco_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "Dataset(dataset_root=dataset_root, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "coco_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode='single')",
                            "Call"
                        ],
                        [
                            "DatasetSampler(data_source=coco_dataset, batch_size=4, samples_per_epoch=100, mode='single')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/transforms.py": {
        "torch": {
            "from_numpy_394": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_742": {
                "variable": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(data[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_772": {
                "variable": {
                    "value": "output_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_396": {
                "ndarray": {
                    "value": "np.array(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_788": {
                "variable": {
                    "value": "blobs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ps.generators.blobs(shape=[h, w], porosity=self.blob_porosity, blobiness=self.blobiness)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(blobs)",
                            "Call"
                        ],
                        [
                            "blobs.unsqueeze(0).repeat((patch_2.shape[0], 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_794": {
                "variable": {
                    "value": "patch_2_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_1[corners[0, 1]:corners[3, 1], corners[0, 0]:corners[1, 0]]",
                            "Subscript"
                        ],
                        [
                            "output_dict[self.patch_1_key][other_index]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "blobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ps.generators.blobs(shape=[h, w], porosity=self.blob_porosity, blobiness=self.blobiness)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(blobs)",
                            "Call"
                        ],
                        [
                            "blobs.unsqueeze(0).repeat((patch_2.shape[0], 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_795": {
                "variable": {
                    "value": "patch_2_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_2[corners[0, 1]:corners[3, 1], corners[0, 0]:corners[1, 0]]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(patch_2, axis=-1)",
                            "Call"
                        ],
                        [
                            "output_dict[self.patch_2_key][elem_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.bitwise_not(blobs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bitwise_not_795": {
                "input": {
                    "value": "blobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ps.generators.blobs(shape=[h, w], porosity=self.blob_porosity, blobiness=self.blobiness)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(blobs)",
                            "Call"
                        ],
                        [
                            "blobs.unsqueeze(0).repeat((patch_2.shape[0], 1, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/utils.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0], [image_width, 0], [image_width, image_height], [0, image_height]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "patch.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "patch.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_92": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(points, (0, 1), 'constant', 1.0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(points, (0, 1), 'constant', 1.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_128": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(points, (0, 1), 'constant', 1.0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(points, (0, 1), 'constant', 1.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "reprojection_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(transformed_points - target_points) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_58": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(homography)",
                            "Call"
                        ],
                        [
                            "np.linalg.inv(homography)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/heads/NoOpHead.py": {
        "torch": {
            "is_tensor_79": {
                "obj": {
                    "value": "perspective_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perspective_field.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "delta_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target_hat.shape[0], 4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "target_hat.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target_hat.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/heads/PerceptualHead.py": {
        "torch": {
            "Identity_32": {
                "variable": {
                    "value": "self.resnet.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_33": {
                "variable": {
                    "value": "self.resnet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.projection_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_27": {
                "variable": {
                    "value": "self.resnet.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_29": {
                "variable": {
                    "value": "self.resnet.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_31": {
                "variable": {
                    "value": "self.resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "self_coordinate_field",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coordinate_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((x_patch_grid, y_patch_grid), axis=1).transpose(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "four_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "four_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [perspective_field.shape[-1], 0], [perspective_field.shape[-1], perspective_field.shape[-2]], [0, perspective_field.shape[-2]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(four_points).float().to(perspective_field.device)",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0], [perspective_field_12.shape[-1], 0], [perspective_field_12.shape[-1], perspective_field_12.shape[-2]], [0, perspective_field_12.shape[-2]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(four_points).float().to(perspective_field_12.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(four_points, dim=0).repeat(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "self_four_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "four_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [perspective_field.shape[-1], 0], [perspective_field.shape[-1], perspective_field.shape[-2]], [0, perspective_field.shape[-2]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(four_points).float().to(perspective_field.device)",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0], [perspective_field_12.shape[-1], 0], [perspective_field_12.shape[-1], perspective_field_12.shape[-2]], [0, perspective_field_12.shape[-2]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(four_points).float().to(perspective_field_12.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(four_points, dim=0).repeat(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_297": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_297": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_312": {
                "variable": {
                    "value": "delta_hats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_hats.reshape(b, n, 4, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_339": {
                "variable": {
                    "value": "patch_1_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[e1]",
                            "Subscript"
                        ],
                        [
                            "patch_1.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ],
                        [
                            "data[e1]",
                            "Subscript"
                        ],
                        [
                            "patch_1.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_340": {
                "variable": {
                    "value": "patch_2_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[e2]",
                            "Subscript"
                        ],
                        [
                            "patch_2.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ],
                        [
                            "data[e2]",
                            "Subscript"
                        ],
                        [
                            "patch_2.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_415": {
                "variable": {
                    "value": "l1_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(patch_1_f_prime_dual - patch_2_f_dual)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_416": {
                "variable": {
                    "value": "l3_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(patch_1_f_dual - patch_2_f_dual)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_419": {
                "variable": {
                    "value": "patch_1_m_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[m1]",
                            "Subscript"
                        ],
                        [
                            "torch.ones_like(patch_1)",
                            "Call"
                        ],
                        [
                            "patch_1_m.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ],
                        [
                            "downsample_layer(patch_1_m)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_420": {
                "variable": {
                    "value": "patch_2_m_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[m2]",
                            "Subscript"
                        ],
                        [
                            "torch.ones_like(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_m.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ],
                        [
                            "downsample_layer(patch_2_m)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_2_m, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_2_m, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_421": {
                "variable": {
                    "value": "patch_1_m_prime_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_m_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_layer(patch_1_m_prime)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_422": {
                "variable": {
                    "value": "patch_2_m_prime_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_m_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_layer(patch_2_m_prime)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_2_m_prime, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_425": {
                "input": {
                    "value": "patch_1_m_prime_dual * patch_2_m_dual",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_430": {
                "variable": {
                    "value": "loss_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ln1_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime_dual * patch_2_m_dual * (l1_dual - l3_dual), dim=-1), dim=-1) / torch.max(ln1_den_dual, torch.ones_like(ln1_den_dual))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AvgPool2d_452": {
                "variable": {
                    "value": "downsample_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "downsample_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_1_m.shape[-1] // f_h",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "downsample_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_1_m.shape[-1] // f_h",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_505": {
                "variable": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1 - l3 + torch.ones_like(l1) * self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_514": {
                "variable": {
                    "value": "patch_2_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[m2]",
                            "Subscript"
                        ],
                        [
                            "torch.ones_like(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_m.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ],
                        [
                            "downsample_layer(patch_2_m)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_2_m, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_2_m, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_515": {
                "variable": {
                    "value": "patch_1_m_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_m_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_layer(patch_1_m_prime)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_538": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss + loss_dual",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m * loss_mat, dim=-1), dim=-1) / torch.max(loss_den, torch.ones_like(loss_den))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * loss_mat, dim=-1), dim=-1) / torch.max(loss_den, torch.ones_like(loss_den))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ],
                        [
                            "ln1 + ln2 + self.triplet_mu * ln3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_692": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_692": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_711": {
                "variable": {
                    "value": "delta_hats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_hats.reshape(b, n, 4, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_755": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_757": {
                "variable": {
                    "value": "homography_hats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography_hats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(homography_hats, dim=1, index=indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(homography_scores, dim=-1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "indices.reshape(-1, 1, 1, 1).repeat(1, 1, 3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_763": {
                "variable": {
                    "value": "four_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "four_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [perspective_field.shape[-1], 0], [perspective_field.shape[-1], perspective_field.shape[-2]], [0, perspective_field.shape[-2]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(four_points).float().to(perspective_field.device)",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0], [perspective_field_12.shape[-1], 0], [perspective_field_12.shape[-1], perspective_field_12.shape[-2]], [0, perspective_field_12.shape[-2]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(four_points).float().to(perspective_field_12.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(four_points, dim=0).repeat(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_764": {
                "variable": {
                    "value": "four_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "four_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [perspective_field.shape[-1], 0], [perspective_field.shape[-1], perspective_field.shape[-2]], [0, perspective_field.shape[-2]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(four_points).float().to(perspective_field.device)",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0], [perspective_field_12.shape[-1], 0], [perspective_field_12.shape[-1], perspective_field_12.shape[-2]], [0, perspective_field_12.shape[-2]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(four_points).float().to(perspective_field_12.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(four_points, dim=0).repeat(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TripletMarginLoss_115": {
                "variable": {
                    "value": "self.triplet_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.triplet_margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_318": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_434": {
                "variable": {
                    "value": "l2_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(patch_2_f_prime_dual - patch_1_f_dual)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_437": {
                "input": {
                    "value": "patch_2_m_prime_dual * patch_1_m_dual",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_481": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(patch_1_f_prime - patch_2_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_482": {
                "variable": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(patch_1_f - patch_2_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_523": {
                "input": {
                    "value": "patch_1_m_prime * patch_2_m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_533": {
                "input": {
                    "value": "patch_1_m_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_layer(patch_1_m_prime)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_609": {
                "variable": {
                    "value": "patch_1_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[m1]",
                            "Subscript"
                        ],
                        [
                            "torch.ones_like(patch_1)",
                            "Call"
                        ],
                        [
                            "patch_1_m.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ],
                        [
                            "downsample_layer(patch_1_m)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_610": {
                "variable": {
                    "value": "patch_2_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[m2]",
                            "Subscript"
                        ],
                        [
                            "torch.ones_like(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_m.reshape(b, 1, i, i).repeat(1, n, 1, 1).reshape(b * n, 1, i, i)",
                            "Call"
                        ],
                        [
                            "downsample_layer(patch_2_m)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_2_m, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_2_m, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_611": {
                "variable": {
                    "value": "patch_1_m_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_m_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_layer(patch_1_m_prime)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_612": {
                "variable": {
                    "value": "patch_2_m_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_m_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_layer(patch_2_m_prime)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(patch_2_m_prime, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_615": {
                "input": {
                    "value": "patch_1_m_prime * patch_2_m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_635": {
                "input": {
                    "value": "patch_2_m_prime * patch_1_m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_656": {
                "variable": {
                    "value": "ln1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ln1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m * loss_mat_1, dim=-1), dim=-1) / torch.max(ln1_den, torch.ones_like(ln1_den))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(ln1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_657": {
                "variable": {
                    "value": "ln2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ln2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime * patch_1_m * loss_mat_2, dim=-1), dim=-1) / torch.max(ln2_den, torch.ones_like(ln2_den))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(ln2)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_661": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_661": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_662": {
                "variable": {
                    "value": "ln3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.matmul(h1, h2) - eye) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_415": {
                "input": {
                    "value": "patch_1_f_prime_dual - patch_2_f_dual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_416": {
                "input": {
                    "value": "patch_1_f_dual - patch_2_f_dual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_426": {
                "input": {
                    "value": "patch_1_m_prime_dual * patch_2_m_dual * (l1_dual - l3_dual)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_427": {
                "input": {
                    "value": "ln1_den_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime_dual * patch_2_m_dual, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_472": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_472": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_475": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_475": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_478": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1)",
                            "Call"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_478": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_505": {
                "input": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(patch_1_f_prime - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f_prime - patch_2_f)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f_prime, patch_2_f, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.square(patch_1_f_prime - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f_prime, patch_2_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_559": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f_prime - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_560": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_f_prime - patch_1_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_561": {
                "variable": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "layer[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_290": {
                "input": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_291": {
                "input": {
                    "value": "patch_1_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_296": {
                "input": {
                    "value": "torch.abs(patch_2_f - patch_1_f_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_298": {
                "input": {
                    "value": "(h1 - eye) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_427": {
                "input": {
                    "value": "ln1_den_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime_dual * patch_2_m_dual, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_434": {
                "input": {
                    "value": "patch_2_f_prime_dual - patch_1_f_dual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_438": {
                "input": {
                    "value": "patch_2_m_prime_dual * patch_1_m_dual * (l2_dual - l3_dual)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_440": {
                "input": {
                    "value": "ln2_den_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime_dual * patch_1_m_dual, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_441": {
                "input": {
                    "value": "ln2_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime_dual * patch_1_m_dual * (l2_dual - l3_dual), dim=-1), dim=-1) / torch.max(ln2_den_dual, torch.ones_like(ln2_den_dual))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_481": {
                "input": {
                    "value": "patch_1_f_prime - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_482": {
                "input": {
                    "value": "patch_1_f - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_489": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_489": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_492": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_492": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_495": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1)",
                            "Call"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_495": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_524": {
                "input": {
                    "value": "patch_1_m_prime * patch_2_m * loss_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_525": {
                "input": {
                    "value": "loss_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(patch_1_m_prime, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_534": {
                "input": {
                    "value": "patch_1_m_prime * loss_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_535": {
                "input": {
                    "value": "loss_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(patch_1_m_prime, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_580": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(patch_1_f_prime - patch_2_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_581": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(patch_2_f_prime - patch_1_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_582": {
                "variable": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(patch_1_f - patch_2_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_618": {
                "variable": {
                    "value": "loss_mat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1 - l3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_625": {
                "variable": {
                    "value": "loss_mat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(l1 - l3 + self.triplet_margin, torch.zeros_like(l1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_631": {
                "input": {
                    "value": "patch_1_m_prime * patch_2_m * loss_mat_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_632": {
                "input": {
                    "value": "ln1_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_638": {
                "variable": {
                    "value": "loss_mat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2 - l3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_645": {
                "variable": {
                    "value": "loss_mat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(l2 - l3 + self.triplet_margin, torch.zeros_like(l2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_652": {
                "input": {
                    "value": "patch_2_m_prime * patch_1_m * loss_mat_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_653": {
                "input": {
                    "value": "ln2_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime * patch_1_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_682": {
                "input": {
                    "value": "patch_1_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1)",
                            "Call"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_683": {
                "input": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_684": {
                "input": {
                    "value": "patch_1_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_689": {
                "input": {
                    "value": "torch.abs(patch_2_f - patch_1_f_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_691": {
                "input": {
                    "value": "torch.abs(patch_2_f - patch_1_f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_693": {
                "input": {
                    "value": "(h1 - eye) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_440": {
                "input": {
                    "value": "ln2_den_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime_dual * patch_1_m_dual, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_498": {
                "x1": {
                    "value": "patch_1_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_499": {
                "x1": {
                    "value": "patch_1_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1)",
                            "Call"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_505": {
                "input": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(patch_1_f_prime - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f_prime - patch_2_f)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f_prime, patch_2_f, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.square(patch_1_f_prime - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f_prime, patch_2_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_525": {
                "input": {
                    "value": "loss_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(patch_1_m_prime, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_535": {
                "input": {
                    "value": "loss_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(patch_1_m_prime, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_627": {
                "variable": {
                    "value": "loss_mat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(l1, dim=1) - torch.sum(l3, dim=1) + self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_632": {
                "input": {
                    "value": "ln1_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_648": {
                "variable": {
                    "value": "loss_mat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(l2, dim=1) - torch.sum(l3, dim=1) + self.triplet_margin * 64",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_653": {
                "input": {
                    "value": "ln2_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime * patch_1_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_696": {
                "input": {
                    "value": "ln1_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_697": {
                "input": {
                    "value": "ln2_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime * patch_1_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_580": {
                "input": {
                    "value": "patch_1_f_prime - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_581": {
                "input": {
                    "value": "patch_2_f_prime - patch_1_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_582": {
                "input": {
                    "value": "patch_1_f - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_625": {
                "input": {
                    "value": "l1 - l3 + self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_645": {
                "input": {
                    "value": "l2 - l3 + self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_662": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_296": {
                "input": {
                    "value": "patch_2_f - patch_1_f_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cosine_similarity_601": {
                "x1": {
                    "value": "patch_1_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1_prime, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1_prime)",
                            "Call"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f_prime / norm",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_602": {
                "x1": {
                    "value": "patch_2_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2_prime, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2_prime, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2_prime)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "patch_1_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1)",
                            "Call"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_603": {
                "x1": {
                    "value": "patch_1_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_1, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_1)",
                            "Call"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_1_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f * scores_f",
                            "BinOp"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=4))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(self.__upsample(patch_2, scale_factor=2))",
                            "Call"
                        ],
                        [
                            "self.auxiliary_resnet(patch_2)",
                            "Call"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ],
                        [
                            "patch_2_f / norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_620": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(patch_1_f - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f - patch_2_f)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f, patch_2_f, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.square(patch_1_f - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f, patch_2_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_625": {
                "input": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(patch_1_f_prime - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f_prime - patch_2_f)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f_prime, patch_2_f, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.square(patch_1_f_prime - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f_prime, patch_2_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_628": {
                "input": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(patch_1_f_prime - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f_prime - patch_2_f)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f_prime, patch_2_f, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.square(patch_1_f_prime - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f_prime, patch_2_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_640": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(patch_1_f - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f - patch_2_f)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f, patch_2_f, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.square(patch_1_f - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f, patch_2_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_645": {
                "input": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_2_f_prime - patch_1_f)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.square(patch_2_f_prime - patch_1_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_2_f_prime, patch_1_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_649": {
                "input": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_2_f_prime - patch_1_f)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.square(patch_2_f_prime - patch_1_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_2_f_prime, patch_1_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_689": {
                "input": {
                    "value": "patch_2_f - patch_1_f_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_691": {
                "input": {
                    "value": "patch_2_f - patch_1_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_627": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(patch_1_f - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f - patch_2_f)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f, patch_2_f, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.square(patch_1_f - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f, patch_2_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_648": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(patch_1_f - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f - patch_2_f)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f, patch_2_f, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.square(patch_1_f - patch_2_f), axis=1)",
                            "Call"
                        ],
                        [
                            "1 - torch.cosine_similarity(patch_1_f, patch_2_f, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/heads/PhotometricHead.py": {
        "torch": {
            "stack_41": {
                "variable": {
                    "value": "patch_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patch_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(patch_hat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/heads/TripletHead.py": {
        "torch": {
            "abs_78": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f_prime - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_79": {
                "variable": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "patch_2_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[m2]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(patch_2_m, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "patch_1_m_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_m_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(patch_1_m_prime, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "patch_1_m_prime * patch_2_m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "variable": {
                    "value": "ln1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ln1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m * loss_mat_1, dim=-1), dim=-1) / torch.max(ln1_den, torch.ones_like(ln1_den))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(ln1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_117": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_f_prime - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_f_prime - patch_1_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "patch_1_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_1_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[m1]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(patch_1_m, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "patch_2_m_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_2_m_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(patch_2_m_prime, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "patch_2_m_prime * patch_1_m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "ln2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ln2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime * patch_1_m * loss_mat_2, dim=-1), dim=-1) / torch.max(ln2_den, torch.ones_like(ln2_den))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(ln2)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_149": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "ln3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.matmul(h1, h2) - eye) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_177": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_177": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "loss_mat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1 - l3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "loss_mat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(l1 - l3 + self.triplet_margin, torch.zeros_like(l1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "patch_1_m_prime * patch_2_m * loss_mat_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_102": {
                "input": {
                    "value": "ln1_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_97": {
                "variable": {
                    "value": "loss_mat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(l1, dim=1) - torch.sum(l3, dim=1) + self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_102": {
                "input": {
                    "value": "ln1_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_1_m_prime * patch_2_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_128": {
                "variable": {
                    "value": "loss_mat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2 - l3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "loss_mat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(l2 - l3 + self.triplet_margin, torch.zeros_like(l2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "patch_2_m_prime * patch_1_m * loss_mat_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_142": {
                "input": {
                    "value": "ln2_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime * patch_1_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_95": {
                "input": {
                    "value": "l1 - l3 + self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_137": {
                "variable": {
                    "value": "loss_mat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(l2, dim=1) - torch.sum(l3, dim=1) + self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_142": {
                "input": {
                    "value": "ln2_den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(patch_2_m_prime * patch_1_m, dim=-1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "patch_2_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[f2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_165": {
                "input": {
                    "value": "patch_1_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone.feature_extractor(patch_1_prime)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_166": {
                "input": {
                    "value": "patch_1_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[f1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_174": {
                "input": {
                    "value": "torch.abs(patch_2_f - patch_1_f_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_176": {
                "input": {
                    "value": "torch.abs(patch_1_f - patch_2_f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_178": {
                "input": {
                    "value": "(h1 - eye) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_1_f - patch_2_f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_95": {
                "input": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_1_f_prime - patch_2_f)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f_prime - patch_2_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_98": {
                "input": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_1_f_prime - patch_2_f)",
                            "Call"
                        ],
                        [
                            "torch.abs(patch_1_f_prime - patch_2_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_135": {
                "input": {
                    "value": "l2 - l3 + self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_170": {
                "input": {
                    "value": "patch_2_f_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone.feature_extractor(patch_2_prime)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_181": {
                "input": {
                    "value": "torch.abs(patch_1_f - patch_2_f_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "(h2 - eye) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_1_f - patch_2_f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_135": {
                "input": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_2_f_prime - patch_1_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_138": {
                "input": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_2_f_prime - patch_1_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_1_f - patch_2_f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_174": {
                "input": {
                    "value": "patch_2_f - patch_1_f_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_176": {
                "input": {
                    "value": "patch_1_f - patch_2_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(patch_1_f - patch_2_f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_181": {
                "input": {
                    "value": "patch_1_f - patch_2_f_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/heads/ransac_utils.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.resnet18.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.resnet18.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_55": {
                "variable": {
                    "value": "range_to_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "points1.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "points1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_56": {
                "variable": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range_to_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(start=0, end=points1.shape[1], dtype=torch.float32, device=points1.device)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "points_to_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size * points_per_hypothesis * hypothesis_no",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_63": {
                "variable": {
                    "value": "points1_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points1.reshape(batch_size, 1, points_no, 2).repeat(1, hypothesis_no, 1, 1)",
                            "Call"
                        ],
                        [
                            "points1.reshape(batch_size * hypothesis_no, points_no, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(range_to_sample, points_to_sample, replacement=True)",
                            "Call"
                        ],
                        [
                            "choice.reshape(batch_size, -1, 1).repeat((1, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_64": {
                "variable": {
                    "value": "points2_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points2.reshape(batch_size, 1, points_no, 2).repeat(1, hypothesis_no, 1, 1)",
                            "Call"
                        ],
                        [
                            "points2.reshape(batch_size * hypothesis_no, points_no, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(range_to_sample, points_to_sample, replacement=True)",
                            "Call"
                        ],
                        [
                            "choice.reshape(batch_size, -1, 1).repeat((1, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_94": {
                "variable": {
                    "value": "reprojection_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(points1_transformed - points2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "reprojection_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reprojection_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(points1_transformed - points2), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(reprojection_error, dim=-1)",
                            "Call"
                        ],
                        [
                            "reprojection_error.reshape(batch_size, hypothesis_no, -1)",
                            "Call"
                        ],
                        [
                            "torch.norm(points1_transformed - points2, p=None, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.norm(points1_transformed - points2, p=None, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.scoring_distance_beta * (reprojection_error - self.scoring_distance_threshold))",
                            "Call"
                        ],
                        [
                            "points1_transformed - points2",
                            "BinOp"
                        ],
                        [
                            "reprojection_error.permute((0, 2, 1))",
                            "Call"
                        ],
                        [
                            "reprojection_error.reshape(batch_size * hypothesis_no, 2, image_shape, image_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_100": {
                "variable": {
                    "value": "reprojection_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points1_transformed - points2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_101": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(reprojection_error < self.scoring_distance_threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_126": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_94": {
                "input": {
                    "value": "points1_transformed - points2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_107": {
                "variable": {
                    "value": "reprojection_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points1_transformed - points2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_108": {
                "variable": {
                    "value": "reprojection_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scoring_distance_beta * (reprojection_error - self.scoring_distance_threshold)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reprojection_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(points1_transformed - points2), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(reprojection_error, dim=-1)",
                            "Call"
                        ],
                        [
                            "reprojection_error.reshape(batch_size, hypothesis_no, -1)",
                            "Call"
                        ],
                        [
                            "torch.norm(points1_transformed - points2, p=None, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.norm(points1_transformed - points2, p=None, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.scoring_distance_beta * (reprojection_error - self.scoring_distance_threshold))",
                            "Call"
                        ],
                        [
                            "points1_transformed - points2",
                            "BinOp"
                        ],
                        [
                            "reprojection_error.permute((0, 2, 1))",
                            "Call"
                        ],
                        [
                            "reprojection_error.reshape(batch_size * hypothesis_no, 2, image_shape, image_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/checkpoint.py": {
        "torch": {
            "save_51": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, self._last_checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, self._last_checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, self._last_checkpoint_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_115": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "cached_f",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_115": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/dist_util.py": {
        "torch": {
            "cat_88": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/model_zoo.py": {
        "torch": {
            "load_67": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ],
                        [
                            "cache_url(url)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "SummaryWriter_507": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logs'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_696": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MultiStepLR_710": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=config['SOLVER']['LR'], betas=(config['SOLVER']['MOMENTUM_1'], config['SOLVER']['MOMENTUM_2']), weight_decay=l2_reg)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config['SOLVER']['MILESTONES']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.full_load(file)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "config['SOLVER']['LR_DECAY']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.full_load(file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_77": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class_to_call(dataset_root=dataset_root, camera_models_root=camera_models_root, seq_names_to_load=seq_names, transforms=composed_transforms, cache_path=cache_path)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(root=dataset_root, train=train, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, pair_max_frame_dist=pair_max_frame_dist, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_188": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class_to_call(dataset_root=dataset_root, camera_models_root=camera_models_root, seq_names_to_load=seq_names, transforms=composed_transforms, cache_path=cache_path)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(root=dataset_root, train=train, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, pair_max_frame_dist=pair_max_frame_dist, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_220": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class_to_call(dataset_root=dataset_root, camera_models_root=camera_models_root, seq_names_to_load=seq_names, transforms=composed_transforms, cache_path=cache_path)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(root=dataset_root, train=train, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_705": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['SOLVER']['LR']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.full_load(file)",
                            "Call"
                        ]
                    ]
                },
                "betas": {
                    "value": "(config['SOLVER']['MOMENTUM_1'], config['SOLVER']['MOMENTUM_2'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "l2_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(config['SOLVER']['L2_WEIGHT_DECAY']) if 'L2_WEIGHT_DECAY' in config['SOLVER'] is not None else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_737": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['MODEL']['PRETRAINED'] if 'PRETRAINED' in config['MODEL'] is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class_to_call(dataset_root=dataset_root, camera_models_root=camera_models_root, seq_names_to_load=seq_names, transforms=composed_transforms, cache_path=cache_path)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(root=dataset_root, train=train, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, pair_max_frame_dist=pair_max_frame_dist, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class_to_call(dataset_root=dataset_root, camera_models_root=camera_models_root, seq_names_to_load=seq_names, transforms=composed_transforms, cache_path=cache_path)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(root=dataset_root, train=train, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, pair_max_frame_dist=pair_max_frame_dist, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform_module.CollatorWithBlobs(patch_1_key=collator_patch_1, patch_2_key=collator_patch_2, blob_porosity=collator_blob_porosity, blobiness=collator_blobiness, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "transform_module.CollatorWithBlobs(patch_1_key=collator_patch_1, patch_2_key=collator_patch_2, blob_porosity=collator_blob_porosity, blobiness=collator_blobiness, random_seed=random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_276": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class_to_call(dataset_root=dataset_root, camera_models_root=camera_models_root, seq_names_to_load=seq_names, transforms=composed_transforms, cache_path=cache_path)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(root=dataset_root, train=train, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, pair_max_frame_dist=pair_max_frame_dist, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_281": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class_to_call(dataset_root=dataset_root, camera_models_root=camera_models_root, seq_names_to_load=seq_names, transforms=composed_transforms, cache_path=cache_path)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(root=dataset_root, train=train, transform=composed_transforms)",
                            "Call"
                        ],
                        [
                            "dataset_class_to_call(dataset_root=split, transforms=composed_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, pair_max_frame_dist=pair_max_frame_dist, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "sampler_class_to_call(data_source=dataset, batch_size=batch_size, samples_per_epoch=samples_per_epoch, mode=mode, random_seed=random_seed)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform_module.CollatorWithBlobs(patch_1_key=collator_patch_1, patch_2_key=collator_patch_2, blob_porosity=collator_blob_porosity, blobiness=collator_blobiness, random_seed=random_seed)",
                            "Call"
                        ],
                        [
                            "transform_module.CollatorWithBlobs(patch_1_key=collator_patch_1, patch_2_key=collator_patch_2, blob_porosity=collator_blob_porosity, blobiness=collator_blobiness, random_seed=random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_513": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_517": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.Sequential(backbone, head)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_327": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - torch.cosine_similarity(ground_truth, network_output, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__383": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "gradient_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['SOLVER']['GRADIENT_CLIP'] if 'GRADIENT_CLIP' in config['SOLVER'] is not None else -1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_count_514": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_462": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - torch.cosine_similarity(ground_truth, network_output, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_737": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_327": {
                "x1": {
                    "value": "ground_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "network_output",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_462": {
                "x1": {
                    "value": "ground_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "network_output",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}