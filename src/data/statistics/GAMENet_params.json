{
    "code/baseline/train_DMNC.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_98": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "criterion2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                }
            },
            "save_173": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_118": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, resume_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_JA_%.4f_DDI_%.4f.model' % (epoch, ja, ddi_rate)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/baseline/train_LR.py": {
        "sklearn": {
            "LogisticRegression_84": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "0.90909",
                    "type": "float",
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_85": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression(C=0.90909)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogisticRegression_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_73": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression(C=0.90909)",
                            "Call"
                        ]
                    ]
                }
            },
            "GridSearchCV_74": {
                "variable": {
                    "value": "lr_gs",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(model)",
                            "Call"
                        ],
                        [
                            "OneVsRestClassifier(model)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'estimator__penalty': ['l2'], 'estimator__C': np.linspace(2e-05, 1, 100)}",
                            "Dict"
                        ]
                    ]
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/baseline/train_Leap.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ],
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "device_158": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_180": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ],
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "save_236": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_173": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, fine_tune_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_101": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, resume_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_JA_%.4f_DDI_%.4f.model' % (epoch, ja, ddi_rate)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_121": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(adm)",
                            "Call"
                        ],
                        [
                            "output_logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "model(adm)",
                            "Call"
                        ],
                        [
                            "model(adm)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.LongTensor(loss_target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'fine_Epoch_%d_JA_%.4f_DDI_%.4f.model' % (epoch, ja, ddi_rate)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_207": {
                "input": {
                    "value": "F.log_softmax(output_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_207": {
                "input": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(adm)",
                            "Call"
                        ],
                        [
                            "output_logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "model(adm)",
                            "Call"
                        ],
                        [
                            "model(adm)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/baseline/train_Retain.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_89": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                }
            },
            "save_165": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, resume_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_JA_%.4f_DDI_%.4f.model' % (epoch, ja, ddi_rate)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input[:i])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_134": {
                "input": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input[:i])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.FloatTensor(target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/deplicated/train_GAMENet.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_83": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "save_180": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_107": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, resume_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_JA_%.4f_DDI_%.4f.model' % (epoch, ja, ddi_rate)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_135": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.FloatTensor(loss1_target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multilabel_margin_loss_138": {
                "variable": {
                    "value": "loss3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.sigmoid(target_output1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor(loss3_target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_138": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "code/deplicated/train_GMNN.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "save_154": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_95": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, resume_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_Loss1_%.4f.model' % (epoch, np.mean(loss_record1))), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_123": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.FloatTensor(loss1_target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_124": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_output2",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor(loss2_target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multilabel_margin_loss_127": {
                "variable": {
                    "value": "loss3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.sigmoid(target_output1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor(loss3_target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_127": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "code/deplicated/train_SMM.py": {
        "sklearn": {
            "f1_score_20": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_26": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_127": {
                "variable": {
                    "value": "criterion1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_128": {
                "variable": {
                    "value": "criterion2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiLabelMarginLoss_129": {
                "variable": {
                    "value": "criterion3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "save_189": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, resume_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_Loss1_%.4f.model' % (epoch, np.mean(loss_record1))), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_161": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "code/deplicated/train_TDNC.py": {
        "sklearn": {
            "f1_score_20": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_26": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_100": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_125": {
                "variable": {
                    "value": "criterion1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_126": {
                "variable": {
                    "value": "criterion2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiLabelMarginLoss_127": {
                "variable": {
                    "value": "criterion3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_Loss1_%.4f.model' % (epoch, np.mean(loss_record1))), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/deplicated/train_two_loss.py": {
        "sklearn": {
            "f1_score_20": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_26": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_148": {
                "variable": {
                    "value": "criterion1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_149": {
                "variable": {
                    "value": "criterion2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "save_196": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_Loss1_%.4f.model' % (epoch, np.mean(loss_record1))), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0][0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "code/deplicated/train_two_loss_copy.py": {
        "sklearn": {},
        "torch": {}
    },
    "code/util.py": {
        "sklearn": {
            "train_test_split_26": {
                "variable": {
                    "value": "(x_train, x_eval, y_train, y_eval)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "2 / 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_27": {
                "variable": {
                    "value": "(x_eval, x_test, y_eval, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_99": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_105": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred_prob[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_precision_score_111": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_185": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_191": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_precision_score_197": {
                "y_true": {
                    "value": "y_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/deplicated/models.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != K - 1 else vocab_size[i] + 1, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(emb_dim, emb_dim * 2, batch_first=True) for _ in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.query1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.query2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.inter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "input_hidden_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1_hidden, input2_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "variable": {
                    "value": "input_hidden_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i], emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_145": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LSTM(emb_dim, emb_dim * 2, batch_first=True) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[K - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sequence_container",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_182": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_194": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i], emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DNC(input_size=emb_dim, hidden_size=emb_dim * 2, rnn_type='lstm', num_layers=1, num_hidden_layers=1, nr_cells=16, cell_size=emb_dim, read_heads=1, batch_first=True, gpu_id=0) for _ in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size[K - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_260": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sequence_container",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_260": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_272": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != K - 1 else self.output_size, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_290": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(emb_dim, emb_dim, batch_first=True) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_292": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_366": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_385": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != K - 1 else self.output_size, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_387": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_389": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DNC(input_size=emb_dim, hidden_size=emb_dim, rnn_type='gru', num_layers=1, num_hidden_layers=1, nr_cells=16, cell_size=emb_dim, read_heads=1, batch_first=True, gpu_id=0) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_401": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(emb_dim * 3, 1, bias=False) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_415": {
                "variable": {
                    "value": "self.attn_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_417": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_424": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_424": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_511": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_530": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != K - 1 else self.output_size, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_532": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_534": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(emb_dim, emb_dim, batch_first=True) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_535": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(emb_dim * 3, 1, bias=False) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_537": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_538": {
                "variable": {
                    "value": "self.attn_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_540": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_547": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_547": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_624": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_641": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != K - 1 else self.output_size, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_643": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_645": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(emb_dim, emb_dim * 2, batch_first=True) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_647": {
                "variable": {
                    "value": "self.mlp_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_653": {
                "variable": {
                    "value": "self.rnn_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_654": {
                "variable": {
                    "value": "self.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_668": {
                "variable": {
                    "value": "input_hidden_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1_hidden, input2_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_668": {
                "variable": {
                    "value": "input_hidden_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_708": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_727": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != K - 1 else self.output_size, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_729": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_731": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(emb_dim, emb_dim, batch_first=True) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_732": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(emb_dim * 3, 1, bias=False) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_734": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_735": {
                "variable": {
                    "value": "self.attn_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_737": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_744": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_744": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_821": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_835": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "voc_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_838": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_843": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gcn1(self.x, self.adj)",
                            "Call"
                        ],
                        [
                            "F.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "self.dropout(node_embedding)",
                            "Call"
                        ],
                        [
                            "self.gcn2(node_embedding, self.adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_867": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i], emb_dim) for i in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_869": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_871": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(emb_dim, emb_dim * 2, batch_first=True) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_872": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_881": {
                "variable": {
                    "value": "self.inter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(emb_dim, emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_883": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_891": {
                "variable": {
                    "value": "self.seq_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_892": {
                "variable": {
                    "value": "self.seq_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_913": {
                "variable": {
                    "value": "input_hidden_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1_hidden, input2_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_913": {
                "variable": {
                    "value": "input_hidden_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_918": {
                "variable": {
                    "value": "drug_memory_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_919": {
                "variable": {
                    "value": "key_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query(input_hidden_combined)",
                            "Call"
                        ],
                        [
                            "self.query(input_hidden_combined)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_920": {
                "variable": {
                    "value": "fact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(query, drug_memory_T)",
                            "Call"
                        ],
                        [
                            "torch.mm(query, drug_memory_T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_971": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_991": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i], emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_993": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_995": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(emb_dim, emb_dim * 2, batch_first=True) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_996": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_1003": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_1011": {
                "variable": {
                    "value": "self.seq_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_1012": {
                "variable": {
                    "value": "self.seq_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1033": {
                "variable": {
                    "value": "input_hidden_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1_hidden, input2_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1033": {
                "variable": {
                    "value": "input_hidden_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1038": {
                "variable": {
                    "value": "drug_memory_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1039": {
                "variable": {
                    "value": "key_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query(input_hidden_combined)",
                            "Call"
                        ],
                        [
                            "self.query(input_hidden_combined)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_1040": {
                "variable": {
                    "value": "fact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(query, drug_memory_T)",
                            "Call"
                        ],
                        [
                            "torch.mm(query, drug_memory_T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1078": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_1099": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != 2 else vocab_size[2] + 2, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_1102": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DNC(input_size=emb_dim, hidden_size=emb_dim, rnn_type='gru', num_layers=1, num_hidden_layers=1, nr_cells=16, cell_size=emb_dim, read_heads=1, batch_first=True, gpu_id=0) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_1115": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim + 2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_1129": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != 2 else vocab_size[2] + 2, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_1131": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_1133": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DNC(input_size=emb_dim, hidden_size=emb_dim, rnn_type='gru', num_layers=1, num_hidden_layers=1, nr_cells=16, cell_size=emb_dim, read_heads=1, batch_first=True, gpu_id=0, independent_linears=False) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_1147": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim + emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1149": {
                "variable": {
                    "value": "self.interface_weighting",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * (emb_dim + 1 + 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_1150": {
                "variable": {
                    "value": "self.decoder_r2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_1152": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2] + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1244": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, :r * w].contiguous().view(b, r, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_1246": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, r * w:r * w + r].contiguous().view(b, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1248": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, r * w + r:].contiguous().view(b, r, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_1263": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != 2 else vocab_size[2] + 2, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_1265": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_1267": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DNC(input_size=emb_dim, hidden_size=emb_dim, rnn_type='gru', num_layers=1, num_hidden_layers=1, nr_cells=16, cell_size=emb_dim, read_heads=1, batch_first=True, gpu_id=0) for _ in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_1280": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_1282": {
                "variable": {
                    "value": "self.decoder_r2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1287": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2] + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_10": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor(weight).view(1, -1, 1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_92": {
                "variable": {
                    "value": "drug_memory_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_94": {
                "variable": {
                    "value": "key_weights1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query1(input_hidden_combined)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_95": {
                "variable": {
                    "value": "fact1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_weights1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(query1, drug_memory_T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_97": {
                "variable": {
                    "value": "key_weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query2(target_hidden.squeeze(dim=0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(drug_memory, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_98": {
                "variable": {
                    "value": "fact2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(query2, drug_memory_T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_106": {
                "variable": {
                    "value": "neg_pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_131": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_199": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_237": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_277": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_318": {
                "variable": {
                    "value": "encoder_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "state_container[:K - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_318": {
                "variable": {
                    "value": "encoder_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_320": {
                "variable": {
                    "value": "encoder_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "state_container",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * K",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_320": {
                "variable": {
                    "value": "encoder_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_339": {
                "variable": {
                    "value": "enc_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_371": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bmm_426": {
                "input": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_516": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bmm_549": {
                "input": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_629": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_696": {
                "variable": {
                    "value": "input_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.seq_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.seq_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_713": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bmm_746": {
                "input": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.attn[i](torch.cat([h, o], dim=-1)).squeeze(dim=-1), dim=-1).unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_826": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_859": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "index_select_924": {
                "variable": {
                    "value": "true_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(input[2]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_927": {
                "variable": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(drug_memory, dim=0, index=torch.LongTensor(input[2]).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "true_embedding.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_930": {
                "variable": {
                    "value": "all_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_933": {
                "variable": {
                    "value": "neg_pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_939": {
                "variable": {
                    "value": "seq_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fact, seq_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_939": {
                "variable": {
                    "value": "seq_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_959": {
                "variable": {
                    "value": "input_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.seq_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.seq_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_962": {
                "variable": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() + self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn() + torch.mm(self.ddi_gcn(), self.inter)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(self.embeddings[2](torch.LongTensor(range(0, self.vocab_size[2])).unsqueeze(dim=0).to(self.device))).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor([input_token]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_962": {
                "variable": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_984": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_1047": {
                "variable": {
                    "value": "seq_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fact.unsqueeze(dim=0), seq_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1066": {
                "variable": {
                    "value": "input_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.seq_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.seq_output(target_output.squeeze(dim=0)).squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_1089": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_1119": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_1172": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ch1[0], ch2[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_1253": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_1316": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ch1[0], ch2[0], ch3[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_309": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_345": {
                "variable": {
                    "value": "(output, argmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_489": {
                "variable": {
                    "value": "predict_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_498": {
                "tensors": {
                    "value": "pre_tensor_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_500": {
                "tensors": {
                    "value": "last_tensor_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_574": {
                "variable": {
                    "value": "target_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1_hidden, input2_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_604": {
                "variable": {
                    "value": "predict_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_611": {
                "tensors": {
                    "value": "pre_tensor_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_613": {
                "tensors": {
                    "value": "last_tensor_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_648": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_649": {
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_651": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_771": {
                "variable": {
                    "value": "target_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1_hidden, input2_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_801": {
                "variable": {
                    "value": "predict_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_808": {
                "tensors": {
                    "value": "pre_tensor_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_810": {
                "tensors": {
                    "value": "last_tensor_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_873": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_874": {
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_875": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_876": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_884": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_885": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_886": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_887": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_893": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_894": {
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_895": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_896": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_917": {
                "input": {
                    "value": "self.ddi_gcn()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.inter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_921": {
                "tensors": {
                    "value": "[fact, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_953": {
                "input": {
                    "value": "self.ddi_gcn()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.inter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_997": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_998": {
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_999": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1000": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_1004": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1005": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1006": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1007": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_1013": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1014": {
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1015": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1016": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_1041": {
                "tensors": {
                    "value": "[fact, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_1157": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1159": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1223": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_1226": {
                "variable": {
                    "value": "input_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1231": {
                "tensors": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_1283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1284": {
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_1285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1366": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_1369": {
                "variable": {
                    "value": "input_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query1, query2, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([query1, query2], dim=-1))",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "output.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decode(self.output(output).squeeze())",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden[0], input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([target_hidden, input1_context, input2_context], dim=-1)).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([fact, query], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2, r3], dim=-1).squeeze(dim=0))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat([o1, o2, o3], dim=-1).squeeze(dim=0) + output)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1382": {
                "tensors": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != K - 1 else vocab_size[i] + 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_24": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "[query1, query2, fact1, fact2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "[query1, query2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_143": {
                "num_embeddings": {
                    "value": "vocab_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_146": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_211": {
                "num_embeddings": {
                    "value": "vocab_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_289": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != K - 1 else self.output_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_290": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_327": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_386": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != K - 1 else self.output_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_401": {
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_531": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != K - 1 else self.output_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_534": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_535": {
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_642": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != K - 1 else self.output_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_645": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_690": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_728": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != K - 1 else self.output_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_731": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_732": {
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_868": {
                "num_embeddings": {
                    "value": "vocab_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_871": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsigmoid_928": {
                "input": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(true_embedding, true_embedding.t())",
                            "Call"
                        ],
                        [
                            "-F.logsigmoid(batch_pos).sum()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_928": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsigmoid_931": {
                "input": {
                    "value": "-all_neg",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_992": {
                "num_embeddings": {
                    "value": "vocab_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_995": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_1069": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1100": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != 2 else vocab_size[2] + 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_1130": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != 2 else vocab_size[2] + 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_1203": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1264": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != 2 else vocab_size[2] + 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_1292": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1294": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1376": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_467": {
                "tensors": {
                    "value": "input1_hidden + input2_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_479": {
                "tensors": {
                    "value": "[target_input, input1_context, input2_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_481": {
                "input": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_599": {
                "tensors": {
                    "value": "[target_input, input1_context, input2_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_601": {
                "input": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_661": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_665": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_676": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_796": {
                "tensors": {
                    "value": "[target_input, input1_context, input2_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_798": {
                "input": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.attn_combined(torch.cat([target_input, input1_context, input2_context], dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_906": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_910": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1026": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1030": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1046": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1182": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1184": {
                "tensors": {
                    "value": "[item_tensor, r1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1198": {
                "tensors": {
                    "value": "[r1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1207": {
                "tensors": {
                    "value": "[item_tensor, r1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1221": {
                "tensors": {
                    "value": "[r1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_1229": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1310": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1327": {
                "tensors": {
                    "value": "[item_tensor, r1.unsqueeze(dim=0), r2.unsqueeze(dim=0), r3.unsqueeze(dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1340": {
                "tensors": {
                    "value": "[r1, r2, r3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_1346": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1351": {
                "tensors": {
                    "value": "[item_tensor, r1.unsqueeze(dim=0), r2.unsqueeze(dim=0), r3.unsqueeze(dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1364": {
                "tensors": {
                    "value": "[r1, r2, r3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1364": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_443": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_449": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_474": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_566": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_570": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_594": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_763": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_767": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_791": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1036": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1324": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1341": {
                "tensors": {
                    "value": "[o1, o2, o3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1341": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1365": {
                "tensors": {
                    "value": "[o1, o2, o3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1365": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1373": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_487": {
                "tensors": {
                    "value": "[target_hidden[0], input1_context, input2_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_603": {
                "tensors": {
                    "value": "[target_hidden, input1_context, input2_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_800": {
                "tensors": {
                    "value": "[target_hidden, input1_context, input2_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_424": {
                "tensors": {
                    "value": "[h, o]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_547": {
                "tensors": {
                    "value": "[h, o]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_744": {
                "tensors": {
                    "value": "[h, o]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/deplicated/seq2seq.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "MAX_LEN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "len(input_seq)",
                            "Call"
                        ],
                        [
                            "len(input_seq)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "encoder.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[SOS_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_207": {
                "variable": {
                    "value": "encoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_208": {
                "variable": {
                    "value": "decoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_212": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "GRU_75": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_92": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "GRU_93": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_95": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded",
                            "variable"
                        ],
                        [
                            "self.embedding(input).view(1, 1, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.softmax(self.out(output[0]))",
                            "Call"
                        ],
                        [
                            "torch.cat((embedded[0], attn_applied[0]), 1)",
                            "Call"
                        ],
                        [
                            "self.attn_combine(output).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.out(output[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_115": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_119": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat((embedded[0], hidden[0]), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_128": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded[0], attn_applied[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded",
                            "variable"
                        ],
                        [
                            "self.embedding(input).view(1, 1, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.softmax(self.out(output[0]))",
                            "Call"
                        ],
                        [
                            "torch.cat((embedded[0], attn_applied[0]), 1)",
                            "Call"
                        ],
                        [
                            "self.attn_combine(output).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.out(output[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_299": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MAX_LEN",
                            "Method Argument"
                        ],
                        [
                            "MAX_LEN",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "encoder.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[SOS_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_391": {
                "variable": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "evaluate(encoder1, decoder1, input_tensor)",
                            "Call"
                        ],
                        [
                            "F.softmax(output_logits)",
                            "Call"
                        ],
                        [
                            "output_logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "evaluate(encoder, decoder, input_tensor)",
                            "Call"
                        ],
                        [
                            "F.softmax(output_logits)",
                            "Call"
                        ],
                        [
                            "output_logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "data": {
                    "value": "pair[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_200": {
                "data": {
                    "value": "pair[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_240": {
                "variable": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "evaluate(encoder1, decoder1, input_tensor)",
                            "Call"
                        ],
                        [
                            "F.softmax(output_logits)",
                            "Call"
                        ],
                        [
                            "output_logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "evaluate(encoder, decoder, input_tensor)",
                            "Call"
                        ],
                        [
                            "F.softmax(output_logits)",
                            "Call"
                        ],
                        [
                            "output_logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "save_282": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'encoder_Epoch_%d_JA_%.4f_DDI_%.4f.model' % (epoch, ja, dd_cnt / all_cnt)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_286": {
                "obj": {
                    "value": "decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'decoder_Epoch_%d_JA_%.4f_DDI_%.4f.model' % (epoch, ja, dd_cnt / all_cnt)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_321": {
                "tensors": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "evaluate(encoder1, decoder1, input_tensor)",
                            "Call"
                        ],
                        [
                            "F.softmax(output_logits)",
                            "Call"
                        ],
                        [
                            "output_logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "evaluate(encoder, decoder, input_tensor)",
                            "Call"
                        ],
                        [
                            "F.softmax(output_logits)",
                            "Call"
                        ],
                        [
                            "output_logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_336": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'encoder_Epoch_10_P@3_0.3293_PRAUC_0.3246.model'), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_337": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'decoder_Epoch_10_p_3_0.3293_PRAUC_0.3246.model'), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "(embedded[0], hidden[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/deplicated/train.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_41": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.002",
                            "float"
                        ]
                    ]
                }
            },
            "save_90": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_Loss_%.4f_P1_%.4f.model' % (epoch, np.mean(loss_record), p_1)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/deplicated/train_attn.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "last_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(last_outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_28": {
                "variable": {
                    "value": "(last_v, last_arg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(last_outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, resume_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_Loss_%.4f.model' % (epoch, np.mean(loss_record))), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/deplicated/train_memory.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_72": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "sigmoid_27": {
                "variable": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_prob[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "open(os.path.join('saved', model_name, resume_name), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_Loss_%.4f.model' % (epoch, np.mean(loss_record))), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/layers.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_31": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_32": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/models.py": {
        "torch": {
            "eye_21": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "voc_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gcn1(self.x, self.adj)",
                            "Call"
                        ],
                        [
                            "F.relu(node_embedding)",
                            "Call"
                        ],
                        [
                            "self.dropout(node_embedding)",
                            "Call"
                        ],
                        [
                            "self.gcn2(node_embedding, self.adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i], emb_dim) for i in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(emb_dim, emb_dim * 2, batch_first=True) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.inter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "i1_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "i1_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(i1_seq, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "i2_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "i2_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(i2_seq, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "patient_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o1, o2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "patient_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "key_weights1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(query, drug_memory.t())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_123": {
                "variable": {
                    "value": "fact1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_weights1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(torch.mm(query, drug_memory.t()), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() - self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_165": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(vocab_size[i] if i != 2 else vocab_size[2] + 2, emb_dim) for i in range(K)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DNC(input_size=emb_dim, hidden_size=emb_dim, rnn_type='gru', num_layers=1, num_hidden_layers=1, nr_cells=16, cell_size=emb_dim, read_heads=1, batch_first=True, gpu_id=0, independent_linears=False) for _ in range(K - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_183": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim + emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.interface_weighting",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * (emb_dim + 1 + 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.decoder_r2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2] + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_280": {
                "variable": {
                    "value": "read_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, :r * w].contiguous().view(b, r, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_282": {
                "variable": {
                    "value": "read_strengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, r * w:r * w + r].contiguous().view(b, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_284": {
                "variable": {
                    "value": "read_modes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, r * w + r:].contiguous().view(b, r, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_299": {
                "variable": {
                    "value": "self.enc_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(voc_size[0], emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_303": {
                "variable": {
                    "value": "self.dec_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(voc_size[2] + 2, emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_308": {
                "variable": {
                    "value": "self.dec_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "voc_size[2] + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_376": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(self.input_len + 1, self.emb_size, padding_idx=self.input_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_381": {
                "variable": {
                    "value": "self.alpha_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_382": {
                "variable": {
                    "value": "self.beta_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_384": {
                "variable": {
                    "value": "self.alpha_li",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_385": {
                "variable": {
                    "value": "self.beta_li",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_387": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_405": {
                "variable": {
                    "value": "visit_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "visit_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(torch.LongTensor(input_np).to(device))",
                            "Call"
                        ],
                        [
                            "torch.sum(visit_emb, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_412": {
                "variable": {
                    "value": "attn_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha_li(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_413": {
                "variable": {
                    "value": "attn_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta_li(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_416": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_g * attn_h * visit_emb",
                            "BinOp"
                        ],
                        [
                            "torch.sum(c, dim=0).unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_416": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_12": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_44": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "variable": {
                    "value": "visit_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(query, history_keys.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_128": {
                "variable": {
                    "value": "fact2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visit_weight.mm(history_values)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ehr_gcn() - self.ddi_gcn() * self.inter",
                            "BinOp"
                        ],
                        [
                            "self.ehr_gcn()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_135": {
                "variable": {
                    "value": "neg_pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.output(F.relu(hidden_state))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_155": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ch1[0], ch2[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_292": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_368": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "emb_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "emb_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_122": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "drug_memory.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "[query, fact1, fact2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_193": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_259": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.output(F.relu(hidden_state))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_262": {
                "variable": {
                    "value": "input_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.output(F.relu(hidden_state))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_267": {
                "tensors": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_300": {
                "num_embeddings": {
                    "value": "voc_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_301": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_304": {
                "num_embeddings": {
                    "value": "voc_size[2] + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_305": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_326": {
                "variable": {
                    "value": "dec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "combined_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_state_repeat, input_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_334": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(combined_input).t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_342": {
                "tensors": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "combined_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_state_repeat, input_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_353": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(combined_input).t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_362": {
                "tensors": {
                    "value": "output_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_377": {
                "num_embeddings": {
                    "value": "self.input_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.input_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_378": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_53": {
                "num_embeddings": {
                    "value": "vocab_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_56": {
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_126": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "history_keys.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_166": {
                "num_embeddings": {
                    "value": "vocab_size[i] if i != 2 else vocab_size[2] + 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_239": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_218": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "[item_tensor, r1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "tensors": {
                    "value": "[r1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "[item_tensor, r1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "[r1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_265": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "tensors": {
                    "value": "[input_embedding, dec_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_337": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_355": {
                "tensors": {
                    "value": "[input_embedding, dec_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_355": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_358": {
                "input": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dec_input",
                            "variable"
                        ],
                        [
                            "hidden_state.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "dec_input",
                            "variable"
                        ],
                        [
                            "hidden_state.squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_360": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat([query, fact1, fact2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.decoder_r2o(torch.cat([r1, r2], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(output + o3).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.output(F.relu(hidden_state))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_86": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_340": {
                "input": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dec_input",
                            "variable"
                        ],
                        [
                            "hidden_state.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "dec_input",
                            "variable"
                        ],
                        [
                            "hidden_state.squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_GAMENet.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "1203",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_100": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                }
            },
            "save_214": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'final.model'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "open(resume_name, 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_204": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join('saved', model_name, 'Epoch_%d_JA_%.4f_DDI_%.4f.model' % (epoch, ja, ddi_rate)), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input[:adm_idx + 1])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_155": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input[:adm_idx + 1])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.FloatTensor(loss1_target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multilabel_margin_loss_156": {
                "variable": {
                    "value": "loss3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.sigmoid(target_output1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor(loss3_target).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_156": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input[:adm_idx + 1])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_158": {
                "input": {
                    "value": "target_output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input[:adm_idx + 1])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(target_output1).detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}