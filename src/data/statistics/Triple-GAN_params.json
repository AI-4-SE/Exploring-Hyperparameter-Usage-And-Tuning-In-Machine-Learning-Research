{
    "library/eval_fid.py": {
        "tensorflow": {
            "GraphDef_39": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_41": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_38": {
                "name": {
                    "value": "pth",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_66": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "library/eval_inception_score.py": {
        "tensorflow": {
            "GraphDef_83": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "InputTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_88": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'ExpandDims:0': input_tensor}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3, [1, 2]), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_80": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "input": {
                    "value": "pool3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "library/data_iters.py": {
        "torch": {
            "DataLoader_405": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "get_dataset(train, subset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_432": {
                "variable": {
                    "value": "img_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(img_list, 0).cuda()",
                            "Call"
                        ],
                        [
                            "wrapper(img_list)",
                            "Call"
                        ],
                        [
                            "np.concatenate(img_list, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(img_list, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "self.ZCA_mat_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.ZCA_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "self.inv_ZCA_mat_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.inv_ZCA_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "self.mean_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_65": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(s[0], -1) - self.mean_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.ZCA_mat_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_341": {
                "variable": {
                    "value": "sets",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('/home/LargeData/Regular/cifar', train=train, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('/home/LargeData/Regular/svhn', split=split, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('/home/LargeData/Regular/cifar', train=train, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "datasets.STL10('/home/LargeData/Regular/', split=split, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(sets, final_indices)",
                            "Call"
                        ],
                        [
                            "NumpyDataset(img_list.astype(np.uint8), label_list.astype(np.int), transf)",
                            "Call"
                        ],
                        [
                            "NumpyDataset(img_list.astype(np.uint8), label_list.astype(np.int), transf)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('/home/LargeData/Regular/cifar', train=train, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(sets, final_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "final_indices",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Subset_393": {
                "variable": {
                    "value": "sets",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('/home/LargeData/Regular/cifar', train=train, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN('/home/LargeData/Regular/svhn', split=split, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('/home/LargeData/Regular/cifar', train=train, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "datasets.STL10('/home/LargeData/Regular/', split=split, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(sets, final_indices)",
                            "Call"
                        ],
                        [
                            "NumpyDataset(img_list.astype(np.uint8), label_list.astype(np.int), transf)",
                            "Call"
                        ],
                        [
                            "NumpyDataset(img_list.astype(np.uint8), label_list.astype(np.int), transf)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10('/home/LargeData/Regular/cifar', train=train, download=True, transform=transf)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(sets, final_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "final_indices",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_103": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(tensor, [pad, pad, pad, pad])",
                            "Call"
                        ],
                        [
                            "torch.cat(new_tensor_list, 0)",
                            "Call"
                        ],
                        [
                            "self.zca.apply(tensor)",
                            "Call"
                        ],
                        [
                            "(tensor + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "(tensor - channel_mean) / channel_std",
                            "BinOp"
                        ],
                        [
                            "F.pad(tensor, [pad, pad, pad, pad])",
                            "Call"
                        ],
                        [
                            "torch.cat(new_tensor_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad, pad, pad, pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_106": {
                "variable": {
                    "value": "inv_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "leny - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_tensor_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "tloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_dataset(True, 0)",
                            "Call"
                        ],
                        [
                            "get_dataset(train=True, subset=5000)",
                            "Call"
                        ],
                        [
                            "get_dataset(train=True, subset=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "channel_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.4914, 0.4822, 0.4465]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "channel_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.247, 0.2435, 0.2616]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_178": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(tensor, [pad, pad, pad, pad])",
                            "Call"
                        ],
                        [
                            "torch.cat(new_tensor_list, 0)",
                            "Call"
                        ],
                        [
                            "self.zca.apply(tensor)",
                            "Call"
                        ],
                        [
                            "(tensor + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "(tensor - channel_mean) / channel_std",
                            "BinOp"
                        ],
                        [
                            "F.pad(tensor, [pad, pad, pad, pad])",
                            "Call"
                        ],
                        [
                            "torch.cat(new_tensor_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad, pad, pad, pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_181": {
                "variable": {
                    "value": "inv_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "leny - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_tensor_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Subset_395": {
                "variable": {
                    "value": "sets_strong",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sets_strong",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('/home/LargeData/Regular/cifar', train=train, download=True, transform=transf_strong)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(sets_strong, final_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "final_indices",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "max_436": {
                "input": {
                    "value": "img_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(img_list, 0).cuda()",
                            "Call"
                        ],
                        [
                            "wrapper(img_list)",
                            "Call"
                        ],
                        [
                            "np.concatenate(img_list, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(img_list, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_436": {
                "input": {
                    "value": "img_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(img_list, 0).cuda()",
                            "Call"
                        ],
                        [
                            "wrapper(img_list)",
                            "Call"
                        ],
                        [
                            "np.concatenate(img_list, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(img_list, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "library/evaluation.py": {
        "torch": {
            "CrossEntropyLoss_10": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_20": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "library/inputs.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LeakyReLU_28": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_36": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "beta1",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "FLAGS.c_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "library/loss_cla.py": {
        "torch": {
            "CrossEntropyLoss_9": {
                "variable": {
                    "value": "crossentropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_10": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_11": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "batch_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:lpi], data_u[lpi:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_293": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_294": {
                "variable": {
                    "value": "logq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_295": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_330": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_325": {
                "ndarray": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d.numpy()",
                            "Call"
                        ],
                        [
                            "d / (np.sqrt(np.sum(d ** 2, axis=(1, 2, 3))).reshape((-1, 1, 1, 1)) + 1e-16)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(ul_x.size()).normal_()",
                            "Call"
                        ],
                        [
                            "xi * _l2_normalize(d)",
                            "BinOp"
                        ],
                        [
                            "Variable(d.cuda(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "d.grad.data.clone().cpu()",
                            "Call"
                        ],
                        [
                            "_l2_normalize(d)",
                            "Call"
                        ],
                        [
                            "Variable(d.cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_65": {
                "input": {
                    "value": "prob * logprob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "input": {
                    "value": "loss_l.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_112": {
                "input": {
                    "value": "entropy(logit_u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "(prob_u_2 - prob_t) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_162": {
                "input": {
                    "value": "(prob - prob_t) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_grad_norm__190": {
                "parameters": {
                    "value": "netC.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__226": {
                "parameters": {
                    "value": "netC.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__247": {
                "parameters": {
                    "value": "netC.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__266": {
                "parameters": {
                    "value": "netC.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__285": {
                "parameters": {
                    "value": "netC.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_315": {
                "input": {
                    "value": "entropy(logit_u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_134": {
                "input": {
                    "value": "(logit_u_2 - logit_u_1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "library/loss_gan.py": {
        "torch": {
            "binary_cross_entropy_with_logits_11": {
                "variable": {
                    "value": "loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_real",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netD(x_real, label)",
                            "Call"
                        ],
                        [
                            "netD(x_real, label)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_12": {
                "variable": {
                    "value": "loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_19": {
                "variable": {
                    "value": "loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_29": {
                "variable": {
                    "value": "loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 - d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_30": {
                "variable": {
                    "value": "loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_29": {
                "input": {
                    "value": "1.0 - d_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_30": {
                "input": {
                    "value": "1.0 + d_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "d_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "library/loss_triplegan.py": {
        "torch": {
            "Softmax_9": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_10": {
                "variable": {
                    "value": "crossentropy_ele",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_32": {
                "variable": {
                    "value": "loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 - d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_33": {
                "variable": {
                    "value": "loss_fake_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 - d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "loss_fake_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 - d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "loss_fake_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x_real_for_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_l[:FLAGS.bs_l_for_d], x_u_d[:FLAGS.bs_u_for_d]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "label_real_for_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label[:FLAGS.bs_l_for_d], l_d[:FLAGS.bs_u_for_d]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 - d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_132": {
                "variable": {
                    "value": "loss_fake_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "x_real_for_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_l[:FLAGS.bs_l_for_d], x_u_d[:FLAGS.bs_u_for_d]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "label_real_for_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label[:FLAGS.bs_l_for_d], l_d[:FLAGS.bs_u_for_d]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_163": {
                "variable": {
                    "value": "loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 - d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "loss_fake_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "loss_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask * loss_l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_254": {
                "variable": {
                    "value": "z_rand_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_20": {
                "variable": {
                    "value": "z_rand_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_25": {
                "variable": {
                    "value": "(_, l_fake)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_40": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_58": {
                "variable": {
                    "value": "(_, l_fake)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_70": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_88": {
                "variable": {
                    "value": "(_, l_fake)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_97": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_116": {
                "variable": {
                    "value": "(_, l_fake)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_117": {
                "variable": {
                    "value": "(_, l_d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "netC_d(x_u_d).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_154": {
                "variable": {
                    "value": "(_, l_fake)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ],
                        [
                            "netC(x_u).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_155": {
                "variable": {
                    "value": "(_, l_d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "netC_d(x_u_d).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_168": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_208": {
                "variable": {
                    "value": "(max_logit, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "netC(x_fake)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_32": {
                "input": {
                    "value": "1.0 - d_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_33": {
                "input": {
                    "value": "1.0 + d_fake_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_34": {
                "input": {
                    "value": "(d_real_2 - d_real) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_36": {
                "input": {
                    "value": "(0.5 * d_fake_g + 0.5 * d_fake_g_2 - d_fake_g_3) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.relu(1.0 + d_fake_c) * softmax(logits_c), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_64": {
                "input": {
                    "value": "1.0 - d_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_65": {
                "input": {
                    "value": "1.0 + d_fake_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.relu(1.0 + d_fake_c) * softmax(logits_c), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_92": {
                "input": {
                    "value": "1.0 - d_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_93": {
                "input": {
                    "value": "1.0 + d_fake_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_100": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.relu(1.0 + d_fake_c) * softmax(logits_c), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_131": {
                "input": {
                    "value": "1.0 - d_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_132": {
                "input": {
                    "value": "1.0 + d_fake_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_139": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.relu(1.0 + d_fake_c) * softmax(logits_c), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_163": {
                "input": {
                    "value": "1.0 - d_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_164": {
                "input": {
                    "value": "1.0 + d_fake_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_171": {
                "variable": {
                    "value": "loss_fake_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.relu(1.0 + d_fake_c) * softmax(logits_c), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_186": {
                "input": {
                    "value": "torch.sum(probs * d_fake, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_219": {
                "input": {
                    "value": "(prob_u_2 - prob_t) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_237": {
                "input": {
                    "value": "(prob_u_2 - prob_t) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_249": {
                "input": {
                    "value": "d_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netD(x_u)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_257": {
                "input": {
                    "value": "(x_fake - x_fake_2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_35": {
                "input": {
                    "value": "(d_fake_g_2 - d_fake_g) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_40": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_66": {
                "input": {
                    "value": "(d_fake_g_2 - d_fake_g) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_70": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_97": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_128": {
                "input": {
                    "value": "(d_fake_g_2 - d_fake_g) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_136": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_168": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_186": {
                "input": {
                    "value": "probs * d_fake",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_222": {
                "input": {
                    "value": "(logit_u_2 - logit_u_1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_240": {
                "input": {
                    "value": "(logit_u_2 - logit_u_1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_259": {
                "input": {
                    "value": "d_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netD(x_u)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ],
                        [
                            "netD(x_fake, label)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_44": {
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c) * softmax(logits_c)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c) * softmax(logits_c)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c) * softmax(logits_c)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c) * softmax(logits_c)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_172": {
                "input": {
                    "value": "torch.relu(1.0 + d_fake_c) * softmax(logits_c)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_200": {
                "input": {
                    "value": "z_rand",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_like_230": {
                "input": {
                    "value": "z_rand",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_44": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_74": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_101": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_140": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_172": {
                "input": {
                    "value": "1.0 + d_fake_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "library/mean_teacher/architectures.py": {
        "torch": {
            "Sequential_108": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 128, 3, 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_144": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_167": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_172": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 8, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 8, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_236": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_240": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 4, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_242": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 4, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_300": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_305": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 8, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 8, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_360": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_375": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_377": {
                "variable": {
                    "value": "self.conv_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_378": {
                "variable": {
                    "value": "self.bn_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_379": {
                "variable": {
                    "value": "self.conv_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_388": {
                "variable": {
                    "value": "self.bn_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "variable": {
                    "value": "self.conv_a3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_392": {
                "variable": {
                    "value": "self.bn_a3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_425": {
                "variable": {
                    "value": "self.bn_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_427": {
                "variable": {
                    "value": "self.bn_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_430": {
                "variable": {
                    "value": "self.bn_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_432": {
                "variable": {
                    "value": "self.bn_b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_440": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a1(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a1(a)",
                            "Call"
                        ],
                        [
                            "self.relu(a)",
                            "Call"
                        ],
                        [
                            "self.conv_a2(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a2(a)",
                            "Call"
                        ],
                        [
                            "self.relu(a)",
                            "Call"
                        ],
                        [
                            "self.conv_a3(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a3(a)",
                            "Call"
                        ],
                        [
                            "F.relu(a, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv_a1(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a1(a)",
                            "Call"
                        ],
                        [
                            "F.relu(a, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_a2(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a2(a)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_443": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a1(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a1(a)",
                            "Call"
                        ],
                        [
                            "self.relu(a)",
                            "Call"
                        ],
                        [
                            "self.conv_a2(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a2(a)",
                            "Call"
                        ],
                        [
                            "self.relu(a)",
                            "Call"
                        ],
                        [
                            "self.conv_a3(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a3(a)",
                            "Call"
                        ],
                        [
                            "F.relu(a, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv_a1(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a1(a)",
                            "Call"
                        ],
                        [
                            "F.relu(a, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_a2(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a2(a)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_447": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(b, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv_b1(b)",
                            "Call"
                        ],
                        [
                            "self.bn_b1(b)",
                            "Call"
                        ],
                        [
                            "F.relu(b, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b2(b)",
                            "Call"
                        ],
                        [
                            "self.bn_b2(b)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_450": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(b, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv_b1(b)",
                            "Call"
                        ],
                        [
                            "self.bn_b1(b)",
                            "Call"
                        ],
                        [
                            "F.relu(b, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b2(b)",
                            "Call"
                        ],
                        [
                            "self.bn_b2(b)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_494": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_495": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_501": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_504": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :, 0::2, 0::2], x[:, :, 1::2, 1::2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_533": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_534": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(3, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_535": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_536": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_537": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_538": {
                "variable": {
                    "value": "self.conv1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_539": {
                "variable": {
                    "value": "self.bn1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_540": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_541": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_543": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_544": {
                "variable": {
                    "value": "self.bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_545": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_546": {
                "variable": {
                    "value": "self.bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_547": {
                "variable": {
                    "value": "self.conv2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_548": {
                "variable": {
                    "value": "self.bn2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_549": {
                "variable": {
                    "value": "self.mp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_550": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_552": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 512, 3, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_553": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_554": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(512, 256, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_555": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_556": {
                "variable": {
                    "value": "self.conv3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 128, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_557": {
                "variable": {
                    "value": "self.bn3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_558": {
                "variable": {
                    "value": "self.ap3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_560": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_561": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_594": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_596": {
                "variable": {
                    "value": "self.convpa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(3, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_597": {
                "variable": {
                    "value": "self.bnpa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_598": {
                "variable": {
                    "value": "self.mpp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_599": {
                "variable": {
                    "value": "self.dropp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_601": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_602": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_603": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_604": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_605": {
                "variable": {
                    "value": "self.conv1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_606": {
                "variable": {
                    "value": "self.bn1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_607": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_608": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_610": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_611": {
                "variable": {
                    "value": "self.bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_612": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_613": {
                "variable": {
                    "value": "self.bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_614": {
                "variable": {
                    "value": "self.conv2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_615": {
                "variable": {
                    "value": "self.bn2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_616": {
                "variable": {
                    "value": "self.mp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_617": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_619": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 512, 3, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_620": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_621": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(512, 256, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_622": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_623": {
                "variable": {
                    "value": "self.conv3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 128, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_624": {
                "variable": {
                    "value": "self.bn3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_625": {
                "variable": {
                    "value": "self.ap3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_627": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_628": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_664": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_665": {
                "variable": {
                    "value": "self.conv0a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_666": {
                "variable": {
                    "value": "self.bn0a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_667": {
                "variable": {
                    "value": "self.mp0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_669": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_670": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_671": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_673": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_674": {
                "variable": {
                    "value": "self.bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_675": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_676": {
                "variable": {
                    "value": "self.bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_677": {
                "variable": {
                    "value": "self.mp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_679": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_680": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_681": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_682": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_683": {
                "variable": {
                    "value": "self.mp3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_685": {
                "variable": {
                    "value": "self.conv4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_686": {
                "variable": {
                    "value": "self.bn4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_687": {
                "variable": {
                    "value": "self.conv4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_688": {
                "variable": {
                    "value": "self.bn4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_689": {
                "variable": {
                    "value": "self.mp4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_691": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_692": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_730": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_731": {
                "variable": {
                    "value": "self.conv0a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_732": {
                "variable": {
                    "value": "self.bn0a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_733": {
                "variable": {
                    "value": "self.conv0b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(64, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_734": {
                "variable": {
                    "value": "self.bn0b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_735": {
                "variable": {
                    "value": "self.conv0c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(64, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_736": {
                "variable": {
                    "value": "self.bn0c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_737": {
                "variable": {
                    "value": "self.mp0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_738": {
                "variable": {
                    "value": "self.drop0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_740": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_741": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_742": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_743": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_744": {
                "variable": {
                    "value": "self.conv1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_745": {
                "variable": {
                    "value": "self.bn1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_746": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_747": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_749": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_750": {
                "variable": {
                    "value": "self.bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_751": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_752": {
                "variable": {
                    "value": "self.bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_753": {
                "variable": {
                    "value": "self.conv2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_754": {
                "variable": {
                    "value": "self.bn2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_755": {
                "variable": {
                    "value": "self.mp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_756": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_758": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 512, 3, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_759": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_760": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(512, 256, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_761": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_762": {
                "variable": {
                    "value": "self.conv3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 128, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_763": {
                "variable": {
                    "value": "self.bn3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_764": {
                "variable": {
                    "value": "self.ap3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_766": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_767": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_808": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_809": {
                "variable": {
                    "value": "self.conv0a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(3, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_810": {
                "variable": {
                    "value": "self.bn0a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_811": {
                "variable": {
                    "value": "self.conv0b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_812": {
                "variable": {
                    "value": "self.bn0b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_813": {
                "variable": {
                    "value": "self.conv0c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_814": {
                "variable": {
                    "value": "self.bn0c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_815": {
                "variable": {
                    "value": "self.mp0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_816": {
                "variable": {
                    "value": "self.drop0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_818": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_819": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_820": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_821": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_822": {
                "variable": {
                    "value": "self.conv1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_823": {
                "variable": {
                    "value": "self.bn1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_824": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_825": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_827": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_828": {
                "variable": {
                    "value": "self.bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_829": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_830": {
                "variable": {
                    "value": "self.bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_831": {
                "variable": {
                    "value": "self.conv2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_832": {
                "variable": {
                    "value": "self.bn2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_833": {
                "variable": {
                    "value": "self.mp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_834": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_836": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(512, 1024, 3, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_837": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_838": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(1024, 512, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_839": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_840": {
                "variable": {
                    "value": "self.conv3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(512, 256, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_841": {
                "variable": {
                    "value": "self.bn3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_842": {
                "variable": {
                    "value": "self.ap3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_844": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(256, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_845": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(256, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_885": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_886": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(3, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_887": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_888": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_889": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_890": {
                "variable": {
                    "value": "self.conv1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_891": {
                "variable": {
                    "value": "self.bn1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_892": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_893": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_895": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_896": {
                "variable": {
                    "value": "self.bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_897": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_898": {
                "variable": {
                    "value": "self.bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_899": {
                "variable": {
                    "value": "self.conv2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_900": {
                "variable": {
                    "value": "self.bn2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_901": {
                "variable": {
                    "value": "self.mp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_902": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_904": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 512, 3, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_905": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_906": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(512, 256, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_907": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_908": {
                "variable": {
                    "value": "self.conv3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 128, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_909": {
                "variable": {
                    "value": "self.bn3c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_910": {
                "variable": {
                    "value": "self.ap3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_912": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_913": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(128, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_345": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_114": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_117": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_122": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_125": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_128": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_133": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_136": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_139": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_140": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, block.out_channels(planes, groups), kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, block.out_channels(planes, groups), kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, block.out_channels(planes, groups), kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_519": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x[:, :, 0::2, 0::2], x[:, :, 1::2, 1::2]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1a(self.conv1a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1b(self.conv1b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1c(self.conv1c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2a(self.conv2a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2b(self.conv2b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2c(self.conv2c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp2(x)",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3a(self.conv3a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3b(self.conv3b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3c(self.conv3c(x)))",
                            "Call"
                        ],
                        [
                            "self.ap3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bnpa(self.convpa(x)))",
                            "Call"
                        ],
                        [
                            "self.mpp(x)",
                            "Call"
                        ],
                        [
                            "self.dropp(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1a(self.conv1a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1b(self.conv1b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1c(self.conv1c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2a(self.conv2a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2b(self.conv2b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2c(self.conv2c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp2(x)",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3a(self.conv3a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3b(self.conv3b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3c(self.conv3c(x)))",
                            "Call"
                        ],
                        [
                            "self.ap3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn0a(self.conv0a(x)))",
                            "Call"
                        ],
                        [
                            "self.mp0(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1a(self.conv1a(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2a(self.conv2a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2b(self.conv2b(x)))",
                            "Call"
                        ],
                        [
                            "self.mp2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3a(self.conv3a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3b(self.conv3b(x)))",
                            "Call"
                        ],
                        [
                            "self.mp3(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3a(self.conv4a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3b(self.conv4b(x)))",
                            "Call"
                        ],
                        [
                            "self.mp4(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn0a(self.conv0a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn0b(self.conv0b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn0c(self.conv0c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp0(x)",
                            "Call"
                        ],
                        [
                            "self.drop0(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1a(self.conv1a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1b(self.conv1b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1c(self.conv1c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2a(self.conv2a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2b(self.conv2b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2c(self.conv2c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp2(x)",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3a(self.conv3a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3b(self.conv3b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3c(self.conv3c(x)))",
                            "Call"
                        ],
                        [
                            "self.ap3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn0a(self.conv0a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn0b(self.conv0b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn0c(self.conv0c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp0(x)",
                            "Call"
                        ],
                        [
                            "self.drop0(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1a(self.conv1a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1b(self.conv1b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1c(self.conv1c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2a(self.conv2a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2b(self.conv2b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2c(self.conv2c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp2(x)",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3a(self.conv3a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3b(self.conv3b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3c(self.conv3c(x)))",
                            "Call"
                        ],
                        [
                            "self.ap3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256)",
                            "Call"
                        ],
                        [
                            "self.gn(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1a(self.conv1a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1b(self.conv1b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1c(self.conv1c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2a(self.conv2a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2b(self.conv2b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn2c(self.conv2c(x)))",
                            "Call"
                        ],
                        [
                            "self.mp2(x)",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3a(self.conv3a(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3b(self.conv3b(x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn3c(self.conv3c(x)))",
                            "Call"
                        ],
                        [
                            "self.ap3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_534": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_536": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_538": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_543": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_545": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_547": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_552": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_554": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_556": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_560": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_561": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_596": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_601": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_603": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_605": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_610": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_612": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_614": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_619": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_621": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_623": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_627": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_628": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_731": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_733": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_735": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_740": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_742": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_744": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_749": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_751": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_753": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_758": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_760": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_762": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_766": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_767": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_809": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_811": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_813": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_818": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_820": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_822": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_827": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_829": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_831": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_836": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_838": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_840": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_844": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_845": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_886": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_888": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_890": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_895": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_897": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_899": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_904": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_906": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_908": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_912": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_913": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_264": {
                "num_features": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_329": {
                "num_features": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "library/mean_teacher/optim_weight_ema.py": {
        "torch": {}
    },
    "library/model_discriminators.py": {
        "torch": {
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "im_chan",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nf0 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_label",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "spectral_norm_94": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_ch, h_ch, ksize, 1, pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_95": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(h_ch, out_ch, ksize, 1, pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_130": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_ch, out_ch, ksize, 1, pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_131": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(out_ch, out_ch, ksize, 1, pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_132": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_ch, out_ch, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_189": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_features * width_coe, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.c1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.c2(self.activation(h))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "self.activation(self.c1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_263": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_features * width_coe, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_284": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.c1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.c2(self.activation(h))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "self.activation(self.c1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_332": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_features * width_coe * 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_353": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.c1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.c2(self.activation(h))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "self.activation(self.c1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_411": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_features * width_coe * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_432": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.c1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.c2(self.activation(h))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "self.activation(self.c1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_491": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_features * width_coe, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_512": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.c1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.c2(self.activation(h))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "self.activation(self.c1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_97": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_ch, out_ch, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_121": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.c1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.c2(self.activation(h))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "self.activation(self.c1(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "getattr(self, 'block{}'.format(i))(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_149": {
                "input": {
                    "value": "self.c2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_191": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, num_features * width_coe)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_265": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, num_features * width_coe)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_334": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, num_features * width_coe * 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_413": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, num_features * width_coe * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_493": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, num_features * width_coe)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "h_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_114": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_145": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "self.l_y(y) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "in_features": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_332": {
                "in_features": {
                    "value": "num_features * width_coe * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_356": {
                "input": {
                    "value": "self.l_y(y) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "in_features": {
                    "value": "num_features * width_coe * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_435": {
                "input": {
                    "value": "self.l_y(y) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_491": {
                "in_features": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_515": {
                "input": {
                    "value": "self.l_y(y) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_45": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_192": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_266": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_335": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * width_coe * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_414": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * width_coe * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_494": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_217": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "self.l_y(ty.to(x.device)) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_360": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_361": {
                "input": {
                    "value": "self.l_y(ty.to(x.device)) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_439": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_440": {
                "input": {
                    "value": "self.l_y(ty.to(x.device)) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_519": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_520": {
                "input": {
                    "value": "self.l_y(ty.to(x.device)) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "library/model_generators.py": {
        "torch": {
            "Embedding_38": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_label",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nf0 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "im_chan",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "yz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, yembed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_70": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, self.nf0, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(self.actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_norm_103": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_136": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_137": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_156": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h * 2, w * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "h_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "width_coe * num_features * bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_274": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_314": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "width_coe * num_features * bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_337": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_338": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_378": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "width_coe * num_features * bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_407": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_408": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_447": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * width_coe * num_features * bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_479": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_480": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_519": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1 * width_coe * num_features * bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_551": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_552": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features * width_coe",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_187": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_188": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_286": {
                "input": {
                    "value": "self.conv7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_350": {
                "input": {
                    "value": "self.conv7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_419": {
                "input": {
                    "value": "self.conv7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_491": {
                "input": {
                    "value": "self.conv7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_563": {
                "input": {
                    "value": "self.conv7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_60": {
                "input": {
                    "value": "yembed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "yembed / torch.norm(yembed, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_47": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "library/model_layers.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "load_plot_images.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "4567",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_59": {
                "seed": {
                    "value": "6666",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "tlabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "tlabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tlabel for _ in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_z for _ in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_is_fid.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "netC",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netC)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "netC_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netC_T)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_130": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_resnet.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_58": {
                "variable": {
                    "value": "netD",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "netC",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netC)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "netC_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netC_T)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_101": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_88": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_104": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_111": {
                "variable": {
                    "value": "(confidence, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax(outputs).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_triplegan.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_46": {
                "variable": {
                    "value": "netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "netD",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "netC",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netC)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "netC_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netC_T)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_89": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_classifier.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_32": {
                "variable": {
                    "value": "netC",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "netC_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC_T.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC_T)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "1236",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "variable": {
                    "value": "netC_swa",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_swa",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC_swa.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC_swa)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_classifier_elr.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_32": {
                "variable": {
                    "value": "netC",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "netC_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC_T.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC_T)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "1236",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "variable": {
                    "value": "netC_swa",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_swa",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC_swa.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC_swa)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_gan.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_30": {
                "variable": {
                    "value": "netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "netD",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_63": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__55": {
                "parameters": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_82": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "tlabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tlabel for _ in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__68": {
                "parameters": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_triplegan.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "FLAGS.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "netD",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "netC",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netC)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_55": {
                "variable": {
                    "value": "netC_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC_T.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC_T)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "netC_swa",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_swa",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC_swa.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC_swa)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_159": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_176": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_139": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__164": {
                "parameters": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_213": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g // 10 * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "tlabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tlabel for _ in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__151": {
                "parameters": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_triplegan_final_elr.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "FLAGS.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "netD",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "netC",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(netC)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_55": {
                "variable": {
                    "value": "netC_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC_T.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC_T)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "1235",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "netC_swa",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netC_swa",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netC_swa.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netC_swa)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_184": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_208": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_158": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.bs_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__196": {
                "parameters": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_249": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "FLAGS.g_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "tlabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "tlabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tlabel for _ in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__176": {
                "parameters": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "FLAGS.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}