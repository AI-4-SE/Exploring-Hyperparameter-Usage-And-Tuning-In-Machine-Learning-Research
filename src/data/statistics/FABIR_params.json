{
    "AttentionModel.py": {
        "tensorflow": {
            "placeholder_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_166": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(np.concatenate([word_zeros, np.random.rand(size_of_vocabulary, embedding_size)], axis=0), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_167": {
                "variable": {
                    "value": "q_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(np.concatenate([word_zeros, np.random.rand(size_of_vocabulary, embedding_size)], axis=0), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_171": {
                "variable": {
                    "value": "mask[x1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_172": {
                "variable": {
                    "value": "mask[x2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_173": {
                "variable": {
                    "value": "mask[x1x1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.matmul(tf.expand_dims(q, -1), tf.expand_dims(q, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_174": {
                "variable": {
                    "value": "mask[x2x2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.matmul(tf.expand_dims(x, -1), tf.expand_dims(x, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_175": {
                "variable": {
                    "value": "mask[x2x1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.matmul(tf.expand_dims(x, -1), tf.expand_dims(q, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "variable": {
                    "value": "Start_Index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "variable": {
                    "value": "End_Index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConfigProto_202": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "W_Scal",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_Scal",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[embedding_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "b_Scal",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_Scal",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_28": {
                "variable": {
                    "value": "affine_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.reshape(x, [-1, embedding_size]), W_Scal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_Scal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_Scal', shape=[1, embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "affine_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(tf.reshape(x, [-1, embedding_size]), W_Scal), b_Scal)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.range(tf.cond(tf.greater(size_x, size_q), lambda : size_x, lambda : size_q)), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_39": {
                "variable": {
                    "value": "exponents",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(embedding_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "embedding_size / 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "variable": {
                    "value": "freq_PG",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.pow(1 / Base_Frequency, exponents)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_44": {
                "variable": {
                    "value": "encoder_sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(pos, freq_PG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_45": {
                "variable": {
                    "value": "encoder_cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(pos, freq_PG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoder_sin, encoder_cos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_51": {
                "variable": {
                    "value": "encoder_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([encoder_sin, encoder_cos], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[size_x, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_52": {
                "variable": {
                    "value": "encoder_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([encoder_sin, encoder_cos], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[size_q, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_55": {
                "variable": {
                    "value": "x_encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "encoder_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(encoder, [0, 0], [size_x, embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_56": {
                "variable": {
                    "value": "q_encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "encoder_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(encoder, [0, 0], [size_q, embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_105": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "variable": {
                    "value": "normalized_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.multiply(tf.add(mean, tf.transpose(x, [2, 0, 1])), tf.divide(gain, var))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_159": {
                "variable": {
                    "value": "used",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(tf.abs(sequence), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "used",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_max(tf.abs(sequence), 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_161": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "WQ",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WQ",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[embedding_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "WK",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WK",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[embedding_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "WV",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WV",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[embedding_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "WO",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WO",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[embedding_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_74": {
                "variable": {
                    "value": "x1_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x1_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, embedding_size]), WQ), [batch_size, -1, embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.split(x1_proj, num_or_size_splits=multihead_size, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "multihead_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_80": {
                "variable": {
                    "value": "x2_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x2_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X2, [-1, embedding_size]), WK), [batch_size, -1, embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.split(x2_proj, num_or_size_splits=multihead_size, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "multihead_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X2, [-1, embedding_size]), WK), [batch_size, -1, embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.split(x2_proj, num_or_size_splits=multihead_size, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x1_proj, [0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.add(tf.divide(logits, tf.sqrt(tf.cast(embedding_size, tf.float32))), tf.multiply(1 - mask, VERY_LOW_NUMBER))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_92": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "y": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.add(tf.divide(logits, tf.sqrt(tf.cast(embedding_size, tf.float32))), tf.multiply(1 - mask, VERY_LOW_NUMBER)), dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask, softmax)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_96": {
                "variable": {
                    "value": "x3_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x3_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, embedding_size]), WK), [batch_size, -1, embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.split(x3_proj, num_or_size_splits=multihead_size, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "multihead_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "x_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.add(tf.divide(logits, tf.sqrt(tf.cast(embedding_size, tf.float32))), tf.multiply(1 - mask, VERY_LOW_NUMBER)), dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask, softmax)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x3_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, embedding_size]), WK), [batch_size, -1, embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.split(x3_proj, num_or_size_splits=multihead_size, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_99": {
                "variable": {
                    "value": "x_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(x_attention, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "x_final",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.unstack(x_attention, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(x_final, [-1, embedding_size]), WO), [batch_size, -1, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "W1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[embedding_size, FF_hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_119": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, FF_hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "W2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FF_hidden_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_124": {
                "variable": {
                    "value": "affine_op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.reshape(x, [-1, embedding_size]), W1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b1', shape=[1, FF_hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_125": {
                "variable": {
                    "value": "nonlinear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "affine_op1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(tf.reshape(x, [-1, embedding_size]), W1), b1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_126": {
                "variable": {
                    "value": "affine_op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(nonlinear_op, W2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b2', shape=[1, embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "affine_op2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(nonlinear_op, W2), b2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_141": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[embedding_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "tensor": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.add(logits, tf.multiply(1.0 - mask, VERY_LOW_NUMBER))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_171": {
                "x": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_172": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_173": {
                "x": {
                    "value": "tf.matmul(tf.expand_dims(q, -1), tf.expand_dims(q, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_174": {
                "x": {
                    "value": "tf.matmul(tf.expand_dims(x, -1), tf.expand_dims(x, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_175": {
                "x": {
                    "value": "tf.matmul(tf.expand_dims(x, -1), tf.expand_dims(q, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "Scaling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_204": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_28": {
                "a": {
                    "value": "tf.reshape(x, [-1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_Scal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_Scal', shape=[embedding_size, embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_34": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "input": {
                    "value": "tf.range(tf.cond(tf.greater(size_x, size_q), lambda : size_x, lambda : size_q))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_41": {
                "x": {
                    "value": "1 / Base_Frequency",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "exponents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.range(embedding_size / 2), embedding_size / 2 - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_44": {
                "a": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(tf.range(tf.cond(tf.greater(size_x, size_q), lambda : size_x, lambda : size_q)), 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "freq_PG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.pow(1 / Base_Frequency, exponents), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "a": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(tf.range(tf.cond(tf.greater(size_x, size_q), lambda : size_x, lambda : size_q)), 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "freq_PG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.pow(1 / Base_Frequency, exponents), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_108": {
                "x": {
                    "value": "tf.add(mean, tf.transpose(x, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(gain, var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_159": {
                "input_tensor": {
                    "value": "tf.abs(sequence)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "tf.expand_dims(q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(q, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "a": {
                    "value": "tf.expand_dims(x, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(x, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "a": {
                    "value": "tf.expand_dims(x, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(q, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "a": {
                    "value": "tf.reshape(X, [-1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='WQ', shape=[embedding_size, embedding_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_79": {
                "a": {
                    "value": "tf.reshape(X2, [-1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WK",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='WK', shape=[embedding_size, embedding_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_81": {
                "a": {
                    "value": "x1_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, embedding_size]), WQ), [batch_size, -1, embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.split(x1_proj, num_or_size_splits=multihead_size, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_86": {
                "x": {
                    "value": "tf.divide(logits, tf.sqrt(tf.cast(embedding_size, tf.float32)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(1 - mask, VERY_LOW_NUMBER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "tf.reshape(X, [-1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WK",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='WK', shape=[embedding_size, embedding_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_99": {
                "value": {
                    "value": "x_attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(softmax, x3_proj)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "a": {
                    "value": "tf.reshape(x_final, [-1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "WO",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='WO', shape=[embedding_size, embedding_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_109": {
                "x": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_111": {
                "x": {
                    "value": "gain",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var + 1e-30",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "a": {
                    "value": "tf.reshape(x, [-1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W1', shape=[embedding_size, FF_hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_126": {
                "a": {
                    "value": "nonlinear_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(affine_op1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W2', shape=[FF_hidden_size, embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_132": {
                "x": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "attention_layer(X=X1, mask=mask['x1x1'], scope='x1x1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_133": {
                "x": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X=X2, mask=mask['x2x2'], scope='x2x2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_134": {
                "x": {
                    "value": "att_layer_X1X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(X1, attention_layer(X=X1, mask=mask['x1x1'], scope='x1x1')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(att_layer_X1X1, 'FF_11')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_135": {
                "x": {
                    "value": "att_layer_X2X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(X2, attention_layer(X=X2, mask=mask['x2x2'], scope='x2x2')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X=FF_X1X1, X2=att_layer_X2X2, mask=mask['x2x1'], scope='x2x1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_136": {
                "x": {
                    "value": "att_layer_X1X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(att_layer_X2X2, attention_layer(X=FF_X1X1, X2=att_layer_X2X2, mask=mask['x2x1'], scope='x2x1')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(att_layer_X1X2, 'FF_22')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "a": {
                    "value": "tf.reshape(X, [-1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[embedding_size, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_143": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x2_proj, tf.transpose(x1_proj, [0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, embedding_size]), W), [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(1.0 - mask, VERY_LOW_NUMBER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_159": {
                "x": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_174": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_37": {
                "pred": {
                    "value": "tf.greater(size_x, size_q)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : size_x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : size_q",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "divide_87": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(x2_proj, tf.transpose(x1_proj, [0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, embedding_size]), W), [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(tf.cast(embedding_size, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_89": {
                "x": {
                    "value": "1 - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "VERY_LOW_NUMBER",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1e+30",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "transpose_110": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', [batch_size, None])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_143": {
                "x": {
                    "value": "1.0 - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "VERY_LOW_NUMBER",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1e+30",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "greater_37": {
                "x": {
                    "value": "size_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(X)[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "size_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(Q)[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_88": {
                "x": {
                    "value": "tf.cast(embedding_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "Summary_54": {
                "variable": {
                    "value": "summary_EM",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='EM', simple_value=EM_dev)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_55": {
                "variable": {
                    "value": "summary_F1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='F1', simple_value=F1_dev)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "sign_727": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.expand_dims(x, -1), tf.expand_dims(q, -1), transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_734": {
                "variable": {
                    "value": "shaped_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(value=h, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_740": {
                "variable": {
                    "value": "shaped_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(value=u, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_747": {
                "variable": {
                    "value": "att_1_Product",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(shaped_h, vec1_att)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_753": {
                "variable": {
                    "value": "att_2_Product",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(shaped_u, vec2_att)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_759": {
                "variable": {
                    "value": "att_1_Product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_1_Product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(shaped_h, vec1_att), shape=[batch_size, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(att_1_Product, [1, tf.reduce_max(q_len), 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.reduce_max(q_len), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_763": {
                "variable": {
                    "value": "att_2_Product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_2_Product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(shaped_u, vec2_att), shape=[batch_size, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(att_2_Product, [1, 1, tf.reduce_max(x_len)])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, tf.reduce_max(x_len)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_769": {
                "variable": {
                    "value": "h_vectorized",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_h, bw_h], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vec3_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('att3', dtype='float', shape=[hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_770": {
                "variable": {
                    "value": "att_3_Product",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_u, bw_u], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h_vectorized",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(h, vec3_att)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_771": {
                "variable": {
                    "value": "att_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "att_1_Product + att_2_Product + att_3_Product",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_778": {
                "variable": {
                    "value": "p2q",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(logits=att_final_masked)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(mask_matrix, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_783": {
                "variable": {
                    "value": "U_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p2q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.softmax(logits=att_final_masked), tf.cast(mask_matrix, 'float'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_u, bw_u], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_785": {
                "variable": {
                    "value": "q2p",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reduce_max(att_final_masked, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_788": {
                "variable": {
                    "value": "H_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(tf.expand_dims(q2p, 1), h)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.reduce_max(x_len), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_795": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, U_a, tf.multiply(h, U_a), tf.multiply(h, H_a)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.Bs, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.Bs, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.Bs, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.Bs, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.new_emb_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.WEs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_emb_mat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sign_72": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_73": {
                "variable": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_75": {
                "variable": {
                    "value": "self.max_size_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_76": {
                "variable": {
                    "value": "self.max_size_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_135": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_140": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_142": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_149": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.dir_plots + 'train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_152": {
                "variable": {
                    "value": "self.dev_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.dir_plots + 'dev'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_174": {
                "variable": {
                    "value": "summary_EM",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='EM', simple_value=EM)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_175": {
                "variable": {
                    "value": "summary_F1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='F1', simple_value=F1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_426": {
                "variable": {
                    "value": "mask[q]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(self.q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_427": {
                "variable": {
                    "value": "mask[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_428": {
                "variable": {
                    "value": "mask[qq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.matmul(tf.expand_dims(self.q, -1), tf.expand_dims(self.q, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_429": {
                "variable": {
                    "value": "mask[xx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.matmul(tf.expand_dims(self.x, -1), tf.expand_dims(self.x, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_430": {
                "variable": {
                    "value": "mask[xq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.matmul(tf.expand_dims(self.x, -1), tf.expand_dims(self.q, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_431": {
                "variable": {
                    "value": "mask[qx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.matmul(tf.expand_dims(self.q, -1), tf.expand_dims(self.x, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_486": {
                "variable": {
                    "value": "self.Start_Index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_y1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_487": {
                "variable": {
                    "value": "self.End_Index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_509": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.Hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "config['model']['forget_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DropoutWrapper_510": {
                "variable": {
                    "value": "dropout_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(self.Hn, state_is_tuple=True, forget_bias=config['model']['forget_bias'])",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_513": {
                "variable": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.x_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_514": {
                "variable": {
                    "value": "q_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.q_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_627": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits_y1, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_630": {
                "variable": {
                    "value": "ce_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits_y2, labels=self.y2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_635": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[ce_loss, ce_loss2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_729": {
                "variable": {
                    "value": "vec1_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "att1",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_730": {
                "variable": {
                    "value": "vec2_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "att2",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_731": {
                "variable": {
                    "value": "vec3_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "att3",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exponential_decay_108": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config['train']['AdaDelta']['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "config['train']['AdaDelta']['decay_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "config['train']['AdaDelta']['decay_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_113": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_232": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.range(tf.cond(tf.greater(size_x, size_q), lambda : size_x, lambda : size_q)), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_234": {
                "variable": {
                    "value": "exponents",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(high_frequency / low_frequency)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(tf.range(self.WEAs / 2), self.WEAs / 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_236": {
                "variable": {
                    "value": "freq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multiply(1 / low_frequency, tf.exp(-exponents))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_243": {
                "variable": {
                    "value": "encoder_angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(tf.range(tf.cond(tf.greater(size_x, size_q), lambda : size_x, lambda : size_q)), 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "freq_PG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wave_length', dtype=tf.float32, initializer=freq)",
                            "Call"
                        ],
                        [
                            "freq",
                            "Name"
                        ]
                    ]
                }
            },
            "sin_244": {
                "variable": {
                    "value": "encoder_sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_angles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(pos, freq_PG)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_245": {
                "variable": {
                    "value": "encoder_cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_angles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(pos, freq_PG)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_248": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoder_sin, encoder_cos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_250": {
                "variable": {
                    "value": "encoder_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([encoder_sin, encoder_cos], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[size_x, self.WEAs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_264": {
                "variable": {
                    "value": "x_encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoder_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(encoder, [0, 0], [size_x, self.WEAs])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_265": {
                "variable": {
                    "value": "q_encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(X2, filters=self.WEPs, kernel_size=1, strides=1, name='Q_Comp'))",
                            "Call"
                        ],
                        [
                            "tf.split(Q, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoder_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.concat([encoder_sin_q, encoder_cos_q], axis=1), [0, 0], [size_q, self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.slice(encoder, [0, 0], [size_q, self.WEAs])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_266": {
                "variable": {
                    "value": "x_encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(X, encoder_x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_encoded, keep_prob=1.0 - tf.to_float(self.is_training) * config['train']['dropout_att_encoder'])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - tf.to_float(self.is_training) * config['train']['dropout_att_encoder']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_267": {
                "variable": {
                    "value": "q_encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q_encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(Q, encoder_q)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(q_encoded, keep_prob=1.0 - tf.to_float(self.is_training) * config['train']['dropout_att_encoder'])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - tf.to_float(self.is_training) * config['train']['dropout_att_encoder']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_435": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "config['model']['emb_mat_unk_words']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_498": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "config['model']['emb_mat_unk_words']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_519": {
                "variable": {
                    "value": "((fw_u, bw_u), ((_, fw_u_f), (_, bw_u_f)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "dropout_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "dropout_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Aq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(word_emb_mat, self.q)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(word_emb_mat, self.q)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "q_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.q_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "u1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_525": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_u, bw_u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_544": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_554": {
                "variable": {
                    "value": "cell_after_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.Hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "config['model']['forget_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DropoutWrapper_555": {
                "variable": {
                    "value": "dropout_cell_after_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_after_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(self.Hn, state_is_tuple=True, forget_bias=config['model']['forget_bias'])",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_556": {
                "variable": {
                    "value": "((fw_g0, bw_g0), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "dropout_cell_after_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_after_att, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "dropout_cell_after_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_after_att, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_layer(self.x, self.q, Ax, Aq, x_len, q_len, self.Hn * 2, self.Bs, h, u, scope='p0')",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.x_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "g0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_562": {
                "variable": {
                    "value": "g0",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_g0, bw_g0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_565": {
                "variable": {
                    "value": "cell_after_att_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.Hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "config['model']['forget_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DropoutWrapper_566": {
                "variable": {
                    "value": "dropout_cell_after_att_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_after_att_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(self.Hn, state_is_tuple=True, forget_bias=config['model']['forget_bias'])",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_567": {
                "variable": {
                    "value": "((fw_g1, bw_g1), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "dropout_cell_after_att_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_after_att_2, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "dropout_cell_after_att_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_after_att_2, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "g0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_g0, bw_g0], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.x_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "g1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_574": {
                "variable": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_g1, bw_g1, p0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_576": {
                "variable": {
                    "value": "w_y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_y1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10 * self.Hn, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_582": {
                "variable": {
                    "value": "smax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.concat(tf.unstack(value=g1, axis=0), axis=0), w_y1), [self.Bs, -1]) + tf.multiply(tf.cast(1 - self.x_mask, tf.float32), VERY_LOW_NUMBER)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_583": {
                "variable": {
                    "value": "a1i",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(smax, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_g1, bw_g1, p0], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_586": {
                "variable": {
                    "value": "a1i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(smax, 1), g1)",
                            "Call"
                        ],
                        [
                            "tf.tile(a1i, [1, self.Ps, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.Ps, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_590": {
                "variable": {
                    "value": "cell_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.Hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "config['model']['forget_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DropoutWrapper_591": {
                "variable": {
                    "value": "dropout_cell_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_y2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(self.Hn, state_is_tuple=True, forget_bias=config['model']['forget_bias'])",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_592": {
                "variable": {
                    "value": "((fw_g2, bw_g2), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "dropout_cell_y2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_y2, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "dropout_cell_y2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_y2, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.concat([p0, g1, a1i, tf.multiply(g1, a1i)], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.x_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "g2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_598": {
                "variable": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_g2, bw_g2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_600": {
                "variable": {
                    "value": "w_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_y2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.Hn, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_608": {
                "variable": {
                    "value": "yp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_y2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.concat(tf.unstack(value=g2, axis=0), axis=0), w_y2), [self.Bs, -1]) + tf.multiply(tf.cast(1 - self.x_mask, tf.float32), VERY_LOW_NUMBER)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_617": {
                "variable": {
                    "value": "self.Start_Index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_y1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_618": {
                "variable": {
                    "value": "self.End_Index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_636": {
                "name": {
                    "value": "ce_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=self.logits_y1, labels=self.y))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_637": {
                "name": {
                    "value": "ce_loss2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ce_loss2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=self.logits_y2, labels=self.y2))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_638": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_727": {
                "a": {
                    "value": "tf.expand_dims(x, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_728": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_735": {
                "value": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_h, bw_h], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_741": {
                "value": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_u, bw_u], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_748": {
                "a": {
                    "value": "shaped_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.unstack(value=h, axis=0), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vec1_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('att1', dtype='float', shape=[hidden_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_754": {
                "a": {
                    "value": "shaped_u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.unstack(value=u, axis=0), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vec2_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('att2', dtype='float', shape=[hidden_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_775": {
                "x": {
                    "value": "tf.cast(1 - mask_matrix, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-3000000000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_779": {
                "logits": {
                    "value": "att_final_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att_final + tf.multiply(tf.cast(1 - mask_matrix, tf.float32), -3000000000000000.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_780": {
                "x": {
                    "value": "mask_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.matmul(tf.expand_dims(x, -1), tf.expand_dims(q, -1), transpose_b=True))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_786": {
                "input_tensor": {
                    "value": "att_final_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att_final + tf.multiply(tf.cast(1 - mask_matrix, tf.float32), -3000000000000000.0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_789": {
                "a": {
                    "value": "tf.expand_dims(q2p, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_h, bw_h], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_79": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_119": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate if config['train']['Adam']['constant_LR'] else self.config['train']['Adam']['learning_rate']",
                    "type": "IfExp",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config['train']['Adam']['beta1']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                },
                "beta2": {
                    "value": "config['train']['Adam']['beta2']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "config['train']['Adam']['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.config",
                            "Attribute"
                        ],
                        [
                            "self.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "expand_dims_214": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_238": {
                "variable": {
                    "value": "freq_PG",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wave_length",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "freq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.multiply(1 / low_frequency, tf.exp(-exponents)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_254": {
                "variable": {
                    "value": "freq_q_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(config['model']['encoder_step_skip_size'], freq)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_255": {
                "variable": {
                    "value": "encoder_q_angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_angles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(pos, freq_PG)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "freq_q_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.multiply(config['model']['encoder_step_skip_size'], freq), np.pi / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_256": {
                "variable": {
                    "value": "encoder_sin_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_q_angles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(encoder_angles, freq_q_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_257": {
                "variable": {
                    "value": "encoder_cos_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_q_angles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(encoder_angles, freq_q_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_258": {
                "variable": {
                    "value": "encoder_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.concat([encoder_sin_q, encoder_cos_q], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[size_q, self.WEAs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_261": {
                "variable": {
                    "value": "encoder_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([encoder_sin, encoder_cos], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[size_q, self.WEAs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "variable": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X1, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "Q",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_292": {
                "variable": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X1, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "Q",
                            "Name"
                        ]
                    ]
                }
            },
            "split_296": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(X2, filters=self.WEPs, kernel_size=1, strides=1, name='Q_Comp'))",
                            "Call"
                        ],
                        [
                            "tf.split(Q, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.MHs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_297": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.split(K, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.MHs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_298": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.split(V, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.MHs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_300": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(X2, filters=self.WEPs, kernel_size=1, strides=1, name='Q_Comp'))",
                            "Call"
                        ],
                        [
                            "tf.split(Q, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K, [0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_303": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.add(tf.divide(logits, tf.sqrt(tf.cast(self.WEAs, tf.float32))), tf.multiply(1.0 - mask, VERY_LOW_NUMBER))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_309": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "y": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.add(tf.divide(logits, tf.sqrt(tf.cast(self.WEAs, tf.float32))), tf.multiply(1.0 - mask, VERY_LOW_NUMBER)), dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask, softmax)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_312": {
                "variable": {
                    "value": "x_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.add(tf.divide(logits, tf.sqrt(tf.cast(self.WEAs, tf.float32))), tf.multiply(1.0 - mask, VERY_LOW_NUMBER)), dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask, softmax)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.split(V, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_314": {
                "variable": {
                    "value": "x_attention_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(x_attention, axis=0, num=self.MHs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_317": {
                "variable": {
                    "value": "x_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.conv2d(tf.expand_dims(x_attention_concat, 2), filters=self.WEAs, kernel_size=1, strides=1, name='Att_Comp')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_319": {
                "variable": {
                    "value": "x_final_dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_final",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(tf.expand_dims(x_attention_concat, 2), filters=self.WEAs, kernel_size=1, strides=1, name='Att_Comp'))",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - tf.to_float(self.is_training) * config['train']['dropout_att_sublayer']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "moments_324": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[layer_normalization(x_scaled, scope='norm_x_scaled')] if config['model_options']['encoder_normalization'] else [x_scaled]",
                            "IfExp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_326": {
                "variable": {
                    "value": "normalized_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.multiply(tf.add(mean, tf.transpose(x, [2, 0, 1])), tf.divide(gain, var))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_343": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_346": {
                "variable": {
                    "value": "affine_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.FFHs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "affine_op_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_347": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_350": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.conv2d(affine_op, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, name='affine_op_2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_352": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(affine_op, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, name='affine_op_2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=1.0 - tf.to_float(self.is_training) * config['train']['dropout_att_sublayer'])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.add(logits, tf.multiply(1.0 - mask['x'], VERY_LOW_NUMBER)))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.add(logits, tf.multiply(1.0 - mask['x'], VERY_LOW_NUMBER)))",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - tf.to_float(self.is_training) * config['train']['dropout_att_sublayer']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_397": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.WEAs, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_398": {
                "tensor": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.WEAs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_399": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.add(logits, tf.multiply(1.0 - mask['x'], VERY_LOW_NUMBER))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_410": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.WEAs * 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_411": {
                "variable": {
                    "value": "concat_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X, FF_self_X, FF_cross_X]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_412": {
                "tensor": {
                    "value": "concat_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([X, FF_self_X, FF_cross_X], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.WEAs * 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_413": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.add(logits, tf.multiply(1.0 - mask['x'], VERY_LOW_NUMBER))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_426": {
                "x": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_427": {
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_428": {
                "x": {
                    "value": "tf.matmul(tf.expand_dims(self.q, -1), tf.expand_dims(self.q, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_429": {
                "x": {
                    "value": "tf.matmul(tf.expand_dims(self.x, -1), tf.expand_dims(self.x, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_430": {
                "x": {
                    "value": "tf.matmul(tf.expand_dims(self.x, -1), tf.expand_dims(self.q, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_431": {
                "x": {
                    "value": "tf.matmul(tf.expand_dims(self.q, -1), tf.expand_dims(self.x, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "word_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_439": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[word_emb_mat, self.new_emb_mat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_441": {
                "variable": {
                    "value": "Ax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype=tf.float32, initializer=config['model']['emb_mat_unk_words'])",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb_mat, self.new_emb_mat], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', dtype=tf.float32, initializer=config['model']['emb_mat_unk_words'])",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb_mat, self.new_emb_mat], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_442": {
                "variable": {
                    "value": "Aq",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype=tf.float32, initializer=config['model']['emb_mat_unk_words'])",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb_mat, self.new_emb_mat], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', dtype=tf.float32, initializer=config['model']['emb_mat_unk_words'])",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb_mat, self.new_emb_mat], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_445": {
                "name_or_scope": {
                    "value": "Scaling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_447": {
                "variable": {
                    "value": "weigths",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.WEAs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_448": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.WEAs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_495": {
                "name_or_scope": {
                    "value": "word_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_495": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_502": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[word_emb_mat, self.new_emb_mat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_504": {
                "variable": {
                    "value": "Ax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype=tf.float32, initializer=config['model']['emb_mat_unk_words'])",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb_mat, self.new_emb_mat], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', dtype=tf.float32, initializer=config['model']['emb_mat_unk_words'])",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb_mat, self.new_emb_mat], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_505": {
                "variable": {
                    "value": "Aq",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype=tf.float32, initializer=config['model']['emb_mat_unk_words'])",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb_mat, self.new_emb_mat], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', dtype=tf.float32, initializer=config['model']['emb_mat_unk_words'])",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb_mat, self.new_emb_mat], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_513": {
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_514": {
                "x": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_516": {
                "name_or_scope": {
                    "value": "prepro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_529": {
                "variable": {
                    "value": "((fw_h, bw_h), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "dropout_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "dropout_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(word_emb_mat, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(word_emb_mat, self.x)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.x_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "u1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_537": {
                "variable": {
                    "value": "((fw_h, bw_h), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "dropout_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "dropout_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=tf.cond(self.is_training, lambda : config['model']['input_keep_prob'], lambda : 1.0))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(word_emb_mat, self.x)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(word_emb_mat, self.x)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.x_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_548": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_627": {
                "logits": {
                    "value": "self.logits_y1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_630": {
                "logits": {
                    "value": "self.logits_y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_727": {
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[layer_normalization(q_scaled, scope='norm_q_scaled')] if config['model_options']['encoder_normalization'] else [q_scaled]",
                            "IfExp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_761": {
                "input_tensor": {
                    "value": "q_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.q_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_765": {
                "input_tensor": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.x_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_775": {
                "x": {
                    "value": "1 - mask_matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_790": {
                "input": {
                    "value": "q2p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_final_masked, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_792": {
                "input_tensor": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(self.x_mask, 'int32'), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_795": {
                "x": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_h, bw_h], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "H_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.matmul(tf.expand_dims(q2p, 1), h), [1, tf.reduce_max(x_len), 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_219": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.WEAs]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_220": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.WEAs]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_221": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.Bs, tf.shape(X)[1], self.WEAs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_222": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(X, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape=self.WEAs, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', shape=[self.WEAs], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', shape=[self.WEAs], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_226": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_227": {
                "input": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(X2, filters=self.WEPs, kernel_size=1, strides=1, name='Q_Comp'))",
                            "Call"
                        ],
                        [
                            "tf.split(Q, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_232": {
                "input": {
                    "value": "tf.range(tf.cond(tf.greater(size_x, size_q), lambda : size_x, lambda : size_q))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_234": {
                "x": {
                    "value": "high_frequency / low_frequency",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_234": {
                "x": {
                    "value": "tf.range(self.WEAs / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.WEAs / 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_236": {
                "x": {
                    "value": "1 / low_frequency",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(-exponents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_280": {
                "variable": {
                    "value": "QKV",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.conv2d(X1, filters=self.WEPs * 3, kernel_size=1, strides=1, name='QKV_Comp')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_281": {
                "variable": {
                    "value": "(Q, K, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "QKV",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(X1, filters=self.WEPs * 3, kernel_size=1, strides=1, name='QKV_Comp'))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self.WEPs, self.WEPs, self.WEPs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_285": {
                "variable": {
                    "value": "KV",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.conv2d(X1, filters=self.WEPs * 2, kernel_size=1, strides=1, name='KV_Comp')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_286": {
                "variable": {
                    "value": "(K, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "KV",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(X1, filters=self.WEPs * 2, kernel_size=1, strides=1, name='KV_Comp'))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self.WEPs, self.WEPs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_287": {
                "variable": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X2, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X2)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Name"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_289": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.conv2d(X2, filters=self.WEPs, kernel_size=1, strides=1, name='Q_Comp')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_290": {
                "variable": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X2, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X2)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Name"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_334": {
                "variable": {
                    "value": "W_Scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.WEAs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_335": {
                "variable": {
                    "value": "b_Scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.WEAs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_341": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_396": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_403": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_428": {
                "a": {
                    "value": "tf.expand_dims(self.q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(self.q, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_429": {
                "a": {
                    "value": "tf.expand_dims(self.x, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(self.x, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_430": {
                "a": {
                    "value": "tf.expand_dims(self.x, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(self.q, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_431": {
                "a": {
                    "value": "tf.expand_dims(self.q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(self.x, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_440": {
                "name": {
                    "value": "word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_466": {
                "name_or_scope": {
                    "value": "Encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_503": {
                "name": {
                    "value": "word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_510": {
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : config['model']['input_keep_prob']",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_scope_527": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_577": {
                "tensor": {
                    "value": "tf.matmul(tf.concat(tf.unstack(value=g1, axis=0), axis=0), w_y1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.Bs, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_581": {
                "x": {
                    "value": "tf.cast(1 - self.x_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "VERY_LOW_NUMBER",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1e+30",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "expand_dims_583": {
                "input": {
                    "value": "smax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits_y1, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_601": {
                "tensor": {
                    "value": "tf.matmul(tf.concat(tf.unstack(value=g2, axis=0), axis=0), w_y2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.Bs, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_605": {
                "x": {
                    "value": "tf.cast(1 - self.x_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "VERY_LOW_NUMBER",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1e+30",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "multiply_116": {
                "x": {
                    "value": "tf.reduce_min([tf.pow(tf.cast(self.global_step, tf.float32), -self.config['train']['Adam']['decay_rate']), tf.multiply(tf.cast(self.global_step, tf.float32), tf.pow(tf.cast(config['train']['Adam']['WarmupSteps'], tf.float32), -config['train']['Adam']['decay_rate'] - 1.0))])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.pow(tf.cast(self.WEAs, tf.float32), -0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_216": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.WEAs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_236": {
                "x": {
                    "value": "-exponents",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_254": {
                "x": {
                    "value": "config['model']['encoder_step_skip_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "freq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.multiply(1 / low_frequency, tf.exp(-exponents)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_258": {
                "values": {
                    "value": "[encoder_sin_q, encoder_cos_q]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_300": {
                "a": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.split(K, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_304": {
                "x": {
                    "value": "tf.divide(logits, tf.sqrt(tf.cast(self.WEAs, tf.float32)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(1.0 - mask, VERY_LOW_NUMBER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_314": {
                "value": {
                    "value": "x_attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(softmax, V)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "self.MHs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_317": {
                "input": {
                    "value": "tf.expand_dims(x_attention_concat, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.WEAs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "Att_Comp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_327": {
                "x": {
                    "value": "tf.add(mean, tf.transpose(x, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(gain, var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_350": {
                "input": {
                    "value": "affine_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(X, filters=self.FFHs, kernel_size=1, strides=1, use_bias=True, activation=tf.nn.relu, name='affine_op_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.WEAs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "affine_op_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_366": {
                "x": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X1, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "Q",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X1=X1, mask=mask[X1X1], scope=X1X1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_367": {
                "x": {
                    "value": "att_layer_X1X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(X1, attention_layer(X1=X1, mask=mask[X1X1], scope=X1X1)), scope='norm_' + X1X1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(att_layer_X1X1, 'FF' + X1X1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_368": {
                "x": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X2, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X2)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Name"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X1=X2, mask=mask[X2X2], scope=X2X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_369": {
                "x": {
                    "value": "att_layer_X2X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(X2, attention_layer(X1=X2, mask=mask[X2X2], scope=X2X2)), scope='norm_' + X2X2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X1=FF_X1X1, X2=att_layer_X2X2, mask=mask[X2X1], scope=X2X1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_370": {
                "x": {
                    "value": "att_layer_X1X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(att_layer_X2X2, attention_layer(X1=FF_X1X1, X2=att_layer_X2X2, mask=mask[X2X1], scope=X2X1)), scope='norm_' + X2X1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(att_layer_X1X2, 'FF_' + X2X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_379": {
                "x": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(X2, filters=self.WEPs, kernel_size=1, strides=1, name='Q_Comp'))",
                            "Call"
                        ],
                        [
                            "tf.split(Q, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X1=Q, mask=mask['qq'], scope='QQ')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_381": {
                "x": {
                    "value": "att_layer_QQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(Q, attention_layer(X1=Q, mask=mask['qq'], scope='QQ')), scope='norm_QQ')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(att_layer_QQ, 'FF_QQ')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_383": {
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X1=X, mask=mask['xx'], scope='XX')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_385": {
                "x": {
                    "value": "att_layer_XX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(X, attention_layer(X1=X, mask=mask['xx'], scope='XX')), scope='norm_XX')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(att_layer_XX, 'FF_XX')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_387": {
                "x": {
                    "value": "att_layer_QQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(Q, attention_layer(X1=Q, mask=mask['qq'], scope='QQ')), scope='norm_QQ')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X1=FF_XX, X2=att_layer_QQ, mask=mask['qx'], scope='QX')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_388": {
                "x": {
                    "value": "att_layer_XX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(X, attention_layer(X1=X, mask=mask['xx'], scope='XX')), scope='norm_XX')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X1=FF_QQ, X2=att_layer_XX, mask=mask['xq'], scope='XQ')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_390": {
                "x": {
                    "value": "att_layer_XQ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(att_layer_QQ, attention_layer(X1=FF_XX, X2=att_layer_QQ, mask=mask['qx'], scope='QX')), scope='norm_QX')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(att_layer_XQ, 'FF_Q_out')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_391": {
                "x": {
                    "value": "att_layer_QX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(att_layer_XX, attention_layer(X1=FF_QQ, X2=att_layer_XX, mask=mask['xq'], scope='XQ')), scope='norm_XQ')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(att_layer_QX, 'FF_X_out')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_398": {
                "a": {
                    "value": "tf.reshape(X, [-1, self.WEAs])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[self.WEAs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.WEAs * 3, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_399": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q, tf.transpose(K, [0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, self.WEAs]), W), [self.Bs, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(concat_all, [-1, self.WEAs * 3]), W), [self.Bs, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(1.0 - mask['x'], VERY_LOW_NUMBER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_404": {
                "x": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(X2, filters=self.WEPs, kernel_size=1, strides=1, name='Q_Comp'))",
                            "Call"
                        ],
                        [
                            "tf.split(Q, num_or_size_splits=self.MHs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_layer(X1=Q, mask=mask['qq'], scope='qq')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_405": {
                "x": {
                    "value": "self_attention_Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_normalization(tf.add(Q, attention_layer(X1=Q, mask=mask['qq'], scope='qq')), scope='norm_qq')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FeedForward_NN(self_attention_Q, 'FF_qq')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_412": {
                "a": {
                    "value": "tf.reshape(concat_all, [-1, self.WEAs * 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[self.WEAs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.WEAs * 3, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_413": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q, tf.transpose(K, [0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, self.WEAs]), W), [self.Bs, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(concat_all, [-1, self.WEAs * 3]), W), [self.Bs, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(1.0 - mask['x'], VERY_LOW_NUMBER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_428": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_429": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_430": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_431": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_459": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.WEAs]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_555": {
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : config['model']['input_keep_prob']",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_566": {
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : config['model']['input_keep_prob']",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "matmul_578": {
                "a": {
                    "value": "tf.concat(tf.unstack(value=g1, axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_y1', shape=[10 * self.Hn, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_581": {
                "x": {
                    "value": "1 - self.x_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_591": {
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : config['model']['input_keep_prob']",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_594": {
                "values": {
                    "value": "[p0, g1, a1i, tf.multiply(g1, a1i)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_602": {
                "a": {
                    "value": "tf.concat(tf.unstack(value=g2, axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_y2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_y2', shape=[2 * self.Hn, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_605": {
                "x": {
                    "value": "1 - self.x_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_117": {
                "input_tensor": {
                    "value": "[tf.pow(tf.cast(self.global_step, tf.float32), -self.config['train']['Adam']['decay_rate']), tf.multiply(tf.cast(self.global_step, tf.float32), tf.pow(tf.cast(config['train']['Adam']['WarmupSteps'], tf.float32), -config['train']['Adam']['decay_rate'] - 1.0))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_118": {
                "x": {
                    "value": "tf.cast(self.WEAs, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_222": {
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[self.WEAs], initializer=tf.ones_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_232": {
                "pred": {
                    "value": "tf.greater(size_x, size_q)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : size_x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : size_q",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "conv2d_280": {
                "input": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X1, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "Q",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.WEPs * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "QKV_Comp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_285": {
                "input": {
                    "value": "X1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X1, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "Q",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.WEPs * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KV_Comp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_289": {
                "input": {
                    "value": "X2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X2, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X2)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Name"
                        ],
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.WEPs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_Comp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "divide_305": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q, tf.transpose(K, [0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(X, [-1, self.WEAs]), W), [self.Bs, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(concat_all, [-1, self.WEAs * 3]), W), [self.Bs, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(tf.cast(self.WEAs, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_306": {
                "x": {
                    "value": "1.0 - mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "VERY_LOW_NUMBER",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1e+30",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "expand_dims_317": {
                "input": {
                    "value": "x_attention_concat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.unstack(x_attention, axis=0, num=self.MHs), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_328": {
                "x": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_330": {
                "x": {
                    "value": "gain",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var + 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_399": {
                "x": {
                    "value": "1.0 - mask['x']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "VERY_LOW_NUMBER",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1e+30",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "multiply_413": {
                "x": {
                    "value": "1.0 - mask['x']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "VERY_LOW_NUMBER",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1e+30",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_initializer_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_450": {
                "name_or_scope": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_453": {
                "variable": {
                    "value": "weigths",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.load('./kernel.npy')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_458": {
                "variable": {
                    "value": "weigths",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_579": {
                "values": {
                    "value": "tf.unstack(value=g1, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_603": {
                "values": {
                    "value": "tf.unstack(value=g2, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_118": {
                "x": {
                    "value": "self.WEAs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_initializer_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_232": {
                "x": {
                    "value": "size_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(X)[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "size_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(Q)[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_266": {
                "x": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_267": {
                "x": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_305": {
                "x": {
                    "value": "tf.cast(self.WEAs, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_329": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[layer_normalization(x_scaled, scope='norm_x_scaled')] if config['model_options']['encoder_normalization'] else [x_scaled]",
                            "IfExp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_initializer_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unstack_579": {
                "value": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_g1, bw_g1, p0], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_594": {
                "x": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_g1, bw_g1, p0], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a1i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(smax, 1), g1)",
                            "Call"
                        ],
                        [
                            "tf.tile(a1i, [1, self.Ps, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_603": {
                "value": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_g2, bw_g2], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_117": {
                "x": {
                    "value": "tf.cast(config['train']['Adam']['WarmupSteps'], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-config['train']['Adam']['decay_rate'] - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_117": {
                "x": {
                    "value": "tf.cast(self.global_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.pow(tf.cast(config['train']['Adam']['WarmupSteps'], tf.float32), -config['train']['Adam']['decay_rate'] - 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_221": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.conv2d(X, filters=self.WEAs, kernel_size=1, strides=1, use_bias=True, reuse=True, name='conv2d'))",
                            "Call"
                        ],
                        [
                            "tf.slice(X, [0, 0, 0], [self.Bs, tf.shape(X)[1], self.WEAs])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(X, weights), bias)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_305": {
                "x": {
                    "value": "self.WEAs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_319": {
                "x": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_352": {
                "x": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_117": {
                "x": {
                    "value": "config['train']['Adam']['WarmupSteps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}