{
    "test.py": {
        "torch": {
            "DataLoader_65": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(path, img_size, batch_size, rect=True, single_cls=opt.single_cls)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(batch_size, len(dataset))",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "min([os.cpu_count(), batch_size if batch_size > 1 else 0, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_half.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(path, img_size, batch_size, rect=True, single_cls=opt.single_cls)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(batch_size, len(dataset))",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "min([os.cpu_count(), batch_size if batch_size > 1 else 0, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "LambdaLR_150": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(pg0, lr=hyp['lr0'])",
                            "Call"
                        ],
                        [
                            "optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level='O1', verbosity=0)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: ((1 + math.cos(x * math.pi / epochs)) / 2) ** 1.0 * 0.95 + 0.05",
                            "Lambda"
                        ]
                    ]
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pg0 + [v]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "hyp['lr0']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'giou': 3.54, 'cls': 37.4, 'cls_pw': 1.0, 'obj': 64.3, 'obj_pw': 1.0, 'iou_t': 0.2, 'lr0': 0.01, 'lrf': 0.0005, 'momentum': 0.937, 'weight_decay': 0.000484, 'fl_gamma': 0.0, 'hsv_h': 0.0138, 'hsv_s': 0.678, 'hsv_v': 0.36, 'degrees': 1.98 * 0, 'translate': 0.05 * 0, 'scale': 0.5, 'shear': 0.641 * 0}",
                            "Dict"
                        ]
                    ]
                }
            },
            "SGD_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pg0 + [v]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "hyp['lr0']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'giou': 3.54, 'cls': 37.4, 'cls_pw': 1.0, 'obj': 64.3, 'obj_pw': 1.0, 'iou_t': 0.2, 'lr0': 0.01, 'lrf': 0.0005, 'momentum': 0.937, 'weight_decay': 0.000484, 'fl_gamma': 0.0, 'hsv_h': 0.0138, 'hsv_s': 0.678, 'hsv_v': 0.36, 'degrees': 1.98 * 0, 'translate': 0.05 * 0, 'scale': 0.5, 'shear': 0.641 * 0}",
                            "Dict"
                        ]
                    ]
                },
                "momentum": {
                    "value": "hyp['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'giou': 3.54, 'cls': 37.4, 'cls_pw': 1.0, 'obj': 64.3, 'obj_pw': 1.0, 'iou_t': 0.2, 'lr0': 0.01, 'lrf': 0.0005, 'momentum': 0.937, 'weight_decay': 0.000484, 'fl_gamma': 0.0, 'hsv_h': 0.0138, 'hsv_s': 0.678, 'hsv_v': 0.36, 'degrees': 1.98 * 0, 'translate': 0.05 * 0, 'scale': 0.5, 'shear': 0.641 * 0}",
                            "Dict"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_408": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "opt.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/adabound.py": {
        "torch": {
            "full_like_114": {
                "variable": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ],
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_226": {
                "variable": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ],
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_192": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_194": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_230": {
                "variable": {
                    "value": "decayed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "group['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_197": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_211": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/datasets.py": {
        "torch": {
            "zeros_483": {
                "variable": {
                    "value": "labels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nL, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_485": {
                "variable": {
                    "value": "labels_out[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "labels[ioa < 0.6]",
                            "Subscript"
                        ],
                        [
                            "load_mosaic(self, index)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "random_affine(img, labels, degrees=hyp['degrees'], translate=hyp['translate'], scale=hyp['scale'], shear=hyp['shear'])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_491": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)",
                            "Call"
                        ],
                        [
                            "load_image(self, index)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), flags=cv2.INTER_LINEAR, borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.imread(f)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_AREA)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, auto=self.rect)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "load_mosaic(self, index)",
                            "Call"
                        ],
                        [
                            "load_image(self, index)",
                            "Call"
                        ],
                        [
                            "letterbox(img, shape, auto=False, scaleup=self.augment)",
                            "Call"
                        ],
                        [
                            "random_affine(img, labels, degrees=hyp['degrees'], translate=hyp['translate'], scale=hyp['scale'], shear=hyp['shear'])",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_498": {
                "tensors": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)",
                            "Call"
                        ],
                        [
                            "load_image(self, index)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), flags=cv2.INTER_LINEAR, borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.imread(f)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_AREA)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, auto=self.rect)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "load_mosaic(self, index)",
                            "Call"
                        ],
                        [
                            "load_image(self, index)",
                            "Call"
                        ],
                        [
                            "letterbox(img, shape, auto=False, scaleup=self.augment)",
                            "Call"
                        ],
                        [
                            "random_affine(img, labels, degrees=hyp['degrees'], translate=hyp['translate'], scale=hyp['scale'], shear=hyp['shear'])",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_498": {
                "tensors": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/layers.py": {
        "torch": {
            "softplus_139": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_139": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu6_162": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "hardtanh_166": {
                "input": {
                    "value": "x + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_val": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/torch_utils.py": {
        "torch": {
            "Parameter_129": {
                "variable": {
                    "value": "model.last_linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "model.last_linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n, filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_139": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=s, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Using CUDA ' + ('Apex ' if apex else '')",
                            "BinOp"
                        ],
                        [
                            "' ' * len(s)",
                            "BinOp"
                        ],
                        [
                            "(int(h * ratio), int(w * ratio))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_31": {
                "variable": {
                    "value": "ng",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_45": {
                "type": {
                    "value": "cuda:0 if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "fusedconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_83": {
                "variable": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.weight.div(torch.sqrt(bn.eps + bn.running_var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_143": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=s, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, w - s[1], 0, h - s[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.447",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "b_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conv.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_130": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.last_linear.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_device_properties_34": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(0, ng)",
                            "Call"
                        ],
                        [
                            "i in enumerate(model.named_parameters())",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_84": {
                "input": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.weight.clone().view(conv.out_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_83": {
                "input": {
                    "value": "bn.eps + bn.running_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_91": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_92": {
                "input": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_conv.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "480",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "set_printoptions_21": {
                "linewidth": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "precision": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "profile": {
                    "value": "long",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_334": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wh1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh1[:, None]",
                            "Subscript"
                        ],
                        [
                            "wh1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "prod_334": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_381": {
                "variable": {
                    "value": "BCEcls",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "ft([h['cls_pw']])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "str"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_382": {
                "variable": {
                    "value": "BCEobj",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "ft([h['obj_pw']])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "str"
                        ]
                    ]
                }
            },
            "ones_446": {
                "variable": {
                    "value": "gain",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_607": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fitness(k)",
                            "Call"
                        ],
                        [
                            "fg",
                            "variable"
                        ],
                        [
                            "fitness(x)",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "sorted(files)",
                            "Call"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_614": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fitness(k)",
                            "Call"
                        ],
                        [
                            "fg",
                            "variable"
                        ],
                        [
                            "fitness(x)",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "sorted(files)",
                            "Call"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.bincount(classes, minlength=nc)",
                            "Call"
                        ],
                        [
                            "1 / weights",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "1 / torch.Tensor(n)",
                            "BinOp"
                        ],
                        [
                            "iou * scores[None]",
                            "BinOp"
                        ],
                        [
                            "(f - f.min()) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_354": {
                "variable": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_396": {
                "variable": {
                    "value": "tobj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_609": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x in enumerate(prediction)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in enumerate(k)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fitness(k)",
                            "Call"
                        ],
                        [
                            "fg",
                            "variable"
                        ],
                        [
                            "fitness(x)",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "sorted(files)",
                            "Call"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_623": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x in enumerate(prediction)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in enumerate(k)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "weights/backbone.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x in enumerate(prediction)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in enumerate(k)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_115": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x in enumerate(prediction)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in enumerate(k)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_407": {
                "variable": {
                    "value": "pxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps[:, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "pbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pxy, pwh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_437": {
                "tensors": {
                    "value": "(lbox, lobj, lcls, loss)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_536": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box[i], x[i, j + 5, None], j[:, None].float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_857": {
                "input": {
                    "value": "torch.from_numpy(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_284": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[2]",
                            "Subscript"
                        ],
                        [
                            "box1[0] + box1[2] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_284": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[0]",
                            "Subscript"
                        ],
                        [
                            "box1[0] - box1[2] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_285": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[3]",
                            "Subscript"
                        ],
                        [
                            "box1[1] + box1[3] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_285": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[1]",
                            "Subscript"
                        ],
                        [
                            "box1[1] - box1[3] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_like_415": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps[:, 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "cn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smooth_BCE(eps=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_457": {
                "data": {
                    "value": "p[i].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_465": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "model.module.module_list[l].na",
                            "Attribute"
                        ],
                        [
                            "model.module_list[l].na",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_484": {
                "tensors": {
                    "value": "(gxy, gwh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_607": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_614": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_719": {},
            "exp_408": {
                "input": {
                    "value": "ps[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_408": {
                "max": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_539": {
                "tensors": {
                    "value": "(box, conf, j.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_274": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[2]",
                            "Subscript"
                        ],
                        [
                            "box1[0] + box1[2] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_274": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[0]",
                            "Subscript"
                        ],
                        [
                            "box1[0] - box1[2] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_275": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[3]",
                            "Subscript"
                        ],
                        [
                            "box1[1] + box1[3] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_275": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[1]",
                            "Subscript"
                        ],
                        [
                            "box1[1] - box1[3] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_567": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.bincount(classes, minlength=nc)",
                            "Call"
                        ],
                        [
                            "1 / weights",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "1 / torch.Tensor(n)",
                            "BinOp"
                        ],
                        [
                            "iou * scores[None]",
                            "BinOp"
                        ],
                        [
                            "(f - f.min()) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_857": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x in enumerate(prediction)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in enumerate(k)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x in range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_297": {
                "input": {
                    "value": "torch.atan(w2 / h2) - torch.atan(w1 / h1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_326": {
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_326": {
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_825": {},
            "tensor_543": {
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, 0].astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan_297": {
                "input": {
                    "value": "w1 / h1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}