{
    "source/base/evaluation.py": {
        "torch": {
            "numel_61": {
                "input": {
                    "value": "ground_truth_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ground_truth > 0.0).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_62": {
                "input": {
                    "value": "ground_truth_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ground_truth > 0.0).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_63": {
                "input": {
                    "value": "predicted_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predicted > 0.0).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_64": {
                "input": {
                    "value": "ground_truth_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ground_truth > 0.0).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_65": {
                "input": {
                    "value": "predicted_int + ground_truth_int",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "source/base/utils.py": {
        "torch": {
            "bmm_32": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "q.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "source/data_loader.py": {
        "torch": {
            "from_numpy_419": {
                "variable": {
                    "value": "patch_data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "patch_data[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "source/points_to_surf_eval.py": {
        "torch": {
            "DataLoader_142": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.PointcloudPatchDataset(root=eval_opt.indir, shape_list_filename=eval_opt.dataset, points_per_patch=train_opt.points_per_patch, patch_features=train_opt.outputs, seed=eval_opt.seed, center=train_opt.patch_center, cache_capacity=eval_opt.cache_capacity, pre_processed_patches=True, sub_sample_size=train_opt.sub_sample_size, reconstruction=eval_opt.reconstruction, query_grid_resolution=eval_opt.query_grid_resolution, num_workers=int(eval_opt.workers), patch_radius=train_opt.patch_radius, epsilon=eval_opt.epsilon, uniform_subsample=train_opt.uniform_subsample if 'uniform_subsample' in train_opt else 0, fixed_subsample=train_opt.fixed_subsample if 'fixed_subsample' in train_opt else 0)",
                            "Call"
                        ],
                        [
                            "make_dataset(train_opt=train_opt, eval_opt=eval_opt)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_datasampler(eval_opt=eval_opt, dataset=dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "model_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_opt.batchSize",
                            "Attribute"
                        ],
                        [
                            "eval_opt.batchSize",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(eval_opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_168": {
                "variable": {
                    "value": "p2s_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "p2s_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointsToSurfModel(net_size_max=train_opt.net_size if 'net_size' in train_opt else 1024, num_points=train_opt.points_per_patch, output_dim=pred_dim, use_point_stn=train_opt.use_point_stn, use_feat_stn=train_opt.use_feat_stn, sym_op=train_opt.sym_op, use_query_point=use_query_point, sub_sample_size=train_opt.sub_sample_size, do_augmentation=False, single_transformer=train_opt.single_transformer, shared_transformation=train_opt.shared_transformer)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(p2s_model)",
                            "Call"
                        ],
                        [
                            "make_regressor(train_opt=train_opt, pred_dim=pred_dim, model_filename=model_filename, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_304": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cpu' if eval_opt.gpu_idx < 0 else 'cuda:%d' % eval_opt.gpu_idx",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_316": {
                "variable": {
                    "value": "train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "param_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(eval_opt.modeldir, model_name + eval_opt.parampostfix)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "shape_patch_values",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_patch_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.shape_patch_count[shape_ind]",
                            "Subscript"
                        ],
                        [
                            "min(eval_opt.patches_per_shape, dataset.shape_patch_count[shape_ind])",
                            "Call"
                        ],
                        [
                            "dataset.shape_patch_count[shape_ind]",
                            "Subscript"
                        ],
                        [
                            "len(datasampler.shape_patch_inds[shape_ind])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "pred_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "pred_dim + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu' if eval_opt.gpu_idx < 0 else 'cuda:%d' % eval_opt.gpu_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_169": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(eval_opt.modeldir, model_name + eval_opt.modelpostfix)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_310": {
                "seed": {
                    "value": "eval_opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_403": {
                "variable": {
                    "value": "shape_patch_values",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_patch_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.shape_patch_count[shape_ind]",
                            "Subscript"
                        ],
                        [
                            "min(eval_opt.patches_per_shape, dataset.shape_patch_count[shape_ind])",
                            "Call"
                        ],
                        [
                            "dataset.shape_patch_count[shape_ind]",
                            "Subscript"
                        ],
                        [
                            "len(datasampler.shape_patch_inds[shape_ind])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "pred_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "pred_dim + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu' if eval_opt.gpu_idx < 0 else 'cuda:%d' % eval_opt.gpu_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "source/points_to_surf_model.py": {
        "torch": {
            "Conv1d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_25": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_66": {
                "variable": {
                    "value": "iden",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_82": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_83": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_84": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_85": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_91": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_92": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_93": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_94": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_155": {
                "variable": {
                    "value": "self.conv0a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dims_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_156": {
                "variable": {
                    "value": "self.conv0b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_157": {
                "variable": {
                    "value": "self.bn0a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_158": {
                "variable": {
                    "value": "self.bn0b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_159": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_160": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_161": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_162": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_163": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_164": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0a(self.conv0a(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0b(self.conv0b(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max / 2) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max / 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max / 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_293": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_294": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max / 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_348": {
                "variable": {
                    "value": "patch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.fc2(patch_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_349": {
                "variable": {
                    "value": "patch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.fc3(patch_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.net_size_max * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_39": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.net_size_max * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_98": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.net_size_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_167": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_size * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_168": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_size * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool1d_171": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_183": {
                "variable": {
                    "value": "x_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x[:, :3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_transformed, x[:, 3:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_196": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.net_size_max * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.net_size_max * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "utils.batch_quat_to_rotmat(x_quat)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "torch.cat((x_transformed, x[:, 3:, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0a(self.conv0a(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0b(self.conv0b(x)))",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans2, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.bn4(self.conv4(F.relu(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.output_size * self.num_scales ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, 2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc1_local_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_263": {
                "variable": {
                    "value": "self.bn1_local_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_285": {
                "variable": {
                    "value": "self.fc1_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "variable": {
                    "value": "self.fc1_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.net_size_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_287": {
                "variable": {
                    "value": "self.bn1_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_288": {
                "variable": {
                    "value": "self.bn1_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.net_size_max / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "local_global_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patch_features, shape_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_323": {
                "variable": {
                    "value": "patch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1_local_global(self.fc1_local_global(local_global_features_transformed))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_335": {
                "variable": {
                    "value": "shape_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1_global(self.fc1_global(shape_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_343": {
                "variable": {
                    "value": "patch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1_local(self.fc1_local(patch_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "patch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patch_features, shape_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patch_features, shape_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_328": {
                "variable": {
                    "value": "shape_features_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shape_features[:, :3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_329": {
                "variable": {
                    "value": "patch_features_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "mat2": {
                    "value": "patch_features[:, :3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "shape_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shape_features_transformed, shape_features[:, 3:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "patch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[patch_features_transformed, patch_features[:, 3:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_339": {
                "variable": {
                    "value": "patch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_global_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "patch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x['patch_pts_ps'].transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_local_global(self.fc1_local_global(local_global_features_transformed)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.fc2(patch_features)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc3(patch_features)))",
                            "Call"
                        ],
                        [
                            "self.fc4(patch_features)",
                            "Call"
                        ],
                        [
                            "torch.cat([patch_features_transformed, patch_features[:, 3:, :]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_global_pts, patch_features)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_local(self.fc1_local(patch_features)))",
                            "Call"
                        ],
                        [
                            "torch.cat((patch_features, shape_features), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.net_size_max * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.net_size_max * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "utils.batch_quat_to_rotmat(x_quat)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "torch.cat((x_transformed, x[:, 3:, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0a(self.conv0a(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0b(self.conv0b(x)))",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans2, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.bn4(self.conv4(F.relu(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.output_size * self.num_scales ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, 2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_207": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.net_size_max * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.net_size_max * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "utils.batch_quat_to_rotmat(x_quat)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "torch.cat((x_transformed, x[:, 3:, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0a(self.conv0a(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0b(self.conv0b(x)))",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans2, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.bn4(self.conv4(F.relu(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.output_size * self.num_scales ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, 2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "sum_227": {
                "variable": {
                    "value": "x_scales[:, s * self.num_scales * self.output_size:(s + 1) * self.num_scales * self.output_size, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, s * self.num_points:(s + 1) * self.num_points]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "source/points_to_surf_train.py": {
        "torch": {
            "DataLoader_332": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.PointcloudPatchDataset(root=opt.indir, shape_list_filename=opt.trainset, points_per_patch=opt.points_per_patch, patch_features=target_features, point_count_std=opt.patch_point_count_std, seed=opt.seed, identical_epochs=opt.identical_epochs, center=opt.patch_center, cache_capacity=opt.cache_capacity, pre_processed_patches=True, sub_sample_size=opt.sub_sample_size, num_workers=int(opt.workers), patch_radius=opt.patch_radius, epsilon=-1, uniform_subsample=opt.uniform_subsample, fixed_subsample=opt.fixed_subsample)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.RandomPointcloudPatchSampler(train_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ],
                        [
                            "data_loader.SequentialShapeRandomPointcloudPatchSampler(train_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "seed_train_worker",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_380": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.PointcloudPatchDataset(root=opt.indir, shape_list_filename=opt.testset, points_per_patch=opt.points_per_patch, patch_features=target_features, point_count_std=opt.patch_point_count_std, seed=opt.seed, identical_epochs=opt.identical_epochs, center=opt.patch_center, cache_capacity=opt.cache_capacity, pre_processed_patches=True, sub_sample_size=opt.sub_sample_size, patch_radius=opt.patch_radius, num_workers=int(opt.workers), epsilon=-1, uniform_subsample=opt.uniform_subsample, fixed_subsample=opt.fixed_subsample)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.RandomPointcloudPatchSampler(test_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ],
                        [
                            "data_loader.SequentialShapeRandomPointcloudPatchSampler(test_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "seed_test_worker",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_402": {
                "variable": {
                    "value": "log_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dirname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.logdir, opt.name)",
                            "Call"
                        ]
                    ]
                },
                "comment": {
                    "value": "opt.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_406": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "p2s_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_410": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(p2s_model.parameters(), lr=opt.lr, momentum=opt.momentum)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "opt.scheduler_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_271": {
                "variable": {
                    "value": "p2s_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "p2s_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointsToSurfModel(net_size_max=opt.net_size, num_points=opt.points_per_patch, output_dim=pred_dim, use_point_stn=opt.use_point_stn, use_feat_stn=opt.use_feat_stn, sym_op=opt.sym_op, use_query_point=use_query_point, sub_sample_size=opt.sub_sample_size, do_augmentation=True, single_transformer=opt.single_transformer, shared_transformation=opt.shared_transformer)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(p2s_model, device_ids=devices)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(p2s_model, device_ids=devices)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.device('cpu' if gi < 0 else f'cuda:{gi}') for gi in opt.gpu_idx]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "manual_seed_289": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_414": {
                "variable": {
                    "value": "p2s_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "p2s_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointsToSurfModel(net_size_max=opt.net_size, num_points=opt.points_per_patch, output_dim=pred_dim, use_point_stn=opt.use_point_stn, use_feat_stn=opt.use_feat_stn, sym_op=opt.sym_op, use_query_point=use_query_point, sub_sample_size=opt.sub_sample_size, do_augmentation=True, single_transformer=opt.single_transformer, shared_transformation=opt.shared_transformer)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(p2s_model, device_ids=devices)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(p2s_model, device_ids=devices)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.device('cpu' if gi < 0 else f'cuda:{gi}') for gi in opt.gpu_idx]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "save_420": {
                "obj": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "params_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.outdir, '%s_params.pth' % opt.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_570": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((abs_dist.abs() - gt.squeeze().abs()) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_169": {
                "type": {
                    "value": "cpu if gi < 0 else fcuda:{gi}",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_272": {
                "f": {
                    "value": "opt.refine",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initial_seed_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_513": {
                "obj": {
                    "value": "p2s_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.outdir, '%s_model.pth' % opt.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_517": {
                "obj": {
                    "value": "p2s_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.outdir, '%s_model_%d.pth' % (opt.name, epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_570": {
                "input": {
                    "value": "(abs_dist.abs() - gt.squeeze().abs()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "source/sdf_nn.py": {
        "torch": {
            "tanh_12": {
                "variable": {
                    "value": "distance_magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_12": {
                "variable": {
                    "value": "distance_magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_19": {
                "variable": {
                    "value": "distance_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred >= 0.0",
                            "Compare"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_26": {
                "variable": {
                    "value": "distance_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tanh(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_32": {
                "variable": {
                    "value": "magnitude_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(torch.abs(pred))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tanh(torch.abs(target))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_38": {
                "variable": {
                    "value": "sign_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_38": {
                "variable": {
                    "value": "sign_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_7": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_7": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_7": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_26": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_33": {
                "input": {
                    "value": "torch.abs(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_33": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}