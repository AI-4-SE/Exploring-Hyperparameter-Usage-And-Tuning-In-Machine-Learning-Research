{
    "mac_cell.py": {
        "tensorflow": {
            "zeros_87": {
                "variable": {
                    "value": "self.none",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batchSize, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_714": {
                "variable": {
                    "value": "nullWord",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "zeroWord",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, config.ctrlDim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_715": {
                "variable": {
                    "value": "nullWord",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(nullWord, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batchSize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_716": {
                "variable": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[nullWord, words]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_746": {
                "variable": {
                    "value": "self.controls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "initialControl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.initState('initCtrl', config.ctrlDim, config.initCtrl, batchSize)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_747": {
                "variable": {
                    "value": "self.memories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "initialMemory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.initmemState('initMem', (100, config.memDim), config.initMem, batchSize)",
                            "Call"
                        ],
                        [
                            "self.initState('initMem', config.memDim, config.initMem, batchSize)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_748": {
                "variable": {
                    "value": "self.infos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "initialMemory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.initmemState('initMem', (100, config.memDim), config.initMem, batchSize)",
                            "Call"
                        ],
                        [
                            "self.initState('initMem', config.memDim, config.initMem, batchSize)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_214": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "ops.expMask(logits, questionLengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_269": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "ops.expMask(logits, questionLengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_558": {
                "variable": {
                    "value": "newControl_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "control",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.linear(control, config.ctrlDim, dim, name='ctrlProj')",
                            "Call"
                        ],
                        [
                            "ops.linear(control, config.ctrlDim, dim, name='ctrlProj')",
                            "Call"
                        ],
                        [
                            "state.control",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_657": {
                "variable": {
                    "value": "self.controls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.controls, tf.expand_dims(newControl, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_658": {
                "variable": {
                    "value": "self.memories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.memories, tf.expand_dims(newMemory, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_680": {
                "variable": {
                    "value": "prm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_682": {
                "variable": {
                    "value": "initState",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(prm, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchSize, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_691": {
                "variable": {
                    "value": "prm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.ctrlDim",
                            "Attribute"
                        ],
                        [
                            "dim + config.memDim",
                            "BinOp"
                        ],
                        [
                            "config.ctrlDim",
                            "Attribute"
                        ],
                        [
                            "config.ctrlDim",
                            "Attribute"
                        ],
                        [
                            "config.ctrlDim",
                            "Attribute"
                        ],
                        [
                            "config.ctrlDim",
                            "Attribute"
                        ],
                        [
                            "config.ctrlDim",
                            "Attribute"
                        ],
                        [
                            "config.memDim",
                            "Attribute"
                        ],
                        [
                            "config.attDim",
                            "Attribute"
                        ],
                        [
                            "interDim",
                            "Name"
                        ],
                        [
                            "config.memDim",
                            "Attribute"
                        ],
                        [
                            "config.attDim",
                            "Attribute"
                        ],
                        [
                            "interDim",
                            "Name"
                        ],
                        [
                            "config.memDim",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_693": {
                "variable": {
                    "value": "initState",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(prm, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchSize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_782": {
                "variable": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([nullWord, words], axis=1)",
                            "Call"
                        ],
                        [
                            "self.questionCntxWords if config.controlContextual else self.questionWords",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(words, self.dropouts['controlPre'])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['controlPre']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "'control' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_199": {
                "variable": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[interactions, inWords]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_212": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.inter2logits(interactions, dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['word'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['word'])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['word']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "'control' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_254": {
                "variable": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[interactions, inWords]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_267": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.inter2logits(interactions, dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['word'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['word'])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['word']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "'read' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_315": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.applyVarDpMask(memory, self.memDpMask, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(memory, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "ops.applyVarDpMask(memory, self.memDpMask, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(memory, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(memory, 1)",
                            "Call"
                        ],
                        [
                            "state.memory",
                            "Attribute"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['memory']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_365": {
                "variable": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(newContControl, axis=1) * inWords",
                            "BinOp"
                        ],
                        [
                            "tf.concat([interactions, inWords], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(interactions, dim, config.ctrlDim, act=config.controlProjAct)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newContControl, axis=1) * inWords",
                            "BinOp"
                        ],
                        [
                            "tf.concat([interactions, inWords], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(interactions, dim, config.ctrlDim, act=config.controlProjAct)",
                            "Call"
                        ],
                        [
                            "ops.linear(interactions, interDim, dim, act=config.readMemAct, name='memKbProj')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(interactions, self.dropouts['object'])",
                            "Call"
                        ],
                        [
                            "ops.activations[config.readCtrlAct](interactions)",
                            "Call"
                        ],
                        [
                            "tf.concat([interactions, addedInp], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(interactions, interDim, dim, act=config.readMemAct, name='memKbProj')",
                            "Call"
                        ],
                        [
                            "self.block_fusion2([interactions, tf.expand_dims(control, axis=1)], training=self.train, seqlen=self.seqlen)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(interactions, self.dropouts['object'])",
                            "Call"
                        ],
                        [
                            "ops.activations[config.readCtrlAct](interactions)",
                            "Call"
                        ],
                        [
                            "tf.concat([interactions, addedInp], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.controls * tf.expand_dims(selfControl, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['object']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_382": {
                "name_or_scope": {
                    "value": "'read' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_390": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.applyVarDpMask(memory, self.memDpMask, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(memory, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "ops.applyVarDpMask(memory, self.memDpMask, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(memory, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(memory, 1)",
                            "Call"
                        ],
                        [
                            "state.memory",
                            "Attribute"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['memory']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_437": {
                "variable": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(newContControl, axis=1) * inWords",
                            "BinOp"
                        ],
                        [
                            "tf.concat([interactions, inWords], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(interactions, dim, config.ctrlDim, act=config.controlProjAct)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newContControl, axis=1) * inWords",
                            "BinOp"
                        ],
                        [
                            "tf.concat([interactions, inWords], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(interactions, dim, config.ctrlDim, act=config.controlProjAct)",
                            "Call"
                        ],
                        [
                            "ops.linear(interactions, interDim, dim, act=config.readMemAct, name='memKbProj')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(interactions, self.dropouts['object'])",
                            "Call"
                        ],
                        [
                            "ops.activations[config.readCtrlAct](interactions)",
                            "Call"
                        ],
                        [
                            "tf.concat([interactions, addedInp], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(interactions, interDim, dim, act=config.readMemAct, name='memKbProj')",
                            "Call"
                        ],
                        [
                            "self.block_fusion2([interactions, tf.expand_dims(control, axis=1)], training=self.train, seqlen=self.seqlen)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(interactions, self.dropouts['object'])",
                            "Call"
                        ],
                        [
                            "ops.activations[config.readCtrlAct](interactions)",
                            "Call"
                        ],
                        [
                            "tf.concat([interactions, addedInp], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.controls * tf.expand_dims(selfControl, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['object']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_480": {
                "name_or_scope": {
                    "value": "'write' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_513": {
                "variable": {
                    "value": "newMemory",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[newMemory, selfSmry]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_542": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ops.linear(control, config.ctrlDim, gateDim, name='gate', bias=config.writeGateBias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_557": {
                "name_or_scope": {
                    "value": "'memEncoder' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_560": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.applyVarDpMask(memory, self.memDpMask, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(memory, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "ops.applyVarDpMask(memory, self.memDpMask, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(memory, self.dropouts['memory'])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(memory, 1)",
                            "Call"
                        ],
                        [
                            "state.memory",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_564": {
                "variable": {
                    "value": "newMemory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "newMemory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "info",
                            "Name"
                        ],
                        [
                            "newMemory + info",
                            "BinOp"
                        ],
                        [
                            "tf.concat([newMemory, selfSmry], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(newMemory, dim, config.memDim, name='newMemoryCtrl')",
                            "Call"
                        ],
                        [
                            "ops.linear(newMemory, dim, config.memDim, name='newMemory')",
                            "Call"
                        ],
                        [
                            "ops.activations[config.writeMemAct](newMemory)",
                            "Call"
                        ],
                        [
                            "tf.concat([newMemory, newMemory * control], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([newMemory, control], axis=-1)",
                            "Call"
                        ],
                        [
                            "newMemory * z + memory * (1 - z)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(newMemory, decay=config.bnDecay, center=config.bnCenter, scale=config.bnScale, is_training=self.train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "self.memEncoder(memory, newControl_expand, attend_words, knowledge, self.train, None, self.kbSize)",
                            "Call"
                        ],
                        [
                            "tf.reshape(newMemory, (-1, newMemory.shape[2]))",
                            "Call"
                        ],
                        [
                            "self.EncodeMem(memory, newControl, attend_words, self.knowledgeBase, name=cellName, reuse=cellReuse)",
                            "Call"
                        ],
                        [
                            "self.write(memory, info, newControl, self.contControl, name=cellName, reuse=cellReuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, newMemory.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_585": {
                "name_or_scope": {
                    "value": "self.scopeName + scope",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_635": {
                "variable": {
                    "value": "self.infos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.infos, tf.expand_dims(newMemory, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_654": {
                "variable": {
                    "value": "self.infos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.infos, tf.expand_dims(info, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_684": {
                "variable": {
                    "value": "initState",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batchSize, dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_695": {
                "variable": {
                    "value": "initState",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batchSize, dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_715": {
                "input": {
                    "value": "nullWord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('zeroWord', shape=(1, config.ctrlDim), initializer=tf.random_normal_initializer())",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(nullWord, axis=0), [self.batchSize, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_737": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "newContControl",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[newContControl, controlInput]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_195": {
                "input": {
                    "value": "newContControl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "controlInput",
                            "Name"
                        ],
                        [
                            "control if config.controlFeedPrevAtt else contControl",
                            "IfExp"
                        ],
                        [
                            "tf.concat([newContControl, controlInput], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(newContControl, dim, config.ctrlDim, act=config.controlContAct, name='contControl')",
                            "Call"
                        ],
                        [
                            "controlInput",
                            "Name"
                        ],
                        [
                            "control if config.controlFeedPrevAtt else contControl",
                            "IfExp"
                        ],
                        [
                            "tf.concat([newContControl, controlInput], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(newContControl, dim, config.ctrlDim, act=config.controlContAct, name='contControl')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_240": {
                "variable": {
                    "value": "newContControl",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[newContControl, controlInput]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_250": {
                "input": {
                    "value": "newContControl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "controlInput",
                            "Name"
                        ],
                        [
                            "control if config.controlFeedPrevAtt else contControl",
                            "IfExp"
                        ],
                        [
                            "tf.concat([newContControl, controlInput], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(newContControl, dim, config.ctrlDim, act=config.controlContAct, name='contControl')",
                            "Call"
                        ],
                        [
                            "controlInput",
                            "Name"
                        ],
                        [
                            "control if config.controlFeedPrevAtt else contControl",
                            "IfExp"
                        ],
                        [
                            "tf.concat([newContControl, controlInput], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(newContControl, dim, config.ctrlDim, act=config.controlContAct, name='contControl')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(ops.expMask(logits, questionLengths))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(ops.expMask(logits, questionLengths))",
                            "Call"
                        ],
                        [
                            "ops.inter2att(interactions, dim, dropout=self.dropouts['read'], mask=self.kbSize)",
                            "Call"
                        ],
                        [
                            "ops.inter2att(interactions, dim, dropout=self.dropouts['read'], mask=self.kbSize)",
                            "Call"
                        ],
                        [
                            "ops.inter2att(interactions, config.ctrlDim, name='selfAttention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_356": {
                "variable": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[interactions, addedInp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_428": {
                "variable": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[interactions, addedInp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_523": {
                "variable": {
                    "value": "newMemory",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[newMemory, newMemory * control]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_526": {
                "variable": {
                    "value": "newMemory",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[newMemory, control]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_616": {
                "variable": {
                    "value": "inWords",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.inWords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropouts['controlPost']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_651": {
                "variable": {
                    "value": "info",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "info",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.linear(info, config.memDim, config.memDim, name='info')",
                            "Call"
                        ],
                        [
                            "ops.activations[config.writeInfoAct](info)",
                            "Call"
                        ],
                        [
                            "self.read_new(self.knowledgeBase, memory, newControl, name=cellName, reuse=cellReuse)",
                            "Call"
                        ],
                        [
                            "self.read(self.knowledgeBase, memory, newControl, name=cellName, reuse=cellReuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(info, self.dropouts['write'])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['write']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_682": {
                "input": {
                    "value": "prm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape=(dim,), initializer=tf.random_normal_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape=dim, initializer=tf.random_normal_initializer())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_693": {
                "input": {
                    "value": "prm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape=(dim,), initializer=tf.random_normal_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape=dim, initializer=tf.random_normal_initializer())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_714": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_496": {
                "input": {
                    "value": "selfControl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "control",
                            "Name"
                        ],
                        [
                            "contControl",
                            "Name"
                        ],
                        [
                            "ops.linear(selfControl, config.ctrlDim, config.ctrlDim, name='ctrlProj')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_657": {
                "input": {
                    "value": "newControl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.att2Smry(attention, outWords)",
                            "Call"
                        ],
                        [
                            "newContControl",
                            "Name"
                        ],
                        [
                            "ops.att2Smry(attention, outWords)",
                            "Call"
                        ],
                        [
                            "newContControl",
                            "Name"
                        ],
                        [
                            "self.vecQuestions",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_658": {
                "input": {
                    "value": "newMemory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "info",
                            "Name"
                        ],
                        [
                            "newMemory + info",
                            "BinOp"
                        ],
                        [
                            "tf.concat([newMemory, selfSmry], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(newMemory, dim, config.memDim, name='newMemoryCtrl')",
                            "Call"
                        ],
                        [
                            "ops.linear(newMemory, dim, config.memDim, name='newMemory')",
                            "Call"
                        ],
                        [
                            "ops.activations[config.writeMemAct](newMemory)",
                            "Call"
                        ],
                        [
                            "tf.concat([newMemory, newMemory * control], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([newMemory, control], axis=-1)",
                            "Call"
                        ],
                        [
                            "newMemory * z + memory * (1 - z)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(newMemory, decay=config.bnDecay, center=config.bnCenter, scale=config.bnScale, is_training=self.train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "self.memEncoder(memory, newControl_expand, attend_words, knowledge, self.train, None, self.kbSize)",
                            "Call"
                        ],
                        [
                            "tf.reshape(newMemory, (-1, newMemory.shape[2]))",
                            "Call"
                        ],
                        [
                            "self.EncodeMem(memory, newControl, attend_words, self.knowledgeBase, name=cellName, reuse=cellReuse)",
                            "Call"
                        ],
                        [
                            "self.write(memory, info, newControl, self.contControl, name=cellName, reuse=cellReuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_692": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_421": {
                "input": {
                    "value": "control",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.linear(control, config.ctrlDim, dim, name='ctrlProj')",
                            "Call"
                        ],
                        [
                            "ops.linear(control, config.ctrlDim, dim, name='ctrlProj')",
                            "Call"
                        ],
                        [
                            "state.control",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_635": {
                "input": {
                    "value": "newMemory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "info",
                            "Name"
                        ],
                        [
                            "newMemory + info",
                            "BinOp"
                        ],
                        [
                            "tf.concat([newMemory, selfSmry], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(newMemory, dim, config.memDim, name='newMemoryCtrl')",
                            "Call"
                        ],
                        [
                            "ops.linear(newMemory, dim, config.memDim, name='newMemory')",
                            "Call"
                        ],
                        [
                            "ops.activations[config.writeMemAct](newMemory)",
                            "Call"
                        ],
                        [
                            "tf.concat([newMemory, newMemory * control], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([newMemory, control], axis=-1)",
                            "Call"
                        ],
                        [
                            "newMemory * z + memory * (1 - z)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(newMemory, decay=config.bnDecay, center=config.bnCenter, scale=config.bnScale, is_training=self.train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "self.memEncoder(memory, newControl_expand, attend_words, knowledge, self.train, None, self.kbSize)",
                            "Call"
                        ],
                        [
                            "tf.reshape(newMemory, (-1, newMemory.shape[2]))",
                            "Call"
                        ],
                        [
                            "self.EncodeMem(memory, newControl, attend_words, self.knowledgeBase, name=cellName, reuse=cellReuse)",
                            "Call"
                        ],
                        [
                            "self.write(memory, info, newControl, self.contControl, name=cellName, reuse=cellReuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_654": {
                "input": {
                    "value": "info",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.linear(info, config.memDim, config.memDim, name='info')",
                            "Call"
                        ],
                        [
                            "ops.activations[config.writeInfoAct](info)",
                            "Call"
                        ],
                        [
                            "self.read_new(self.knowledgeBase, memory, newControl, name=cellName, reuse=cellReuse)",
                            "Call"
                        ],
                        [
                            "self.read(self.knowledgeBase, memory, newControl, name=cellName, reuse=cellReuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(info, self.dropouts['write'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "ConfigProto_188": {
                "variable": {
                    "value": "sessionConfig",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "config.weightsToKeep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_892": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_205": {
                "variable": {
                    "value": "subsetSaver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "relevantVars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[var for var in tf.global_variables() if isRelevant(var)]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "config.weightsToKeep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_empty": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_209": {
                "variable": {
                    "value": "emaSaver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model.emaDict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "config.weightsToKeep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_873": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_901": {
                "config": {
                    "value": "sessionConfig",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ],
                        [
                            "setSession()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_906": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(logdir, 'graphs')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mi_gru_cell.py": {
        "tensorflow": {
            "matmul_23": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(inDim, outDim), initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "split_34": {
                "variable": {
                    "value": "(Wx, Uh, inter)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "beta * tf.concat([inp1, inp2, inp1 * inp2], axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(inDim, outDim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(3 * dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.addBiases(Wxr, Uhr, self.numUnits, bInitial=1, name='r')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.addBiases(Wxu, Uhu, self.numUnits, bInitial=1, name='u')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "shape": {
                    "value": "(batchSize, self.numUnits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "'weights' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "'additiveBiases' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "'multiplicativeBias' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scope or type(self).__name__",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_34": {
                "values": {
                    "value": "[inp1, inp2, inp1 * inp2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_initializer_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mi_lstm_cell.py": {
        "tensorflow": {
            "matmul_24": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=(inDim, outDim), initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "split_35": {
                "variable": {
                    "value": "(Wx, Uh, inter)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "beta * tf.concat([inp1, inp2, inp1 * inp2], axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_14": {
                "c": {
                    "value": "self.numUnits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "self.numUnits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(inDim, outDim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(3 * dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_71": {
                "variable": {
                    "value": "newState",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "newC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c * tf.nn.sigmoid(f + self.forgetBias) + tf.nn.sigmoid(i) * self.activation(j)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "newH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.activation(newC) * tf.nn.sigmoid(o)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_75": {
                "c": {
                    "value": "tf.zeros((batchSize, self.numUnits), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "h": {
                    "value": "tf.zeros((batchSize, self.numUnits), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "'weights' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "'additiveBiases' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "'multiplicativeBias' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scope or type(self).__name__",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "shape": {
                    "value": "(batchSize, self.numUnits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "(batchSize, self.numUnits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_35": {
                "values": {
                    "value": "[inp1, inp2, inp1 * inp2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "x": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.addBiases(Wx, Uh, self.numUnits, name='o')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.addBiases(Wx, Uh, self.numUnits, name='i')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "floordiv_226": {
                "variable": {
                    "value": "towerBatchSize",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dataSize",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "towersNum",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_444": {
                "variable": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros((1, config.wrdQEmbDim)), embeddingsVar], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('emb', initializer=embInit, dtype=tf.float32, trainable=not config.wrdEmbAFixed)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('emb', initializer=embInit, dtype=tf.float32, trainable=not config.semanticFixEmbs)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "aIndices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embInit['oeAnswers']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "one_hot_890": {
                "variable": {
                    "value": "answerFreqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "answerFreqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(answerFreqs, config.answerWordsNum)",
                            "Call"
                        ],
                        [
                            "answerFreqs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(answerFreqs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(answerFreqs)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "config.answerWordsNum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_891": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "answerFreqNums",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "config.AnswerFreqMaxNum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_892": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_894": {
                "variable": {
                    "value": "answerFreqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "answerFreqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(answerFreqs, config.answerWordsNum)",
                            "Call"
                        ],
                        [
                            "answerFreqs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(answerFreqs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(answerFreqs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_927": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=answers, logits=logits)",
                            "Call"
                        ],
                        [
                            "ops.hingeLoss(labels=answers, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(labels=answerDist, logits=logits)",
                            "Call"
                        ],
                        [
                            "losses * self.answerDict.weights",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=answerDist, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.weighted_cross_entropy_with_logits(targets=answerDist, logits=logits, pos_weight=config.lossWeight)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_1294": {
                "variable": {
                    "value": "self.noOp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.questionIndicesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.questionLengthsAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.answerIndicesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_411": {
                "variable": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_412": {
                "variable": {
                    "value": "embeddingsVar",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "not config.wrdEmbQFixed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_414": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros((1, config.wrdQEmbDim)), embeddingsVar]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_415": {
                "variable": {
                    "value": "questions",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros((1, config.wrdQEmbDim)), embeddingsVar], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('emb', initializer=embInit, dtype=tf.float32, trainable=not config.wrdEmbAFixed)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('emb', initializer=embInit, dtype=tf.float32, trainable=not config.semanticFixEmbs)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "qIndices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_424": {
                "variable": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_425": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "not config.wrdEmbAFixed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_436": {
                "variable": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_437": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embInit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ],
                        [
                            "tf.to_float(embInit)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "not config.semanticFixEmbs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_464": {
                "variable": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(answers, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batchSize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_515": {
                "variable": {
                    "value": "vecQuestions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vecQuestions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(vecQuestions, self.dropouts['question'])",
                            "Call"
                        ],
                        [
                            "ops.linear(vecQuestions, config.encDim, projDim, act=config.encProjQAct, name='projQ')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['question']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_677": {
                "variable": {
                    "value": "none",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batchSize, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_779": {
                "variable": {
                    "value": "none",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batchSize, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_900": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Name"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "self.aEmbeddingsOp(aIndices, embInit['a'])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(answers, axis=0), [self.batchSize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(answers, config.answerWordsNum)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.FCLayer(features, dims, batchNorm=self.batchNorm if config.outputBN else None, dropout=self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.gatedAct(config.outAct, gate=config.outGate)(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, interDim, sumMod=config.answerSumMod)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "ops.expMask(logits, choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_940": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_942": {
                "variable": {
                    "value": "corrects",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, answers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_944": {
                "variable": {
                    "value": "correctNum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "corrects",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, answers))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_945": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "corrects",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, answers))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_957": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.FCLayer(features, dims, batchNorm=self.batchNorm if config.outputBN else None, dropout=self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.gatedAct(config.outAct, gate=config.outGate)(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, interDim, sumMod=config.answerSumMod)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "ops.expMask(logits, choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_958": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_965": {
                "variable": {
                    "value": "self.globalStep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "globalStep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_966": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_1012": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_1020": {
                "variable": {
                    "value": "updateOps",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_1054": {
                "variable": {
                    "value": "self.lossAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(self.lossList, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_1055": {
                "variable": {
                    "value": "self.answerLossAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(self.answerLossList, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_1056": {
                "variable": {
                    "value": "self.answerAccAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(self.answerAccList, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1057": {
                "variable": {
                    "value": "self.correctNumAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(self.correctNumList, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1058": {
                "variable": {
                    "value": "self.predsAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.predsList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1059": {
                "variable": {
                    "value": "self.topkpredsAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.topkpredsList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "Placeholders",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "self.answerFreqListsAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "self.answerFreqNumsAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.choicesIndicesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self.choicesNumsAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "stem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_290": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(images, dim=-1)",
                            "Call"
                        ],
                        [
                            "ops.linear(images, imageDim, hDim, name='iProj')",
                            "Call"
                        ],
                        [
                            "ops.att2Smry(attention, images)",
                            "Call"
                        ],
                        [
                            "ops.linear(images, config.memDim, config.outImageDim, name=name + '_' + 'outImage')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_356": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.linear(images, inDim, outDim, dropout=self.dropouts['stem'])",
                            "Call"
                        ],
                        [
                            "tf.concat([features, bboxes], axis=-1)",
                            "Call"
                        ],
                        [
                            "ops.FCLayer(features, dims, dropout=self.dropouts['stem'])",
                            "Call"
                        ],
                        [
                            "ops.actF(config.stemAct)(features)",
                            "Call"
                        ],
                        [
                            "ops.linear(images, inDim, outDim, dropout=self.dropouts['stem'])",
                            "Call"
                        ],
                        [
                            "ops.FCLayer(features, dims, dropout=self.dropouts['stem'])",
                            "Call"
                        ],
                        [
                            "ops.linear(images, inDim, outDim)",
                            "Call"
                        ],
                        [
                            "ops.actF(config.stemAct)(features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, (self.batchSize, -1, outDim))",
                            "Call"
                        ],
                        [
                            "ops.CNNLayer(images, dims, batchNorm=self.batchNorm if config.stemBN else None, dropout=self.dropouts['stem'], kernelSizes=config.stemKernelSizes, strides=config.stemStrideSizes)",
                            "Call"
                        ],
                        [
                            "ops.multigridRNNLayer(features, H, W, outDim)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "memory",
                            "Name"
                        ],
                        [
                            "tf.concat([features, images], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batchSize, -1, outDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "stem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_370": {
                "variable": {
                    "value": "features[object]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[features['object'], bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_410": {
                "name_or_scope": {
                    "value": "qEmbeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "aEmbeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_429": {
                "variable": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros((1, config.wrdQEmbDim)), embeddingsVar], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('emb', initializer=embInit, dtype=tf.float32, trainable=not config.wrdEmbAFixed)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('emb', initializer=embInit, dtype=tf.float32, trainable=not config.semanticFixEmbs)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "aIndices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embInit['oeAnswers']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_435": {
                "name_or_scope": {
                    "value": "'vocabEmbeddings' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_500": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_547": {
                "name_or_scope": {
                    "value": "'attLayer' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_587": {
                "name_or_scope": {
                    "value": "baseline",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_654": {
                "name_or_scope": {
                    "value": "'MACnetwork' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_691": {
                "name_or_scope": {
                    "value": "'MACnetwork' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_825": {
                "name_or_scope": {
                    "value": "outputUnit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_839": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, images]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_864": {
                "name_or_scope": {
                    "value": "name + 'classifier'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_876": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.FCLayer(features, dims, batchNorm=self.batchNorm if config.outputBN else None, dropout=self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.gatedAct(config.outAct, gate=config.outGate)(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, interDim, sumMod=config.answerSumMod)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "ops.expMask(logits, choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropouts['output']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_892": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(answerFreqNums, maxlen=config.AnswerFreqMaxNum)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(mask), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.sequence_mask([2], config.answerWordsNum)) * -1e+30",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.sequence_mask([2], config.answerWordsNum)) * -1e+30",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_903": {
                "variable": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Name"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "self.aEmbeddingsOp(aIndices, embInit['a'])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(answers, axis=0), [self.batchSize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(answers, config.answerWordsNum)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "config.answerWordsNum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_935": {
                "name_or_scope": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_952": {
                "name_or_scope": {
                    "value": "pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_964": {
                "name_or_scope": {
                    "value": "trainAddOptimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_968": {
                "variable": {
                    "value": "self.subsetOptimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr * config.subsetOptMult",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_978": {
                "name_or_scope": {
                    "value": "computeGradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_981": {
                "variable": {
                    "value": "allVars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_989": {
                "variable": {
                    "value": "allVars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_1010": {
                "name_or_scope": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_1016": {
                "variable": {
                    "value": "(clippedGradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.gradMaxNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_norm": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.global_norm(gradients)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_1030": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "config.emaDecayRate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_1192": {
                "name_or_scope": {
                    "value": "macModel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.imagesPlaceholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "self.spatial_imagesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.imagesPlaceholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.object_imagesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.object_imageBBoxesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.object_imagesObjectNumAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.scene_imagesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.scene_imagesObjectNumAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.imagesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.imageBBoxesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.imagesObjectNumAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_112": {
                "input": {
                    "value": "self.questionIndicesAll",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_125": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_309": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_464": {
                "input": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Name"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "self.aEmbeddingsOp(aIndices, embInit['a'])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(answers, axis=0), [self.batchSize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(answers, config.answerWordsNum)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_598": {
                "variable": {
                    "value": "cff",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cff",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(imageDim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_606": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vecQuestions, images]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_907": {
                "variable": {
                    "value": "answerFreqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "answerFreqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(answerFreqs, config.answerWordsNum)",
                            "Call"
                        ],
                        [
                            "answerFreqs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(answerFreqs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(answerFreqs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_909": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "answerDist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "answerFreqs / tf.expand_dims(tf.to_float(answerFreqNums), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(answers, config.answerWordsNum)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.FCLayer(features, dims, batchNorm=self.batchNorm if config.outputBN else None, dropout=self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.gatedAct(config.outAct, gate=config.outGate)(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, interDim, sumMod=config.answerSumMod)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "ops.expMask(logits, choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_940": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.FCLayer(features, dims, batchNorm=self.batchNorm if config.outputBN else None, dropout=self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.gatedAct(config.outAct, gate=config.outGate)(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, interDim, sumMod=config.answerSumMod)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "ops.expMask(logits, choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_942": {
                "x": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmax(logits, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Name"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "self.aEmbeddingsOp(aIndices, embInit['a'])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(answers, axis=0), [self.batchSize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(answers, config.answerWordsNum)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_1021": {
                "control_inputs": {
                    "value": "updateOps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_1026": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(gradients_vars, global_step=self.globalStep)",
                            "Call"
                        ],
                        [
                            "tf.group(train, subsetTrain)",
                            "Call"
                        ],
                        [
                            "trainAndUpdateOp",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "subsetTrain",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.subsetOptimizer.apply_gradients(self.subset_gradientVarsAll)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_1034": {
                "variable": {
                    "value": "trainAndUpdateOp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "maintainAveragesOp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ema.apply(tf.trainable_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1054": {
                "values": {
                    "value": "self.lossList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1055": {
                "values": {
                    "value": "self.answerLossList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1056": {
                "values": {
                    "value": "self.answerAccList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1057": {
                "values": {
                    "value": "self.correctNumList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_1065": {
                "variable": {
                    "value": "avgGradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(gradients, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.imagesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.imagesObjectNumAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self.imagesPlaceholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "self.imagesAll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.imagesPlaceholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_404": {
                "variable": {
                    "value": "features[spatial]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['spatial']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batchSize, -1, outDim['spatial'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_414": {
                "shape": {
                    "value": "(1, config.wrdQEmbDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_770": {
                "name_or_scope": {
                    "value": "spatial",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_773": {
                "name_or_scope": {
                    "value": "object",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_776": {
                "name_or_scope": {
                    "value": "scene",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_915": {
                "variable": {
                    "value": "answerDist",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Name"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddings, aIndices)",
                            "Call"
                        ],
                        [
                            "self.aEmbeddingsOp(aIndices, embInit['a'])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(answers, axis=0), [self.batchSize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(answers, config.answerWordsNum)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "config.answerWordsNum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_924": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=answers, logits=logits)",
                            "Call"
                        ],
                        [
                            "ops.hingeLoss(labels=answers, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(labels=answerDist, logits=logits)",
                            "Call"
                        ],
                        [
                            "losses * self.answerDict.weights",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=answerDist, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.weighted_cross_entropy_with_logits(targets=answerDist, logits=logits, pos_weight=config.lossWeight)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_937": {
                "x": {
                    "value": "tf.sequence_mask([2], config.answerWordsNum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_954": {
                "x": {
                    "value": "tf.sequence_mask([2], config.answerWordsNum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_1031": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_1033": {
                "control_inputs": {
                    "value": "[train]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_1077": {
                "variable": {
                    "value": "avgGradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(gradients, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_1194": {
                "device_name": {
                    "value": "'/gpu:{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_1198": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_908": {
                "input": {
                    "value": "tf.to_float(answerFreqNums)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_917": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "answerDist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "answerFreqs / tf.expand_dims(tf.to_float(answerFreqNums), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(answers, config.answerWordsNum)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.FCLayer(features, dims, batchNorm=self.batchNorm if config.outputBN else None, dropout=self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.gatedAct(config.outAct, gate=config.outGate)(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, interDim, sumMod=config.answerSumMod)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "ops.expMask(logits, choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_920": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "answerDist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "answerFreqs / tf.expand_dims(tf.to_float(answerFreqNums), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(answers, config.answerWordsNum)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.FCLayer(features, dims, batchNorm=self.batchNorm if config.outputBN else None, dropout=self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.gatedAct(config.outAct, gate=config.outGate)(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logits, self.dropouts['output'])",
                            "Call"
                        ],
                        [
                            "ops.inter2logits(interactions, interDim, sumMod=config.answerSumMod)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "ops.expMask(logits, choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ],
                        [
                            "self.classifier(output, dim, choices, self.choicesNums)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "config.lossWeight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_937": {
                "lengths": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "config.answerWordsNum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_954": {
                "lengths": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "config.answerWordsNum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1065": {
                "values": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_1195": {
                "name": {
                    "value": "'tower{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_1289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_908": {
                "x": {
                    "value": "answerFreqNums",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_911": {
                "x": {
                    "value": "answerFreqNums",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_1077": {
                "values": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1250": {
                "variable": {
                    "value": "finalFeatures",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "features_to_concat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "my_ops.py": {
        "tensorflow": {
            "matmul_24": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mq * q",
                            "BinOp"
                        ],
                        [
                            "self.wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mk * k",
                            "BinOp"
                        ],
                        [
                            "self.wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_heads(k, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_26": {
                "variable": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_heads(v, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_63": {
                "variable": {
                    "value": "Mq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(M[:, :, :, 0], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, q.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "Mk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(M[:, :, :, 1], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, q.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mq * q",
                            "BinOp"
                        ],
                        [
                            "self.wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mk * k",
                            "BinOp"
                        ],
                        [
                            "self.wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_heads(k, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_heads(v, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_87": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(dff, activation='selu'), tf.keras.layers.Dense(d_model)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_103": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_104": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_105": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_107": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "variable": {
                    "value": "scaled_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scaled_attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_199": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "mm_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_216": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_247": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNormalization_268": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNormalization_269": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNormalization_270": {
                "variable": {
                    "value": "self.layernorm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNormalization_271": {
                "variable": {
                    "value": "self.layernorm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_274": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_275": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_276": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_277": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_297": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.sequence_mask(padding_mask, kb_maxLength))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_298": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.logical_not(tf.sequence_mask(padding_mask, kb_maxLength)))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_299": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.logical_not(tf.sequence_mask(padding_mask, kb_maxLength)))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "control_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "control_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(control_state, (-1, control_state.shape[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, control_state.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layernorm2(attn2 + out1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out2, (-1, out2.shape[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, out2.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_312": {
                "variable": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.block2([out2, control_state], training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(interactions, 1)",
                            "Call"
                        ],
                        [
                            "ops.activations[config.readCtrlAct](interactions)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_27": {
                "x": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_58": {
                "units": {
                    "value": "gate_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_59": {
                "units": {
                    "value": "gate_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_61": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "input": {
                    "value": "M[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "M[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "x": {
                    "value": "dk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, x.shape[1], self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, x.shape[1], self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, x.shape[1], self.num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_117": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, x.shape[1], self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "concat_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "concat_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, scaled_attention.shape[1], self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_203": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "mm_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_207": {
                "variable": {
                    "value": "ml0",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "size * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_240": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(m, (bsize, seqlen, self.rank, self.split_size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(m, (bsize, self.rank, self.split_size))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_243": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(zs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout_input)(z, training=training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.sqrt(tf.nn.relu(z)) - tf.math.sqrt(tf.nn.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "tf.math.l2_normalize(z, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout_input)(z, training=training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mk * k",
                            "BinOp"
                        ],
                        [
                            "self.wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_heads(k, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_71": {
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mk * k",
                            "BinOp"
                        ],
                        [
                            "self.wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_heads(k, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_88": {
                "units": {
                    "value": "dff",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "selu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_89": {
                "units": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mq * q",
                            "BinOp"
                        ],
                        [
                            "self.wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_212": {
                "variable": {
                    "value": "ml1",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "size * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_222": {
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout_input)(x1, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(m, (bsize, seqlen, self.rank, self.split_size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(m, (bsize, self.rank, self.split_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bsize, seqlen, self.rank, self.split_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(m, (bsize, seqlen, self.rank, self.split_size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(m, (bsize, self.rank, self.split_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bsize, self.rank, self.split_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_296": {
                "input": {
                    "value": "knowledge_base",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logical_not_297": {
                "x": {
                    "value": "tf.sequence_mask(padding_mask, kb_maxLength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_224": {
                "rate": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "rate": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_241": {
                "x": {
                    "value": "tf.nn.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_250": {
                "rate": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_253": {
                "rate": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_297": {
                "lengths": {
                    "value": "padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "kb_maxLength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(knowledge_base)[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_241": {
                "features": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "concat_53": {
                "variable": {
                    "value": "newDims",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(inp)[:-1], tf.fill((1,), outDim)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, inDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight' + name, shape=shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel' + name, shape=shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "getWeight((inDim, outDim) if outDim > 1 else (inDim,))",
                            "Call"
                        ],
                        [
                            "getWeight((dim,))",
                            "Call"
                        ],
                        [
                            "getWeight((dim, dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inp, W)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, newDims)",
                            "Call"
                        ],
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.elu(inp)",
                            "Call"
                        ],
                        [
                            "tf.nn.selu(inp)",
                            "Call"
                        ],
                        [
                            "tf.maximum(inp, config.reluAlpha * inp)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inp)",
                            "Call"
                        ],
                        [
                            "multiply(inp, W)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(inp * W, axis=-1)",
                            "Call"
                        ],
                        [
                            "output + b",
                            "BinOp"
                        ],
                        [
                            "activations[act](output)",
                            "Call"
                        ],
                        [
                            "linear(output, outDim, outDim, dropout=actDropout, batchNorm=batchNorm, addBias=addBias, act='NON', actLayer=False, name=name + '_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inp, filter=kernel, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "activations[act](output)",
                            "Call"
                        ],
                        [
                            "(x + mulBias) * (y + mulBias)",
                            "BinOp"
                        ],
                        [
                            "x * W * y + b",
                            "BinOp"
                        ],
                        [
                            "multiply(x, W) * y + b",
                            "BinOp"
                        ],
                        [
                            "tf.tanh(x + y)",
                            "Call"
                        ],
                        [
                            "tf.concat([output, concatVals['x']], axis=-1)",
                            "Call"
                        ],
                        [
                            "concat(output, concatVals['y'], expandY=expandY)",
                            "Call"
                        ],
                        [
                            "tf.concat([output0, output1, output2, output3], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(output, 2 * dim, dim, name='o')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "newDims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(inp)[:-1], tf.fill((1,), outDim)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_81": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sampleGumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "gumbelSoftmaxSample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "linear(y, dim, proj['dim'], name=yName, reuse=yReuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_221": {
                "variable": {
                    "value": "yHard",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(y, tf.reduce_max(y, 1, keep_dims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_228": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : y",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : yNew",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_239": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'varDp' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_241": {
                "variable": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.sigmoid(var)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sequence_mask_260": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(targets)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_270": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(targets)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_271": {
                "variable": {
                    "value": "corrects",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.logical_not(tf.sequence_mask(seqLength, maxLength))) * -inf",
                            "BinOp"
                        ],
                        [
                            "tf.sequence_mask(lengths, maxlen=tf.shape(targets)[1])",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(lengths, maxlen=tf.shape(targets)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(binaryTensor)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_272": {
                "variable": {
                    "value": "numCorrects",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_int32(corrects)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "variable": {
                    "value": "acc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(numCorrects) / (tf.to_float(lengths) + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(acc1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_277": {
                "variable": {
                    "value": "acc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(numCorrects, lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_278": {
                "variable": {
                    "value": "acc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(numCorrects, lengths))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acc2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_283": {
                "variable": {
                    "value": "maxLogit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits * (1 - labels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_284": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "(1 + maxLogit - logits) * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_285": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu((1 + maxLogit - logits) * labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_465": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.meshgrid(tf.linspace(-config.locationBias, config.locationBias, w), tf.linspace(-config.locationBias, config.locationBias, h))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_482": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(tf.linspace(-config.locationBias, config.locationBias, w))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_483": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(tf.linspace(-config.locationBias, config.locationBias, h))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_484": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(tf.range(dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_486": {
                "variable": {
                    "value": "peSinX",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x / tf.pow(10000.0, i / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_487": {
                "variable": {
                    "value": "peCosX",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x / tf.pow(10000.0, i / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_488": {
                "variable": {
                    "value": "peSinY",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y / tf.pow(10000.0, i / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_489": {
                "variable": {
                    "value": "peCosY",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y / tf.pow(10000.0, i / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_491": {
                "variable": {
                    "value": "peSinX",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(peSinX, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[h, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_492": {
                "variable": {
                    "value": "peCosX",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(peCosX, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[h, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_493": {
                "variable": {
                    "value": "peSinY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(peSinY, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_494": {
                "variable": {
                    "value": "peCosY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(peCosY, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_496": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[peSinX, peCosX, peSinY, peCosY]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_633": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(features, dims[i], dims[i + 1], name='fc_%d' % i, batchNorm=batchNorm, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "activations[act](features)",
                            "Call"
                        ],
                        [
                            "cnn(features, dims[i], dims[i + 1], name='cnn_%d' % i, batchNorm=batchNorm, dropout=dropout, kernelSize=kernelSizes[i], stride=strides[i], act=act)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim, name='LIN')",
                            "Call"
                        ],
                        [
                            "features + grid",
                            "BinOp"
                        ],
                        [
                            "tf.concat([features, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ],
                        [
                            "tf.concat([features, grid, features * grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "addLocation(features, inDim, lDim=inDim, outDim=inDim, locType=loc['locType'], mod=loc['mod'])",
                            "Call"
                        ],
                        [
                            "linear(features, inDim, projDim)",
                            "Call"
                        ],
                        [
                            "relu(features)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(features, ksize=poolingDims, strides=poolingDims, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, (-1, dim))",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_1025": {
                "variable": {
                    "value": "randomTensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "keepProb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_1027": {
                "variable": {
                    "value": "binaryTensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "randomTensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(keepProb)",
                            "Call"
                        ],
                        [
                            "randomTensor + tf.random_uniform(shape, minval=0, maxval=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_1028": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "binaryTensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.floor(randomTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'weight' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'kernel' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_41": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'bias' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sampleGumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "gumbelSoftmaxSample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "linear(y, dim, proj['dim'], name=yName, reuse=yReuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y, x * y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "trainable_variables_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(interactions, axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(interactions, dim, 1, dropout=dropout, name='logits')",
                            "Call"
                        ],
                        [
                            "inter2logits(interactions, dim, dropout=dropout, sumMod=sumMod)",
                            "Call"
                        ],
                        [
                            "expMask(logits, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_157": {
                "input_tensor": {
                    "value": "tf.expand_dims(attention, axis=-1) * features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_204": {
                "logits": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_326": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(train, lambda : tf.sigmoid(var), lambda : 1.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_410": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(train, lambda : tf.sigmoid(var), lambda : 1.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_412": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getKernel((kernelH, kernelW, inDim, outDim))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_627": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(features, dims[i], dims[i + 1], name='fc_%d' % i, batchNorm=batchNorm, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "activations[act](features)",
                            "Call"
                        ],
                        [
                            "cnn(features, dims[i], dims[i + 1], name='cnn_%d' % i, batchNorm=batchNorm, dropout=dropout, kernelSize=kernelSizes[i], stride=strides[i], act=act)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim, name='LIN')",
                            "Call"
                        ],
                        [
                            "features + grid",
                            "BinOp"
                        ],
                        [
                            "tf.concat([features, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ],
                        [
                            "tf.concat([features, grid, features * grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "addLocation(features, inDim, lDim=inDim, outDim=inDim, locType=loc['locType'], mod=loc['mod'])",
                            "Call"
                        ],
                        [
                            "linear(features, inDim, projDim)",
                            "Call"
                        ],
                        [
                            "relu(features)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(features, ksize=poolingDims, strides=poolingDims, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, (-1, dim))",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "poolingDims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, pooling, pooling, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "poolingDims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, pooling, pooling, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_689": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, w)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "linear(x, dim, proj['dim'], name=xName, reuse=xReuse)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(train, lambda : tf.sigmoid(var), lambda : 1.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_690": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sampleGumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "gumbelSoftmaxSample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "linear(y, dim, proj['dim'], name=yName, reuse=yReuse)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(train, lambda : tf.sigmoid(var), lambda : 1.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dynamic_rnn_832": {
                "variable": {
                    "value": "(outSeq, lastState)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell",
                            "Attribute"
                        ],
                        [
                            "cells[cellType](hDim, reuse=reuse, activation=activation)",
                            "Call"
                        ],
                        [
                            "cell(hDim, num_proj=projDim, reuse=reuse, activation=activation)",
                            "Call"
                        ],
                        [
                            "createCell(hDim, reuse, cellType)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, state_keep_prob=varDp['stateDp'], input_keep_prob=varDp['inputDp'], variational_recurrent=True, input_size=varDp['inputSize'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "createCell(dim, reuse=reuse, cellType=config.stemGridRnnMod, act=config.stemGridAct)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inSeq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqL",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "initialState",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.zero_state(batchSize, tf.float32)",
                            "Call"
                        ],
                        [
                            "cell.zero_state(batchSize, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_902": {
                "variable": {
                    "value": "((outSeqFw, outSeqBw), (lastStateFw, lastStateBw))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cellFw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "createCell(hDim, reuse, cellType)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cellFw, state_keep_prob=varDp['stateDp'], input_keep_prob=varDp['inputDp'], variational_recurrent=True, input_size=varDp['inputSize'], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cellBw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "createCell(hDim, reuse, cellType)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cellBw, state_keep_prob=varDp['stateDp'], input_keep_prob=varDp['inputDp'], variational_recurrent=True, input_size=varDp['inputSize'], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inSeq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqL",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_state_fw": {
                    "value": "initialStateFw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cellFw.zero_state(batchSize, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "initialStateBw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cellBw.zero_state(batchSize, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_913": {
                "variable": {
                    "value": "outSeq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outSeqFw, outSeqBw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_914": {
                "variable": {
                    "value": "lastState",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[lastStateFw, lastStateBw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_981": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output0, output1, output2, output3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1014": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.stack(row, axis=1) for row in states]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(outputs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "kernels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_51": {
                "input": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight' + name, shape=shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel' + name, shape=shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "getWeight((inDim, outDim) if outDim > 1 else (inDim,))",
                            "Call"
                        ],
                        [
                            "getWeight((dim,))",
                            "Call"
                        ],
                        [
                            "getWeight((dim, dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_52": {
                "input": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight' + name, shape=shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel' + name, shape=shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "getWeight((inDim, outDim) if outDim > 1 else (inDim,))",
                            "Call"
                        ],
                        [
                            "getWeight((dim,))",
                            "Call"
                        ],
                        [
                            "getWeight((dim, dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_82": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, w)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "linear(x, dim, proj['dim'], name=xName, reuse=xReuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "'inter2logits' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "'inter2att' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_171": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "inp.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_173": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_177": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_199": {
                "x": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_221": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sampleGumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "gumbelSoftmaxSample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "linear(y, dim, proj['dim'], name=yName, reuse=yReuse)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_max(y, 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_222": {
                "input": {
                    "value": "yHard - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(interactions, axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(interactions, dim, 1, dropout=dropout, name='logits')",
                            "Call"
                        ],
                        [
                            "inter2logits(interactions, dim, dropout=dropout, sumMod=sumMod)",
                            "Call"
                        ],
                        [
                            "expMask(logits, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_251": {
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_252": {
                "x": {
                    "value": "tf.logical_not(tf.sequence_mask(seqLength, maxLength))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_261": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.logical_not(tf.sequence_mask(seqLength, maxLength))) * -inf",
                            "BinOp"
                        ],
                        [
                            "tf.sequence_mask(lengths, maxlen=tf.shape(targets)[1])",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(lengths, maxlen=tf.shape(targets)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(binaryTensor)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "equal_271": {
                "x": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_int32_272": {
                "x": {
                    "value": "corrects",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.equal(preds, targets), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_274": {
                "x": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_277": {
                "x": {
                    "value": "numCorrects",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.to_int32(corrects), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_317": {
                "name_or_scope": {
                    "value": "'linearLayer' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_331": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inp * W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "'cnnLayer' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_465": {
                "*args": {
                    "value": "tf.linspace(-config.locationBias, config.locationBias, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.linspace(-config.locationBias, config.locationBias, h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_482": {
                "x": {
                    "value": "tf.linspace(-config.locationBias, config.locationBias, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_483": {
                "x": {
                    "value": "tf.linspace(-config.locationBias, config.locationBias, h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_484": {
                "x": {
                    "value": "tf.range(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_491": {
                "input": {
                    "value": "peSinX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sin(x / tf.pow(10000.0, i / dim))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(peSinX, axis=0), [h, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_492": {
                "input": {
                    "value": "peCosX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cos(x / tf.pow(10000.0, i / dim))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(peCosX, axis=0), [h, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_493": {
                "input": {
                    "value": "peSinY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sin(y / tf.pow(10000.0, i / dim))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(peSinY, axis=1), [1, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_494": {
                "input": {
                    "value": "peCosY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cos(y / tf.pow(10000.0, i / dim))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(peCosY, axis=1), [1, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_532": {
                "name_or_scope": {
                    "value": "'addLocation' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tile_552": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(grid, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchSize, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_553": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, grid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_686": {
                "name_or_scope": {
                    "value": "'mul' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_693": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, w)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "linear(x, dim, proj['dim'], name=xName, reuse=xReuse)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "proj.get('dropout', 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_694": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sampleGumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "gumbelSoftmaxSample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "linear(y, dim, proj['dim'], name=yName, reuse=yReuse)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "proj.get('dropout', 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_710": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sampleGumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "gumbelSoftmaxSample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "linear(y, dim, proj['dim'], name=yName, reuse=yReuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_817": {
                "name_or_scope": {
                    "value": "'rnnLayer' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_823": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell",
                            "Attribute"
                        ],
                        [
                            "cells[cellType](hDim, reuse=reuse, activation=activation)",
                            "Call"
                        ],
                        [
                            "cell(hDim, num_proj=projDim, reuse=reuse, activation=activation)",
                            "Call"
                        ],
                        [
                            "createCell(hDim, reuse, cellType)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, state_keep_prob=varDp['stateDp'], input_keep_prob=varDp['inputDp'], variational_recurrent=True, input_size=varDp['inputSize'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "createCell(dim, reuse=reuse, cellType=config.stemGridRnnMod, act=config.stemGridAct)",
                            "Call"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "varDp['stateDp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "varDp['inputDp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "variational_recurrent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "input_size": {
                    "value": "varDp['inputSize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_828": {
                "variable": {
                    "value": "inSeq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inSeq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(train, lambda : tf.sigmoid(var), lambda : 1.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_878": {
                "name_or_scope": {
                    "value": "'birnnLayer' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_887": {
                "variable": {
                    "value": "cellFw",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cellFw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "createCell(hDim, reuse, cellType)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cellFw, state_keep_prob=varDp['stateDp'], input_keep_prob=varDp['inputDp'], variational_recurrent=True, input_size=varDp['inputSize'], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "varDp['stateDp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "varDp['inputDp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "variational_recurrent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "input_size": {
                    "value": "varDp['inputSize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_892": {
                "variable": {
                    "value": "cellBw",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cellBw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "createCell(hDim, reuse, cellType)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cellBw, state_keep_prob=varDp['stateDp'], input_keep_prob=varDp['inputDp'], variational_recurrent=True, input_size=varDp['inputSize'], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "varDp['stateDp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "varDp['inputDp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "variational_recurrent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "input_size": {
                    "value": "varDp['inputSize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_897": {
                "variable": {
                    "value": "inSeq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inSeq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(train, lambda : tf.sigmoid(var), lambda : 1.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_959": {
                "name_or_scope": {
                    "value": "'rnnLayer' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_973": {
                "name_or_scope": {
                    "value": "'multigridRNNLayer' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_988": {
                "name_or_scope": {
                    "value": "'gridRNNLayer' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_1036": {
                "x": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(keepProb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_53": {
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "outDim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(W)[1]",
                            "Subscript"
                        ],
                        [
                            "dim",
                            "Name"
                        ],
                        [
                            "dim",
                            "Name"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_69": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, w)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "linear(x, dim, proj['dim'], name=xName, reuse=xReuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_96": {
                "t": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.get_variable('varDp' + name, shape=(), initializer=tf.constant_initializer(2), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_157": {
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "prelu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "selu_179": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_203": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(interactions, axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(interactions, dim, 1, dropout=dropout, name='logits')",
                            "Call"
                        ],
                        [
                            "inter2logits(interactions, dim, dropout=dropout, sumMod=sumMod)",
                            "Call"
                        ],
                        [
                            "expMask(logits, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_221": {
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sampleGumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "gumbelSoftmaxSample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(x) + y",
                            "BinOp"
                        ],
                        [
                            "linear(y, dim, proj['dim'], name=yName, reuse=yReuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_239": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.get_variable('varDp' + name, shape=(), initializer=tf.constant_initializer(2), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_252": {
                "x": {
                    "value": "tf.sequence_mask(seqLength, maxLength)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_465": {
                "start": {
                    "value": "-config.locationBias",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "config.locationBias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(features)[2]",
                            "Subscript"
                        ],
                        [
                            "w / pooling",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_466": {
                "start": {
                    "value": "-config.locationBias",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "config.locationBias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(features)[1]",
                            "Subscript"
                        ],
                        [
                            "h / pooling",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_482": {
                "start": {
                    "value": "-config.locationBias",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "config.locationBias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(features)[2]",
                            "Subscript"
                        ],
                        [
                            "w / pooling",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_483": {
                "start": {
                    "value": "-config.locationBias",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "config.locationBias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(features)[1]",
                            "Subscript"
                        ],
                        [
                            "h / pooling",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_486": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "i / dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_487": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "i / dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_488": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "i / dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_489": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "i / dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_533": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(features, dims[i], dims[i + 1], name='fc_%d' % i, batchNorm=batchNorm, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "activations[act](features)",
                            "Call"
                        ],
                        [
                            "cnn(features, dims[i], dims[i + 1], name='cnn_%d' % i, batchNorm=batchNorm, dropout=dropout, kernelSize=kernelSizes[i], stride=strides[i], act=act)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim, name='LIN')",
                            "Call"
                        ],
                        [
                            "features + grid",
                            "BinOp"
                        ],
                        [
                            "tf.concat([features, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ],
                        [
                            "tf.concat([features, grid, features * grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "addLocation(features, inDim, lDim=inDim, outDim=inDim, locType=loc['locType'], mod=loc['mod'])",
                            "Call"
                        ],
                        [
                            "linear(features, inDim, projDim)",
                            "Call"
                        ],
                        [
                            "relu(features)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(features, ksize=poolingDims, strides=poolingDims, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, (-1, dim))",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_734": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output, concatVals['x']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_818": {
                "input": {
                    "value": "inSeq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_879": {
                "input": {
                    "value": "inSeq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inSeq, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_881": {
                "name_or_scope": {
                    "value": "fw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_883": {
                "name_or_scope": {
                    "value": "bw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_989": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(features, dims[i], dims[i + 1], name='fc_%d' % i, batchNorm=batchNorm, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "activations[act](features)",
                            "Call"
                        ],
                        [
                            "cnn(features, dims[i], dims[i + 1], name='cnn_%d' % i, batchNorm=batchNorm, dropout=dropout, kernelSize=kernelSizes[i], stride=strides[i], act=act)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim, name='LIN')",
                            "Call"
                        ],
                        [
                            "features + grid",
                            "BinOp"
                        ],
                        [
                            "tf.concat([features, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ],
                        [
                            "tf.concat([features, grid, features * grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "addLocation(features, inDim, lDim=inDim, outDim=inDim, locType=loc['locType'], mod=loc['mod'])",
                            "Call"
                        ],
                        [
                            "linear(features, inDim, projDim)",
                            "Call"
                        ],
                        [
                            "relu(features)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(features, ksize=poolingDims, strides=poolingDims, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, (-1, dim))",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_996": {
                "value": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(features, dims[i], dims[i + 1], name='fc_%d' % i, batchNorm=batchNorm, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "activations[act](features)",
                            "Call"
                        ],
                        [
                            "cnn(features, dims[i], dims[i + 1], name='cnn_%d' % i, batchNorm=batchNorm, dropout=dropout, kernelSize=kernelSizes[i], stride=strides[i], act=act)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim, name='LIN')",
                            "Call"
                        ],
                        [
                            "features + grid",
                            "BinOp"
                        ],
                        [
                            "tf.concat([features, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ],
                        [
                            "tf.concat([features, grid, features * grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "addLocation(features, inDim, lDim=inDim, outDim=inDim, locType=loc['locType'], mod=loc['mod'])",
                            "Call"
                        ],
                        [
                            "linear(features, inDim, projDim)",
                            "Call"
                        ],
                        [
                            "relu(features)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(features, ksize=poolingDims, strides=poolingDims, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, (-1, dim))",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(features)[1]",
                            "Subscript"
                        ],
                        [
                            "h / pooling",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1009": {
                "variable": {
                    "value": "prevs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(prevState(i + iPrev, j), prevState(i, j + jPrev))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1013": {
                "values": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_1036": {
                "x": {
                    "value": "keepProb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_182": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "config.reluAlpha * inp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sequence_mask_252": {
                "lengths": {
                    "value": "seqLength",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "maxLength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(seq)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_260": {
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_270": {
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_535": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(features, dims[i], dims[i + 1], name='fc_%d' % i, batchNorm=batchNorm, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "activations[act](features)",
                            "Call"
                        ],
                        [
                            "cnn(features, dims[i], dims[i + 1], name='cnn_%d' % i, batchNorm=batchNorm, dropout=dropout, kernelSize=kernelSizes[i], stride=strides[i], act=act)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim, name='LIN')",
                            "Call"
                        ],
                        [
                            "features + grid",
                            "BinOp"
                        ],
                        [
                            "tf.concat([features, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ],
                        [
                            "tf.concat([features, grid, features * grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "addLocation(features, inDim, lDim=inDim, outDim=inDim, locType=loc['locType'], mod=loc['mod'])",
                            "Call"
                        ],
                        [
                            "linear(features, inDim, projDim)",
                            "Call"
                        ],
                        [
                            "relu(features)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(features, ksize=poolingDims, strides=poolingDims, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, (-1, dim))",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_537": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(features, dims[i], dims[i + 1], name='fc_%d' % i, batchNorm=batchNorm, dropout=dropout)",
                            "Call"
                        ],
                        [
                            "activations[act](features)",
                            "Call"
                        ],
                        [
                            "cnn(features, dims[i], dims[i + 1], name='cnn_%d' % i, batchNorm=batchNorm, dropout=dropout, kernelSize=kernelSizes[i], stride=strides[i], act=act)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim, name='LIN')",
                            "Call"
                        ],
                        [
                            "features + grid",
                            "BinOp"
                        ],
                        [
                            "tf.concat([features, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ],
                        [
                            "tf.concat([features, grid, features * grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "addLocation(features, inDim, lDim=inDim, outDim=inDim, locType=loc['locType'], mod=loc['mod'])",
                            "Call"
                        ],
                        [
                            "linear(features, inDim, projDim)",
                            "Call"
                        ],
                        [
                            "relu(features)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(features, ksize=poolingDims, strides=poolingDims, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(features, (-1, dim))",
                            "Call"
                        ],
                        [
                            "linear(features, dim, outDim)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_552": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(tf.meshgrid(tf.linspace(-config.locationBias, config.locationBias, w), tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(grid, dim, outDim, addBias=addBias, name='locationL')",
                            "Call"
                        ],
                        [
                            "tf.concat([peSinX, peCosX, peSinY, peCosY], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(grid, dim, outDim, addBias=addBias, name='locationPE')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, axis=0), [batchSize, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, axis=0), [batchSize, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_566": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(grid, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchSize, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_567": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, grid, features * grid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_712": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.to_float(tf.linspace(-config.locationBias, config.locationBias, w)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, proj.get('dropout', 1.0))",
                            "Call"
                        ],
                        [
                            "linear(x, dim, proj['dim'], name=xName, reuse=xReuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_728": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_172": {
                "value": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_174": {
                "features": {
                    "value": "-inp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1, inDim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=True, scale=True, is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inp, decay=batchNorm['decay'], center=batchNorm['center'], scale=batchNorm['scale'], is_training=batchNorm['train'], updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_566": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(tf.meshgrid(tf.linspace(-config.locationBias, config.locationBias, w), tf.linspace(-config.locationBias, config.locationBias, h)), axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(grid, dim, outDim, addBias=addBias, name='locationL')",
                            "Call"
                        ],
                        [
                            "tf.concat([peSinX, peCosX, peSinY, peCosY], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(grid, dim, outDim, addBias=addBias, name='locationPE')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, axis=0), [batchSize, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, axis=0), [batchSize, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "extract_features.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}