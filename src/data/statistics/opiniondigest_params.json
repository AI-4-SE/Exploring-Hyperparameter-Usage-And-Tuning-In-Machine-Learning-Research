{
    "src/aggregate.py": {
        "torch": {
            "cosine_similarity_53": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "self.emb.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "other.emb.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._get_tok_emb(tok, w2v) for tok in toks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ext.emb for ext in exts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "centroid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([self._get_tok_emb(tok, w2v) for tok in toks], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([ext.emb for ext in exts], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_194": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([self._get_tok_emb(tok, w2v) for tok in toks], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([ext.emb for ext in exts], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "centroid.unsqueeze(0).expand(embs.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_73": {
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([self._get_tok_emb(tok, w2v) for tok in toks], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([ext.emb for ext in exts], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "w2v.vectors[w2v.vocab[tok].index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "w2v.vectors.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_195": {
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cosine_similarity(embs, centroid.unsqueeze(0).expand(embs.size()))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/beam_search.py": {
        "torch": {
            "stack_205": {
                "variable": {
                    "value": "self.scores_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.scores_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_206": {
                "variable": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_207": {
                "variable": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "beams_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_69": {
                "input": {
                    "value": "lprobs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(output_beam_size * 2, lprobs.view(bsz, -1).size(1) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.scores_buf, self.indices_buf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_79": {
                "input": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_108": {
                "input": {
                    "value": "scores.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(output_beam_size * 2, scores.view(bsz, -1).size(1) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.scores_buf, self.indices_buf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_118": {
                "input": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "lprobs[:, 0, :].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.diversity_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_186": {
                "variable": {
                    "value": "lprobs_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs[:, g::num_groups, :]",
                            "Subscript"
                        ],
                        [
                            "torch.add(lprobs_g, self.diversity_strength, self.diversity_buf.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "lprobs_g.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.diversity_strength",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.diversity_buf.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/generate.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_183": {
                "f": {
                    "value": "model_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(basepath, 'model', '{}_op2text_{}.pt'.format(p_conf.conf_name, t_conf.conf_name))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "full_51": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_99": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_100": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_102": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_103": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_107": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_141": {
                "variable": {
                    "value": "self.in_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.in_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Transformer_161": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_257": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_258": {
                "variable": {
                    "value": "scores[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "variable": {
                    "value": "self.out_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.out_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "len(active_beams)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_293": {
                "variable": {
                    "value": "clean_lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "expanded_indices == eos_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "log_probs_after_eos[:, :len(active_beams)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "F.log_softmax(lprobs.detach().cpu(), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_73": {
                "input": {
                    "value": "F.log_softmax(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), target.size(1), 1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_77": {
                "input": {
                    "value": "F.log_softmax(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), target.size(1), 1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_77": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer.decoder(self.out_embed(tgt), memory, tgt_mask=tgt_mask, memory_mask=memory_mask, tgt_key_padding_mask=tgt_key_padding_mask, memory_key_padding_mask=memory_key_padding_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_100": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_294": {
                "input": {
                    "value": "lprobs.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "data": {
                    "value": "active_beams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ],
                        [
                            "active_beams in range(beam_size)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_softmax_73": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer.decoder(self.out_embed(tgt), memory, tgt_mask=tgt_mask, memory_mask=memory_mask, tgt_key_padding_mask=tgt_key_padding_mask, memory_key_padding_mask=memory_key_padding_mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "device_90": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "StepLR_190": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('{}(model.parameters(), **{})'.format(t_conf['training']['optimizer']['cls'], str(t_conf['training']['optimizer']['params'])))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_196": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "OUT_TEXT.vocab.stoi['<pad>']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_338": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(basepath, 'model', '{}_op2text_{}.pt'.format(p_conf.conf_name, t_conf.conf_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_232": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.out_text[1:, :], torch.LongTensor(OUT_TEXT.vocab.stoi['<pad>'], b_size).fill_(1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.out_text[1:, :], torch.LongTensor(OUT_TEXT.vocab.stoi['<pad>'], b_size).fill_(1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_335": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filepath.replace('.pt', '_epoch-{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__249": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_conf['training']['clipping']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    }
}