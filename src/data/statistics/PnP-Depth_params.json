{
    "Super-LiDAR/admm.py": {
        "tensorflow": {
            "ones_9": {
                "variable": {
                    "value": "kern",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kern, kern, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_46": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "l[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(z[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(tf.pow(loss_mask * (d - pred), 2), axis=[1, 2, 3])",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + tv_loss * tf.reduce_mean(tf.image.total_variation(pred))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(0.5 * tf.reduce_sum(tf.pow(sdmask * (sd - pred), 2), axis=[1, 2, 3]))",
                            "Call"
                        ],
                        [
                            "loss + tv_loss * tf.reduce_mean(tf.image.total_variation(pred))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_161": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "l[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(z[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_266": {
                "variable": {
                    "value": "(xadv, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(lzy2list(l, z, y), 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "fast_gradient",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_269": {
                "variable": {
                    "value": "final_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "0.5 * tf.reduce_sum(tf.pow(loss_mask * (d - pred), 2), axis=[1, 2, 3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_5": {
                "input": {
                    "value": "tf.pad(x, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kern, kern, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_10": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[0], l[1], l[2]]",
                            "List"
                        ]
                    ]
                },
                "filters": {
                    "value": "kern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([kern, kern, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'kernel{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kern, kern, in_channels, filt]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(stddev))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "l[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(z[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_141": {
                "variable": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'kernel{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kern, kern, in_channels, filt]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(stddev))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "l[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(z[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_253": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "0.5 * tf.reduce_sum(tf.pow(sdmask * (sd - pred), 2), axis=[1, 2, 3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_5": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[0], l[1], l[2]]",
                            "List"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_32": {
                "variable": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(count(m[i - 1], kern, stride), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(count(sdmask, kern, stride), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[0], l[1], l[2]]",
                            "List"
                        ]
                    ]
                },
                "filters": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides[i], strides[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_42": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[0], l[1], l[2]]",
                            "List"
                        ]
                    ]
                },
                "filters": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides[i], strides[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_50": {
                "x": {
                    "value": "x - (tf.abs(b) - l)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "sd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "z[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "input_tensor": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "z[n - 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.pow(loss_mask * (d - pred), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(count(m[i - 1], kern, stride), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_151": {
                "variable": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(count(sdmask, kern, stride), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_154": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[0], l[1], l[2]]",
                            "List"
                        ]
                    ]
                },
                "filters": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides[i], strides[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_158": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[0], l[1], l[2]]",
                            "List"
                        ]
                    ]
                },
                "filters": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides[i], strides[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_164": {
                "x": {
                    "value": "x - (tf.abs(b) - l)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_189": {
                "input": {
                    "value": "sd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_197": {
                "input": {
                    "value": "z[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_248": {
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(1, len(filters))",
                            "Call"
                        ],
                        [
                            "range(num_iters)",
                            "Call"
                        ],
                        [
                            "range(n - 2, -1, -1)",
                            "Call"
                        ],
                        [
                            "range(1, n)",
                            "Call"
                        ],
                        [
                            "range(1, len(filters))",
                            "Call"
                        ],
                        [
                            "range(1, n)",
                            "Call"
                        ],
                        [
                            "range(num_iters)",
                            "Call"
                        ],
                        [
                            "range(n - 2, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pnp_iters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "gradients_257": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(tf.pow(loss_mask * (d - pred), 2), axis=[1, 2, 3])",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + tv_loss * tf.reduce_mean(tf.image.total_variation(pred))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(0.5 * tf.reduce_sum(tf.pow(sdmask * (sd - pred), 2), axis=[1, 2, 3]))",
                            "Call"
                        ],
                        [
                            "loss + tv_loss * tf.reduce_mean(tf.image.total_variation(pred))",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "[xadv[0][f_i], xadv[1][f_i], xadv[2][f_i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_260": {
                "variable": {
                    "value": "xadv[1][f_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv[1][f_i] - pnp_alpha * tf.sign(grad[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "name": {
                    "value": "'bias{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[0], l[1], l[2]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "sd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "input_tensor": {
                    "value": "tf.pow(z[0] - y[0], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_113": {
                "input": {
                    "value": "z[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_115": {
                "x": {
                    "value": "loss_mask * (d - pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "name": {
                    "value": "'bias{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_157": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[l[0], l[1], l[2]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_203": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_214": {
                "input_tensor": {
                    "value": "m[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_229": {
                "input": {
                    "value": "z_in[n - 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_259": {
                "variable": {
                    "value": "xadv[0][f_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv[0][f_i] - pnp_alpha * tf.sign(grad[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_262": {
                "variable": {
                    "value": "xadv[2][f_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv[2][f_i] - pnp_alpha * grad[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_269": {
                "input_tensor": {
                    "value": "tf.pow(loss_mask * (d - pred), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_27": {
                "stddev": {
                    "value": "np.sqrt(stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_32": {
                "x": {
                    "value": "count(m[i - 1], kern, stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_35": {
                "x": {
                    "value": "count(sdmask, kern, stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sdmask",
                            "Name"
                        ],
                        [
                            "sdmask",
                            "Name"
                        ]
                    ]
                }
            },
            "pow_97": {
                "x": {
                    "value": "z[0] - y[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "input_tensor": {
                    "value": "tf.image.total_variation(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_143": {
                "stddev": {
                    "value": "np.sqrt(stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_148": {
                "x": {
                    "value": "count(m[i - 1], kern, stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_151": {
                "x": {
                    "value": "count(sdmask, kern, stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_218": {
                "input": {
                    "value": "sd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_220": {
                "input_tensor": {
                    "value": "tf.pow(z_in[0] - y_in[0], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_231": {
                "input": {
                    "value": "z_in[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "tf.pow(sdmask * (sd - pred), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_269": {
                "x": {
                    "value": "loss_mask * (d - pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_initializer_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_50": {
                "x": {
                    "value": "b",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "pow_96": {
                "x": {
                    "value": "mask * (sd - cur_pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_99": {
                "input_tensor": {
                    "value": "tf.pow(m[j - 1] * y[j - 1] - m[j - 1] * W(z[j], j, tf.shape(y[j - 1])), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "input_tensor": {
                    "value": "tf.pow(z[j] - y[j], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "total_variation_119": {
                "images": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "W(z[n - 1], n - 1, tf.shape(z[n - 2]))",
                            "Call"
                        ],
                        [
                            "W(pred, i, tf.shape(z[i - 1]))",
                            "Call"
                        ],
                        [
                            "optimization(*xadv)",
                            "Call"
                        ],
                        [
                            "W(z_in[n - 1], n - 1, tf.shape(z_in[n - 2]))",
                            "Call"
                        ],
                        [
                            "W(pred, i, tf.shape(z_in[i - 1]))",
                            "Call"
                        ],
                        [
                            "optimization(*xadv)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_164": {
                "x": {
                    "value": "b",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reduce_sum_219": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sdmask",
                            "Name"
                        ],
                        [
                            "sdmask",
                            "Name"
                        ]
                    ]
                }
            },
            "pow_220": {
                "x": {
                    "value": "z_in[0] - y_in[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_253": {
                "x": {
                    "value": "sdmask * (sd - pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_255": {
                "input_tensor": {
                    "value": "tf.image.total_variation(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_99": {
                "x": {
                    "value": "m[j - 1] * y[j - 1] - m[j - 1] * W(z[j], j, tf.shape(y[j - 1]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_100": {
                "x": {
                    "value": "z[j] - y[j]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_219": {
                "x": {
                    "value": "mask * (sd - cur_pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_222": {
                "input_tensor": {
                    "value": "tf.pow(m[j - 1] * y_in[j - 1] - m[j - 1] * W(z_in[j], j, tf.shape(y_in[j - 1])), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_223": {
                "input_tensor": {
                    "value": "tf.pow(z_in[j] - y_in[j], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "total_variation_255": {
                "images": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "W(z[n - 1], n - 1, tf.shape(z[n - 2]))",
                            "Call"
                        ],
                        [
                            "W(pred, i, tf.shape(z[i - 1]))",
                            "Call"
                        ],
                        [
                            "optimization(*xadv)",
                            "Call"
                        ],
                        [
                            "W(z_in[n - 1], n - 1, tf.shape(z_in[n - 2]))",
                            "Call"
                        ],
                        [
                            "W(pred, i, tf.shape(z_in[i - 1]))",
                            "Call"
                        ],
                        [
                            "optimization(*xadv)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_260": {
                "x": {
                    "value": "grad[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "z[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_171": {
                "input": {
                    "value": "z[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_222": {
                "x": {
                    "value": "m[j - 1] * y_in[j - 1] - m[j - 1] * W(z_in[j], j, tf.shape(y_in[j - 1]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_223": {
                "x": {
                    "value": "z_in[j] - y_in[j]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sign_259": {
                "x": {
                    "value": "grad[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "sd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_168": {
                "input": {
                    "value": "sd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_182": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "y[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_179": {
                "input": {
                    "value": "y[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "y[j - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_222": {
                "input": {
                    "value": "y_in[j - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Super-LiDAR/dataloading.py": {
        "tensorflow": {
            "parse_single_example_34": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "ex_str",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'rgb_bytes': tf.VarLenFeature(tf.string), 'd_bytes': tf.VarLenFeature(tf.string), 'raw_bytes': tf.VarLenFeature(tf.string), 'seq_id': tf.VarLenFeature(tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_35": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['rgb_bytes'], default_value=''), ()), channels=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "ground",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['d_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "ground",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ground",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['d_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ground)",
                            "Call"
                        ],
                        [
                            "ground / 256.0",
                            "BinOp"
                        ],
                        [
                            "ground[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(ground, degree)",
                            "Call"
                        ],
                        [
                            "ground / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : ground, lambda : ground[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices([raw_to_groundtruth_filename(f) for f in raw_images]).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "raw",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_46": {
                "variable": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['raw_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_51": {
                "variable": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['raw_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(raw)",
                            "Call"
                        ],
                        [
                            "raw / 256.0",
                            "BinOp"
                        ],
                        [
                            "raw[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(raw, degree)",
                            "Call"
                        ],
                        [
                            "raw / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : raw, lambda : raw[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(raw_images).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_74": {
                "variable": {
                    "value": "flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform((), 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_79": {
                "variable": {
                    "value": "ground",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "flip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform((), 0, 1), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : ground",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : ground[:, ::-1]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_83": {
                "variable": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "flip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform((), 0, 1), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : raw",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : raw[:, ::-1]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "take_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "take_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_141": {
                "variable": {
                    "value": "filecontents",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_142": {
                "variable": {
                    "value": "png",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.decode_png(filecontents, dtype=tf.uint16, channels=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "variable": {
                    "value": "png",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "png",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(filecontents, dtype=tf.uint16, channels=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(png)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(filecontents, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "read_file_146": {
                "variable": {
                    "value": "filecontents",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_147": {
                "variable": {
                    "value": "png",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "filecontents",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_150": {
                "variable": {
                    "value": "ground",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ground",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['d_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ground)",
                            "Call"
                        ],
                        [
                            "ground / 256.0",
                            "BinOp"
                        ],
                        [
                            "ground[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(ground, degree)",
                            "Call"
                        ],
                        [
                            "ground / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : ground, lambda : ground[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices([raw_to_groundtruth_filename(f) for f in raw_images]).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "raw",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_151": {
                "variable": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['raw_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(raw)",
                            "Call"
                        ],
                        [
                            "raw / 256.0",
                            "BinOp"
                        ],
                        [
                            "raw[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(raw, degree)",
                            "Call"
                        ],
                        [
                            "raw / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : raw, lambda : raw[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(raw_images).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_152": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(ground, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_153": {
                "variable": {
                    "value": "mraw",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(raw, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "variable": {
                    "value": "ground",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ground",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['d_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ground)",
                            "Call"
                        ],
                        [
                            "ground / 256.0",
                            "BinOp"
                        ],
                        [
                            "ground[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(ground, degree)",
                            "Call"
                        ],
                        [
                            "ground / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : ground, lambda : ground[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices([raw_to_groundtruth_filename(f) for f in raw_images]).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "raw",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_176": {
                "variable": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['raw_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(raw)",
                            "Call"
                        ],
                        [
                            "raw / 256.0",
                            "BinOp"
                        ],
                        [
                            "raw[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(raw, degree)",
                            "Call"
                        ],
                        [
                            "raw / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : raw, lambda : raw[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(raw_images).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_177": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(ground, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_178": {
                "variable": {
                    "value": "mraw",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(raw, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_30": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_31": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_32": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_33": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_35": {
                "contents": {
                    "value": "tf.reshape(tf.sparse_tensor_to_dense(features['rgb_bytes'], default_value=''), ())",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "decode_png_40": {
                "contents": {
                    "value": "tf.reshape(tf.sparse_tensor_to_dense(features['d_bytes'], default_value=''), ())",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_46": {
                "contents": {
                    "value": "tf.reshape(tf.sparse_tensor_to_dense(features['raw_bytes'], default_value=''), ())",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(features['rgb_bytes'], default_value='')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(features['d_bytes'], default_value='')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(features['raw_bytes'], default_value='')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TFRecordDataset_89": {
                "filenames": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_90": {
                "x": {
                    "value": "tf.reduce_prod(tf.shape(records))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_142": {
                "contents": {
                    "value": "filecontents",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_152": {
                "x": {
                    "value": "ground",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['d_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ground)",
                            "Call"
                        ],
                        [
                            "ground / 256.0",
                            "BinOp"
                        ],
                        [
                            "ground[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(ground, degree)",
                            "Call"
                        ],
                        [
                            "ground / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : ground, lambda : ground[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices([raw_to_groundtruth_filename(f) for f in raw_images]).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "raw",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_153": {
                "x": {
                    "value": "raw",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['raw_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(raw)",
                            "Call"
                        ],
                        [
                            "raw / 256.0",
                            "BinOp"
                        ],
                        [
                            "raw[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(raw, degree)",
                            "Call"
                        ],
                        [
                            "raw / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : raw, lambda : raw[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(raw_images).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_177": {
                "x": {
                    "value": "ground",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['d_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ground)",
                            "Call"
                        ],
                        [
                            "ground / 256.0",
                            "BinOp"
                        ],
                        [
                            "ground[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(ground, degree)",
                            "Call"
                        ],
                        [
                            "ground / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : ground, lambda : ground[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices([raw_to_groundtruth_filename(f) for f in raw_images]).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "raw",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ground, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_178": {
                "x": {
                    "value": "raw",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.image.decode_png(tf.reshape(tf.sparse_tensor_to_dense(features['raw_bytes'], default_value=''), ()), channels=1, dtype=tf.uint16), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(raw)",
                            "Call"
                        ],
                        [
                            "raw / 256.0",
                            "BinOp"
                        ],
                        [
                            "raw[0:370, 0:1220]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.image.rotate(raw, degree)",
                            "Call"
                        ],
                        [
                            "raw / s",
                            "BinOp"
                        ],
                        [
                            "tf.cond(flip, lambda : raw, lambda : raw[:, ::-1])",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(raw_images).map(parse_depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_prod_90": {
                "input_tensor": {
                    "value": "tf.shape(records)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_90": {
                "input": {
                    "value": "records",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tf_record_iterator_125": {
                "path": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_95": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Super-LiDAR/deep_cnn.py": {
        "tensorflow": {
            "constant_93": {
                "variable": {
                    "value": "filt_tens",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "filt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([2, 2, xshape[-1], xshape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_94": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpool(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 5, out_depth, 1, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='relu1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, out_depth, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "relu(x + shortcut, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(x, 1, nOutput, stride, name='conv', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, stride, name='conv1', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='reul1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, 1, name='conv2', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "x + cut",
                            "BinOp"
                        ],
                        [
                            "relu(x, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(d1, 7, 16, 2, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x, 3, 2)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, block_filters[-1] / 2, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "basicblock(x, filters, stride if i == 0 else 1, is_training, name='basicblock{}'.format(i + 1), use_batchnorm=use_batchnorm, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "upproj(x, out_channel, is_training, use_batchnorm=use_batchnorm)",
                            "Call"
                        ],
                        [
                            "conv(x, 3, d2.get_shape().as_list()[-1], 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filt_tens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(filt, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf.stack([batch_size, 2 * xshape[1], 2 * xshape[2], xshape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kern_sz, kern_sz, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(sigsq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpool(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 5, out_depth, 1, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='relu1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, out_depth, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "relu(x + shortcut, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(x, 1, nOutput, stride, name='conv', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, stride, name='conv1', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='reul1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, 1, name='conv2', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "x + cut",
                            "BinOp"
                        ],
                        [
                            "relu(x, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(d1, 7, 16, 2, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x, 3, 2)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, block_filters[-1] / 2, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "basicblock(x, filters, stride if i == 0 else 1, is_training, name='basicblock{}'.format(i + 1), use_batchnorm=use_batchnorm, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "upproj(x, out_channel, is_training, use_batchnorm=use_batchnorm)",
                            "Call"
                        ],
                        [
                            "conv(x, 3, d2.get_shape().as_list()[-1], 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [kern_sz, kern_sz, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(sigsq)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_99": {
                "input": {
                    "value": "tf.pad(x, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kern, kern, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_6": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpool(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 5, out_depth, 1, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='relu1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, out_depth, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "relu(x + shortcut, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(x, 1, nOutput, stride, name='conv', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, stride, name='conv1', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='reul1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, 1, name='conv2', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "x + cut",
                            "BinOp"
                        ],
                        [
                            "relu(x, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(d1, 7, 16, 2, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x, 3, 2)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, block_filters[-1] / 2, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "basicblock(x, filters, stride if i == 0 else 1, is_training, name='basicblock{}'.format(i + 1), use_batchnorm=use_batchnorm, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "upproj(x, out_channel, is_training, use_batchnorm=use_batchnorm)",
                            "Call"
                        ],
                        [
                            "conv(x, 3, d2.get_shape().as_list()[-1], 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x * leakness",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'upproj'",
                            "MethodArgument"
                        ],
                        [
                            "'shortcut'",
                            "MethodArgument"
                        ],
                        [
                            "'basicblock'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_8": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpool(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 5, out_depth, 1, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='relu1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, out_depth, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "relu(x + shortcut, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(x, 1, nOutput, stride, name='conv', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, stride, name='conv1', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='reul1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, 1, name='conv2', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "x + cut",
                            "BinOp"
                        ],
                        [
                            "relu(x, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(d1, 7, 16, 2, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x, 3, 2)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, block_filters[-1] / 2, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "basicblock(x, filters, stride if i == 0 else 1, is_training, name='basicblock{}'.format(i + 1), use_batchnorm=use_batchnorm, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "upproj(x, out_channel, is_training, use_batchnorm=use_batchnorm)",
                            "Call"
                        ],
                        [
                            "conv(x, 3, d2.get_shape().as_list()[-1], 1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'upproj'",
                            "MethodArgument"
                        ],
                        [
                            "'shortcut'",
                            "MethodArgument"
                        ],
                        [
                            "'basicblock'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'upproj'",
                            "MethodArgument"
                        ],
                        [
                            "'shortcut'",
                            "MethodArgument"
                        ],
                        [
                            "'basicblock'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_12": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpool(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 5, out_depth, 1, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='relu1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, out_depth, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "relu(x + shortcut, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(x, 1, nOutput, stride, name='conv', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, stride, name='conv1', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='reul1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, 1, name='conv2', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "x + cut",
                            "BinOp"
                        ],
                        [
                            "relu(x, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(d1, 7, 16, 2, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x, 3, 2)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, block_filters[-1] / 2, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "basicblock(x, filters, stride if i == 0 else 1, is_training, name='basicblock{}'.format(i + 1), use_batchnorm=use_batchnorm, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "upproj(x, out_channel, is_training, use_batchnorm=use_batchnorm)",
                            "Call"
                        ],
                        [
                            "conv(x, 3, d2.get_shape().as_list()[-1], 1)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "center": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'upproj'",
                            "MethodArgument"
                        ],
                        [
                            "'shortcut'",
                            "MethodArgument"
                        ],
                        [
                            "'basicblock'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'upproj'",
                            "MethodArgument"
                        ],
                        [
                            "'shortcut'",
                            "MethodArgument"
                        ],
                        [
                            "'basicblock'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'upproj'",
                            "MethodArgument"
                        ],
                        [
                            "'shortcut'",
                            "MethodArgument"
                        ],
                        [
                            "'basicblock'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_88": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpool(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 5, out_depth, 1, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='relu1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, out_depth, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "relu(x + shortcut, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(x, 1, nOutput, stride, name='conv', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, stride, name='conv1', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='reul1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, 1, name='conv2', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "x + cut",
                            "BinOp"
                        ],
                        [
                            "relu(x, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(d1, 7, 16, 2, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x, 3, 2)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, block_filters[-1] / 2, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "basicblock(x, filters, stride if i == 0 else 1, is_training, name='basicblock{}'.format(i + 1), use_batchnorm=use_batchnorm, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "upproj(x, out_channel, is_training, use_batchnorm=use_batchnorm)",
                            "Call"
                        ],
                        [
                            "conv(x, 3, d2.get_shape().as_list()[-1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_94": {
                "values": {
                    "value": "[batch_size, 2 * xshape[1], 2 * xshape[2], xshape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_99": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpool(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 5, out_depth, 1, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='relu1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, out_depth, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "relu(x + shortcut, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(x, 1, nOutput, stride, name='conv', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, stride, name='conv1', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='reul1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, 1, name='conv2', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "x + cut",
                            "BinOp"
                        ],
                        [
                            "relu(x, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(d1, 7, 16, 2, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x, 3, 2)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, block_filters[-1] / 2, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "basicblock(x, filters, stride if i == 0 else 1, is_training, name='basicblock{}'.format(i + 1), use_batchnorm=use_batchnorm, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "upproj(x, out_channel, is_training, use_batchnorm=use_batchnorm)",
                            "Call"
                        ],
                        [
                            "conv(x, 3, d2.get_shape().as_list()[-1], 1)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "block0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "bridge",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "final",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_143": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'kernel']",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.pow(m2 * (preds - d2), 2), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpool(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 5, out_depth, 1, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='relu1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, out_depth, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "relu(x + shortcut, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(x, 1, nOutput, stride, name='conv', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, stride, name='conv1', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn1')",
                            "Call"
                        ],
                        [
                            "relu(x, name='reul1')",
                            "Call"
                        ],
                        [
                            "conv(x, 3, n, 1, name='conv2', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training, name='bn2')",
                            "Call"
                        ],
                        [
                            "x + cut",
                            "BinOp"
                        ],
                        [
                            "relu(x, name='relu2')",
                            "Call"
                        ],
                        [
                            "conv(d1, 7, 16, 2, name='conv1', use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "maxpool(x, 3, 2)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, block_filters[-1] / 2, 1, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "basicblock(x, filters, stride if i == 0 else 1, is_training, name='basicblock{}'.format(i + 1), use_batchnorm=use_batchnorm, use_bias=not use_batchnorm)",
                            "Call"
                        ],
                        [
                            "bn(x, is_training)",
                            "Call"
                        ],
                        [
                            "upproj(x, out_channel, is_training, use_batchnorm=use_batchnorm)",
                            "Call"
                        ],
                        [
                            "conv(x, 3, d2.get_shape().as_list()[-1], 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [kern_sz, kern_sz, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(sigsq)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'upproj'",
                            "MethodArgument"
                        ],
                        [
                            "'shortcut'",
                            "MethodArgument"
                        ],
                        [
                            "'basicblock'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "'block{}'.format(blockno)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "'upproj{}'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "tf.pow(m2 * (preds - d2), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_22": {
                "stddev": {
                    "value": "np.sqrt(sigsq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_143": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_145": {
                "x": {
                    "value": "m2 * (preds - d2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Super-LiDAR/kitti_depth_to_tfrecord.py": {
        "tensorflow": {
            "encode_png_90": {
                "variable": {
                    "value": "rgb_png",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.cast(rgb, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "encode_png_91": {
                "variable": {
                    "value": "d_png",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.cast(d, dtype=tf.uint16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "encode_png_92": {
                "variable": {
                    "value": "raw_png",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.cast(raw, dtype=tf.uint16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_96": {
                "variable": {
                    "value": "ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'rgb_bytes': tf.train.Feature(bytes_list=tf.train.BytesList(value=[rgb_bytes])), 'd_bytes': tf.train.Feature(bytes_list=tf.train.BytesList(value=[d_bytes])), 'raw_bytes': tf.train.Feature(bytes_list=tf.train.BytesList(value=[raw_bytes])), 'seq_id': tf.train.Feature(bytes_list=tf.train.BytesList(value=[seq_id.encode()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_138": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_157": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_174": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_176": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "take_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_90": {
                "x": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_140": {
                "config": {
                    "value": "config",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_159": {
                "config": {
                    "value": "config",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_193": {
                "path": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, '{}.tfrecords'.format(get_date_and_drive(shard[0])))",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_96": {
                "feature": {
                    "value": "{'rgb_bytes': tf.train.Feature(bytes_list=tf.train.BytesList(value=[rgb_bytes])), 'd_bytes': tf.train.Feature(bytes_list=tf.train.BytesList(value=[d_bytes])), 'raw_bytes': tf.train.Feature(bytes_list=tf.train.BytesList(value=[raw_bytes])), 'seq_id': tf.train.Feature(bytes_list=tf.train.BytesList(value=[seq_id.encode()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "TFRecordWriter_120": {
                "path": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, '{}.tfrecords'.format(get_date_and_drive(shard[0])))",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordDataset_181": {
                "filenames": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "py_func_111": {
                "func": {
                    "value": "lambda x: read_images(x, depth_selection)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.int32, tf.int32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Feature_97": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[rgb_bytes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_98": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[d_bytes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_99": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[raw_bytes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_100": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[seq_id.encode()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_183": {
                "x": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "range(num_examples)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BytesList_97": {
                "value": {
                    "value": "[rgb_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_98": {
                "value": {
                    "value": "[d_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_99": {
                "value": {
                    "value": "[raw_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_100": {
                "value": {
                    "value": "[seq_id.encode()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Super-LiDAR/losses.py": {
        "tensorflow": {
            "greater_5": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tars)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_6": {
                "variable": {
                    "value": "residuals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tars - preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_7": {
                "variable": {
                    "value": "mae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(residuals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_11": {
                "variable": {
                    "value": "residuals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tars - preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.greater(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_12": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(residuals, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_16": {
                "variable": {
                    "value": "residuals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tars - preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.greater(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_17": {
                "variable": {
                    "value": "mae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(residuals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "variable": {
                    "value": "errors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow((tars - preds) * mask, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_26": {
                "variable": {
                    "value": "residuals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tars - preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.greater(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_27": {
                "variable": {
                    "value": "tars_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tars",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.greater(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_41": {
                "variable": {
                    "value": "preds_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.greater(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_42": {
                "variable": {
                    "value": "tars_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tars",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.greater(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_43": {
                "variable": {
                    "value": "rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds_masked / tars_masked",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tars_masked / (preds_masked + 0.001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "variable": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_56": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.abs(tars), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.abs(tars), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "tf.sqrt(errors / counts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "input_tensor": {
                    "value": "tf.abs(residuals / (tars_masked + 1e-06))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "tf.pow((spreds - tars) * mask, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_5": {
                "x": {
                    "value": "tars",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_7": {
                "x": {
                    "value": "residuals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tars - preds, mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_11": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_12": {
                "x": {
                    "value": "residuals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tars - preds, mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_16": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_17": {
                "x": {
                    "value": "residuals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tars - preds, mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tars - preds, tf.greater(mask, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_22": {
                "x": {
                    "value": "(tars - preds) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_23": {
                "x": {
                    "value": "errors / counts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_26": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_27": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_28": {
                "x": {
                    "value": "residuals / (tars_masked + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_32": {
                "input": {
                    "value": "given",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images[:, :, :, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_36": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'kernel']",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "greater_41": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_42": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.greater(tf.abs(tars), 0)",
                            "Call"
                        ],
                        [
                            "np.abs(tars_arr) > 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.abs(tars), 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "input_tensor": {
                    "value": "tf.cast(tf.less(rel, thresh ** i), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_56": {
                "x": {
                    "value": "tf.abs(tars)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "preds * tars",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "preds * preds * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_61": {
                "x": {
                    "value": "tf.abs(tars)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_63": {
                "x": {
                    "value": "(spreds - tars) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_46": {
                "x": {
                    "value": "tf.less(rel, thresh ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_56": {
                "x": {
                    "value": "tars",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_61": {
                "x": {
                    "value": "tars",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_loss_36": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "less_46": {
                "x": {
                    "value": "rel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.maximum(preds_masked / tars_masked, tars_masked / (preds_masked + 0.001))",
                            "Call"
                        ],
                        [
                            "np.maximum(preds_arr[mask] / tars_arr[mask], tars_arr[mask] / preds_arr[mask])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "thresh ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Super-LiDAR/main.py": {
        "tensorflow": {
            "Bernoulli_20": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "tf.fill(tf.shape(x)[0:2], prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_22": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.distributions.Bernoulli(probs=tf.fill(tf.shape(x)[0:2], prob), dtype=tf.bool).sample()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, x.get_shape()[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.logical_and(mask, tf.greater(m, 0)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_23": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.distributions.Bernoulli(probs=tf.fill(tf.shape(x)[0:2], prob), dtype=tf.bool).sample()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, x.get_shape()[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.logical_and(mask, tf.greater(m, 0)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, x.get_shape()[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_24": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(mask, tf.greater(m, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_101": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_133": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_142": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "nepochs + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_24": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.distributions.Bernoulli(probs=tf.fill(tf.shape(x)[0:2], prob), dtype=tf.bool).sample()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, x.get_shape()[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.logical_and(mask, tf.greater(m, 0)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.greater(m, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_104": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_138": {
                "variable": {
                    "value": "extra_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_24": {
                "x": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_139": {
                "control_inputs": {
                    "value": "extra_train_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_20": {
                "dims": {
                    "value": "tf.shape(x)[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Super-LiDAR/main_pnp.py": {
        "tensorflow": {
            "Bernoulli_20": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "tf.fill(tf.shape(x)[0:2], prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_22": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.distributions.Bernoulli(probs=tf.fill(tf.shape(x)[0:2], prob), dtype=tf.bool).sample()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, x.get_shape()[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.logical_and(mask, tf.greater(m, 0)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_23": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.distributions.Bernoulli(probs=tf.fill(tf.shape(x)[0:2], prob), dtype=tf.bool).sample()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, x.get_shape()[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.logical_and(mask, tf.greater(m, 0)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, x.get_shape()[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_24": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(mask, tf.greater(m, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_101": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_133": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_142": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "nepochs + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_24": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.distributions.Bernoulli(probs=tf.fill(tf.shape(x)[0:2], prob), dtype=tf.bool).sample()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, x.get_shape()[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.logical_and(mask, tf.greater(m, 0)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.greater(m, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_104": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_138": {
                "variable": {
                    "value": "extra_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_24": {
                "x": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_139": {
                "control_inputs": {
                    "value": "extra_train_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_20": {
                "dims": {
                    "value": "tf.shape(x)[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Super-LiDAR/sparse_cnn.py": {
        "tensorflow": {
            "reduce_mean_74": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.pow(m2 * (preds - d2), 2), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "while_loop_113": {
                "variable": {
                    "value": "(xadv, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(xadv, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "fast_gradient",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "final_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.pow(m2 * (preds - d1), 2), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_5": {
                "input": {
                    "value": "tf.pad(x, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kern, kern, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kern, kern, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(sigsq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_28": {
                "variable": {
                    "value": "sum_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kern, kern, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.pad(m, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "sum_kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones(shape=[kern, kern, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kern_sz, kern_sz, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(sigsq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(tf.pad(x * m, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]), kernel, [1, stride, stride, 1], 'VALID') / (norm + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "x + bias",
                            "BinOp"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [kern, kern, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(sigsq)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [kern_sz, kern_sz, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(sigsq)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(m1 * tf.abs(pred_in - d1), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_108": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reduce_sum(tf.pow(m2 * (preds - d2), 2), axis=[1, 2, 3]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_sum(m1 * tf.abs(pred_in - d1), axis=[1, 2, 3]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xadv_m[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_109": {
                "variable": {
                    "value": "xadv_m[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv_m[0] - pnp_alpha * tf.sign(grad[0]) * xadv_m[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_5": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(tf.pad(x * m, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]), kernel, [1, stride, stride, 1], 'VALID') / (norm + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "x + bias",
                            "BinOp"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_11": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(tf.pad(x * m, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]), kernel, [1, stride, stride, 1], 'VALID') / (norm + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "x + bias",
                            "BinOp"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x * leakness",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'sp_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_13": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(tf.pad(x * m, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]), kernel, [1, stride, stride, 1], 'VALID') / (norm + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "x + bias",
                            "BinOp"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'sp_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'sp_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'sp_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "input_tensor": {
                    "value": "tf.pow(m2 * (preds - d2), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_103": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "pnp_iters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.pow(m2 * (preds - d1), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_29": {
                "tensor": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "maxpool(m, kern, stride)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "input": {
                    "value": "tf.pad(x * m, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [kern, kern, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(sigsq)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [kern_sz, kern_sz, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(sigsq)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(tf.pad(x * m, [[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]), kernel, [1, stride, stride, 1], 'VALID') / (norm + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "x + bias",
                            "BinOp"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [kern, kern, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(sigsq)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [kern_sz, kern_sz, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(sigsq)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_74": {
                "x": {
                    "value": "m2 * (preds - d2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "m1 * tf.abs(pred_in - d1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_115": {
                "x": {
                    "value": "m2 * (preds - d1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_23": {
                "stddev": {
                    "value": "np.sqrt(sigsq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_32": {
                "tensor": {
                    "value": "x * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [kern // 2, kern // 2], [kern // 2, kern // 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_46": {
                "stddev": {
                    "value": "np.sqrt(sigsq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_107": {
                "x": {
                    "value": "pred_in - d1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_109": {
                "x": {
                    "value": "grad[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sparse-to-dense.pytorch/criteria.py": {
        "torch": {}
    },
    "sparse-to-dense.pytorch/dataloaders/dataloader.py": {
        "torch": {}
    },
    "sparse-to-dense.pytorch/dataloaders/transforms.py": {
        "torch": {
            "is_tensor_32": {
                "obj": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enhancer.enhance(brightness_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(contrast_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(saturation_factor)",
                            "Call"
                        ],
                        [
                            "Image.merge('HSV', (h, s, v)).convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img.convert('RGB')",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np_img, 'RGB').convert(input_mode)",
                            "Call"
                        ],
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img.transpose((2, 0, 1)).copy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img.copy())",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose((2, 0, 1)).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sparse-to-dense.pytorch/main.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NYUDataset(valdir, type='val', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ],
                        [
                            "KITTIDataset(valdir, type='val', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NYUDataset(traindir, type='train', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ],
                        [
                            "KITTIDataset(traindir, type='train', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda work_id: np.random.seed(work_id)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.evaluate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sparse-to-dense.pytorch/main_pnp.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NYUDataset(valdir, type='val', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ],
                        [
                            "KITTIDataset(valdir, type='val', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NYUDataset(traindir, type='train', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ],
                        [
                            "KITTIDataset(traindir, type='train', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda work_id: np.random.seed(work_id)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.evaluate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_264": {
                "input": {
                    "value": "pnp_z_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Grad([pnp_loss], [pnp_z], create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sparse-to-dense.pytorch/metrics.py": {
        "torch": {
            "max_44": {
                "variable": {
                    "value": "maxRatio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output / target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_7": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_38": {
                "input": {
                    "value": "abs_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(output - target).abs()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_54": {
                "input": {
                    "value": "abs_inv_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(inv_output - inv_target).abs()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sparse-to-dense.pytorch/models.py": {
        "torch": {
            "Sequential_87": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict([('unpool', Unpool(in_channels)), ('conv', nn.Conv2d(in_channels, in_channels // 2, kernel_size=5, stride=1, padding=2, bias=False)), ('batchnorm', nn.BatchNorm2d(in_channels // 2)), ('relu', nn.ReLU())])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "2048",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels // 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_198": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv_transpose2d_21": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.upper_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict([('conv1', nn.Conv2d(in_channels, out_channels, kernel_size=5, stride=1, padding=2, bias=False)), ('batchnorm1', nn.BatchNorm2d(out_channels)), ('relu', nn.ReLU()), ('conv2', nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)), ('batchnorm2', nn.BatchNorm2d(out_channels))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.bottom_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict([('conv', nn.Conv2d(in_channels, out_channels, kernel_size=5, stride=1, padding=2, bias=False)), ('batchnorm', nn.BatchNorm2d(out_channels))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "num_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "2048",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "collections.OrderedDict([(module_name, nn.ConvTranspose2d(in_channels, in_channels // 2, kernel_size, stride, padding, output_padding, bias=False)), ('batchnorm', nn.BatchNorm2d(in_channels // 2)), ('relu', nn.ReLU(inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(decoder[6])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel_size % 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sparse-to-dense.pytorch/utils.py": {
        "torch": {
            "save_71": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_directory, 'checkpoint-' + str(epoch) + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}