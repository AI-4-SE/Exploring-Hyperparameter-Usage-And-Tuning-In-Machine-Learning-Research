{
    "dataloader.py": {
        "torch": {
            "load_38": {
                "variable": {
                    "value": "self.feat_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "db_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_323": {
                "dataset": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetSampler(self.dataloader.split_ix[self.split][self.dataloader.iterators[self.split]:])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaderraw.py": {
        "torch": {
            "from_numpy_110": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose([2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "./data/imagenet_weights/ + self.cnn_model + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "load_56": {
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "eval_ensemble.py": {
        "torch": {
            "load_69": {
                "f": {
                    "value": "model_paths[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "eval_utils.py": {
        "torch": {
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "ndarray": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "misc/loss_wrapper.py": {
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_self_critical_reward(greedy_res, gts, gen_result, self.opt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(reward).float().to(gen_result.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "misc/resnet.py": {
        "torch": {
            "MaxPool2d_9": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "misc/resnet_utils.py": {
        "torch": {
            "adaptive_avg_pool2d_24": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer4(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "[att_size, att_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_24": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "misc/rewards.py": {
        "torch": {}
    },
    "misc/utils.py": {
        "torch": {
            "KLDivLoss_118": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_236": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'min'",
                            "MethodArgument"
                        ]
                    ]
                },
                "factor": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "patience": {
                    "value": "patience",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "verbose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold_mode": {
                    "value": "threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "cooldown": {
                    "value": "threshold_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'rel'",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_lr": {
                    "value": "cooldown",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "min_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_161": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "opt.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.optim_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_280": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "to_contiguous(torch.cat([mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]], 1)).view(-1)",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "to_contiguous(mask).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_110": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "to_contiguous(torch.cat([mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]], 1)).view(-1)",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "to_contiguous(mask).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adagrad_163": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_165": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "[mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_167": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_169": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_171": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.optim_alpha, opt.optim_beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.optim_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/AttEnsemble.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.softmax(m.logit(output[i]), dim=1) for (i, m) in enumerate(self.models)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_69": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_69": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_69": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_69": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights or [1.0] * len(self.models)",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_69": {
                "input": {
                    "value": "m.logit(output[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/AttModel.py": {
        "torch": {
            "sort_33": {
                "variable": {
                    "value": "(sorted_lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_34": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sorted_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_36": {
                "variable": {
                    "value": "inv_ix[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_40": {
                "variable": {
                    "value": "(tmp, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(self.vocab_size + 1, self.input_encoding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.fc_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.fc_feat_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.att_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*((nn.BatchNorm1d(self.att_feat_size),) if self.use_bn else ()) + (nn.Linear(self.att_feat_size, self.rnn_size), nn.ReLU(), nn.Dropout(self.drop_prob_lm)) + ((nn.BatchNorm1d(self.rnn_size),) if self.use_bn == 2 else ())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_159": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.w2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(4 + (use_maxout == True)) * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.v2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(4 + (use_maxout == True)) * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.rnn_size, (4 + (use_maxout == True)) * self.rnn_size) for _ in range(self.num_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_297": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.rnn_size, (4 + (use_maxout == True)) * self.rnn_size) for _ in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "variable": {
                    "value": "self.r_h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_359": {
                "variable": {
                    "value": "top_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(top_h, self.drop_prob_lm, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_360": {
                "variable": {
                    "value": "fake_region",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_region",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(fake_region, self.drop_prob_lm, self.training)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(n5) * tanh_nex_c",
                            "BinOp"
                        ],
                        [
                            "self.fr_linear(fake_region)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_376": {
                "variable": {
                    "value": "self.fr_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.rnn_size, self.input_encoding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_380": {
                "variable": {
                    "value": "self.fr_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_383": {
                "variable": {
                    "value": "self.ho_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.rnn_size, self.input_encoding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_387": {
                "variable": {
                    "value": "self.ho_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_389": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_390": {
                "variable": {
                    "value": "self.att2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "img_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_region.view(-1, 1, self.input_encoding_size), conv_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "img_all_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_region_embed.view(-1, 1, self.input_encoding_size), conv_feat_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_411": {
                "variable": {
                    "value": "hA",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_all_embed + txt_replicate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_412": {
                "variable": {
                    "value": "hA",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hA",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(img_all_embed + txt_replicate)",
                            "Call"
                        ],
                        [
                            "F.dropout(hA, self.drop_prob_lm, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_415": {
                "variable": {
                    "value": "PI",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hAflat.view(-1, att_size + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_422": {
                "variable": {
                    "value": "visAtt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "PI.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "img_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([fake_region.view(-1, 1, self.input_encoding_size), conv_feat], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_427": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att2h(atten_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_428": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.att2h(atten_out))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_prob_lm, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_447": {
                "variable": {
                    "value": "self.att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.input_encoding_size + opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_448": {
                "variable": {
                    "value": "self.lang_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_453": {
                "variable": {
                    "value": "att_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_h, fc_feats, xt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "lang_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att, h_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_464": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_495": {
                "variable": {
                    "value": "self.emb2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_525": {
                "variable": {
                    "value": "self.emb2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_528": {
                "variable": {
                    "value": "self.fusion1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size * 2, opt.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_532": {
                "variable": {
                    "value": "self.fusion2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size * 3, opt.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_552": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_553": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_563": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_568": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_573": {
                "variable": {
                    "value": "att_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "att_feats_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att_feats.view(-1, att_size, att_feats.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_573": {
                "variable": {
                    "value": "att_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_590": {
                "variable": {
                    "value": "self.a2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_591": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_592": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_593": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_602": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_609": {
                "variable": {
                    "value": "in_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_transform.narrow(1, 0, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_623": {
                "variable": {
                    "value": "self.a2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_642": {
                "variable": {
                    "value": "self.a2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_644": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_645": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_654": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_660": {
                "variable": {
                    "value": "in_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_transform.narrow(1, 0, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_717": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_720": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_734": {
                "variable": {
                    "value": "self.fc_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_735": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_778": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reduce(lambda x, y: x + y, self.logit) + [nn.Linear(self.rnn_size, self.vocab_size + 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "variable": {
                    "value": "self.r_w2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "variable": {
                    "value": "self.r_v2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_304": {
                "variable": {
                    "value": "self.r_i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_328": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_344": {
                "variable": {
                    "value": "tanh_nex_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "forget_gate * prev_c + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PackedSequence_47": {
                "data": {
                    "value": "module(packed[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "packed[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_69": {
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logprobs.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_322": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xt",
                            "Name"
                        ],
                        [
                            "hs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, self.drop_prob_lm, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_335": {
                "variable": {
                    "value": "in_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_input_sums.narrow(1, 3 * self.rnn_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_338": {
                "variable": {
                    "value": "in_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_transform.narrow(1, 0, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_362": {
                "tensors": {
                    "value": "[_.unsqueeze(0) for _ in hs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_363": {
                "tensors": {
                    "value": "[_.unsqueeze(0) for _ in cs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_377": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_379": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_384": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_386": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_465": {
                "tensors": {
                    "value": "[c_att, c_lang]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_499": {
                "tensors": {
                    "value": "[xt, fc_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_501": {
                "tensors": {
                    "value": "[h_0, att_res_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_503": {
                "tensors": {
                    "value": "[h_1, att_res_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_528": {
                "in_features": {
                    "value": "opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_530": {
                "p": {
                    "value": "opt.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_532": {
                "in_features": {
                    "value": "opt.rnn_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_533": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_534": {
                "p": {
                    "value": "opt.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_538": {
                "tensors": {
                    "value": "[xt, fc_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_540": {
                "tensors": {
                    "value": "[h_0, att_res_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_542": {
                "tensors": {
                    "value": "[h_0, h_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_613": {
                "input": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "forget_gate * prev_c + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_664": {
                "input": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "forget_gate * prev_c + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_141": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[:, i - 1].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(4 + (use_maxout == True)) * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(4 + (use_maxout == True)) * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_419": {
                "tensors": {
                    "value": "[att_masks[:, :1], att_masks]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_505": {
                "tensors": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_544": {
                "tensors": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_352": {
                "input": {
                    "value": "n5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i2h + self.r_h2h(prev_h)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multinomial_142": {
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[:, i - 1].detach())",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_142": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "prev_bad.astype('uint8')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "num_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "num_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/CaptionModel.py": {
        "torch": {
            "sort_62": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logprobs_table[divm].data.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "bdash",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "beam_size // group_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_203": {
                "variable": {
                    "value": "(_, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_225": {
                "variable": {
                    "value": "it",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logprobs.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_182": {
                "variable": {
                    "value": "logprobs_table[divm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs_table[divm] / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_197": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_201": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_211": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logprobs / temperature",
                            "BinOp"
                        ],
                        [
                            "tmp",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_212": {
                "variable": {
                    "value": "(sorted_probs, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logprobs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones_like(mask[:, :1]), mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_221": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logprobs / temperature",
                            "BinOp"
                        ],
                        [
                            "tmp",
                            "Name"
                        ]
                    ]
                }
            },
            "topk_222": {
                "variable": {
                    "value": "(topk, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logprobs / temperature",
                            "BinOp"
                        ],
                        [
                            "tmp",
                            "Name"
                        ]
                    ]
                },
                "k": {
                    "value": "the_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(top_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_198": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "ndarray": {
                    "value": "np.isin(beam_seq_table[divm][t - divm - 1].cpu().numpy(), self.bad_endings_ix).astype('uint8')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_215": {
                "input": {
                    "value": "mask[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/FCModel.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_29": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_34": {
                "variable": {
                    "value": "in_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_input_sums.narrow(1, 3 * self.rnn_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.img_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_60": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_118": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_108": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_170": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_38": {
                "input": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_142": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_176": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_184": {
                "variable": {
                    "value": "it",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_180": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_183": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_98": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_99": {
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_99": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_183": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/OldModel.py": {
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_layers * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_93": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "att_h + att",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_224": {
                "variable": {
                    "value": "att_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "att_feats_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att_feats.view(-1, att_size, self.att_feat_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "att_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_83": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 10)",
                            "Call"
                        ],
                        [
                            "opt.get('beam_size', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_174": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_211": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "att_h + att",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_123": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seqLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "[xt, att_res]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_226": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "[xt, fc_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_243": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_72": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_147": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_155": {
                "variable": {
                    "value": "it",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_151": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_154": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_73": {
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_73": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_154": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/ShowTellModel.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.img_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_88": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output.squeeze(0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_78": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output.squeeze(0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_140": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output.squeeze(0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output.squeeze(0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_146": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_154": {
                "variable": {
                    "value": "it",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_150": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_153": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_68": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_69": {
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_69": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_153": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/TransformerModel.py": {
        "torch": {
            "softmax_259": {
                "variable": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "pretrained_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_face_model/checkpoint_epoch0.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_45": {
                "variable": {
                    "value": "buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "normp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "buffer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(input, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(buffer, 1).add_(1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_48": {
                "variable": {
                    "value": "_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm.view(-1, 1).expand_as(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64 * 64",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_147": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_189": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_275": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_304": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_305": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_306": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_315": {
                "variable": {
                    "value": "self.lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_327": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_331": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_331": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_332": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, input_encoding_size, 2).float() * -(math.log(10000.0) / input_encoding_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_334": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_335": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_375": {
                "variable": {
                    "value": "self.att_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*((nn.BatchNorm1d(self.att_feat_size),) if self.use_bn else ()) + (nn.Linear(self.att_feat_size, self.input_encoding_size), nn.ReLU(), nn.Dropout(self.drop_prob_lm)) + ((nn.BatchNorm1d(self.input_encoding_size),) if self.use_bn == 2 else ())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_118": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.model.fc(x)",
                            "Call"
                        ],
                        [
                            "self.add_face_model(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch * time, x.shape[2])",
                            "Call"
                        ],
                        [
                            "x.view(batch * time, 1, x.shape[1])",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch * time, 1, 64, 64)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x, x), 1)",
                            "Call"
                        ],
                        [
                            "self.face_net(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, time, self.vocab)",
                            "Call"
                        ],
                        [
                            "layer(x, mask)",
                            "Call"
                        ],
                        [
                            "self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask))",
                            "Call"
                        ],
                        [
                            "layer(x, memory, src_mask, tgt_mask)",
                            "Call"
                        ],
                        [
                            "self.sublayer[0](x, lambda x: self.self_attn(x, x, x, tgt_mask))",
                            "Call"
                        ],
                        [
                            "self.sublayer[1](x, lambda x: self.src_attn(x, m, m, src_mask))",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "x + self.pe[:, :x.size(1)]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_255": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "input": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0][0], it.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "in_features": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_358": {
                "*args": {
                    "value": "Embeddings(input_encoding_size, tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_309": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_332": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "input_encoding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_377": {
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_379": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_380": {
                "num_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_376": {
                "num_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/__init__.py": {
        "torch": {
            "load_62": {
                "f": {
                    "value": "os.path.join(opt.start_from, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/build_bpe_subword_nmt.py": {
        "torch": {}
    },
    "scripts/dump_to_lmdb.py": {
        "torch": {}
    },
    "scripts/prepro_feats.py": {
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "I.transpose([2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "os.path.join(params['model_root'], params['model'] + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/prepro_labels.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "DataParallel_86": {
                "variable": {
                    "value": "dp_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.setup(opt).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "dp_lw_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "lw_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LossWrapper(model, opt)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_115": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model%s.pth' % append)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_118": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'optimizer%s.pth' % append)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_105": {
                "f": {
                    "value": "os.path.join(opt.start_from, 'optimizer.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_165": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(data['gts'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}