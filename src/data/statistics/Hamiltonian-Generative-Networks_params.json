{
    "environments/datasets.py": {
        "torch": {
            "DataLoader_124": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainDS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "EnvironmentSampler(environment=pd, dataset_len=100, number_of_frames=100, delta_time=0.1, number_of_rollouts=4, img_size=64, noise_level=0.0, radius_bound=(1.3, 2.3), seed=23)",
                            "Call"
                        ],
                        [
                            "EnvironmentLoader('../datasets/pendulum_data/train')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainDS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "EnvironmentSampler(environment=pd, dataset_len=100, number_of_frames=100, delta_time=0.1, number_of_rollouts=4, img_size=64, noise_level=0.0, radius_bound=(1.3, 2.3), seed=23)",
                            "Call"
                        ],
                        [
                            "EnvironmentLoader('../datasets/pendulum_data/train')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainDS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "EnvironmentSampler(environment=pd, dataset_len=100, number_of_frames=100, delta_time=0.1, number_of_rollouts=4, img_size=64, noise_level=0.0, radius_bound=(1.3, 2.3), seed=23)",
                            "Call"
                        ],
                        [
                            "EnvironmentLoader('../datasets/pendulum_data/train')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "rolls",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rolls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.environment.sample_random_rollouts(number_of_frames=self.number_of_frames, delta_time=self.delta_time, number_of_rollouts=self.number_of_rollouts, img_size=self.img_size, color=self.color, noise_level=self.noise_level, radius_bound=self.radius_bound, seed=self.seed)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rolls).type(self.dtype)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(self.root_dir, self.file_list[i]))['arr_0']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "hamiltonian_generative_network.py": {
        "torch": {
            "load_118": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(directory, self.ENCODER_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(directory, self.TRANSFORMER_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "self.hnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(directory, self.HAMILTONIAN_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(directory, self.DECODER_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_168": {
                "variable": {
                    "value": "latent_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, self.encoder.out_mean.out_channels, img_shape[0], img_shape[1])",
                            "Tuple"
                        ]
                    ]
                }
            },
            "save_138": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(directory, self.ENCODER_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(directory, self.TRANSFORMER_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "self.hnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(directory, self.HAMILTONIAN_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(directory, self.DECODER_FILENAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks/debug_networks.py": {
        "torch": {
            "stack_47": {
                "variable": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "torch.tensor([1.0, 2.0], requires_grad=True, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "input": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack((q, p), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((q, p), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack((q, p), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((q, p), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_62": {
                "data": {
                    "value": "torch.tensor([1.0, 1.0], requires_grad=True, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "data": {
                    "value": "torch.tensor([3.0, 4.0], requires_grad=True, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "data": {
                    "value": "torch.tensor([2.0], dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "data": {
                    "value": "[3.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "data": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "networks/decoder_net.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DecoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(kernel_size / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DecoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DecoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(kernel_size / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_44": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_45": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_46": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.residual_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualBlock(in_channels=int(filters[i]), n_filters=int(filters[i + 1]), kernel_size=int(kernel_sizes[i]), dtype=dtype) for i in range(n_residual_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_channels] + n_filters",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "DecoderNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "int(kernel_sizes[-1] / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_135": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.dim_match_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DecoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/encoder_net.py": {
        "torch": {
            "Conv2d_78": {
                "variable": {
                    "value": "self.input_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seq_len * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(k / 2) for k in kernel_sizes]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(in_channels=n_filters[i], out_channels=n_filters[i + 1], kernel_size=kernel_sizes[i + 1], padding=paddings[i + 1], stride=strides[i + 1]) for i in range(hidden_conv_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.out_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(k / 2) for k in kernel_sizes]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.out_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(k / 2) for k in kernel_sizes]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_122": {
                "variable": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_123": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.out_mean(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "n_filters[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(k / 2) for k in kernel_sizes]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "EncoderNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "networks/hamiltonian_net.py": {
        "torch": {
            "randn_123": {
                "variable": {
                    "value": "(q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 128, 16, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.in_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_shape[0] * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HamiltonianNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HamiltonianNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "conv_paddings[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[0 if isinstance(p, list) else p for p in paddings]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HamiltonianNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(in_channels=n_filters[i], out_channels=n_filters[i + 1], kernel_size=kernel_sizes[i + 1], padding=conv_paddings[i + 1], stride=strides[i + 1]) for i in range(hidden_conv_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HamiltonianNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((q, p), dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.paddings[0])",
                            "Call"
                        ],
                        [
                            "self.activation(self.in_conv(x))",
                            "Call"
                        ],
                        [
                            "self.activation(self.out_conv(x))",
                            "Call"
                        ],
                        [
                            "x.squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.paddings[i + 1])",
                            "Call"
                        ],
                        [
                            "self.activation(layer(x))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.paddings[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((q, p), dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.paddings[0])",
                            "Call"
                        ],
                        [
                            "self.activation(self.in_conv(x))",
                            "Call"
                        ],
                        [
                            "self.activation(self.out_conv(x))",
                            "Call"
                        ],
                        [
                            "x.squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.paddings[i + 1])",
                            "Call"
                        ],
                        [
                            "self.activation(layer(x))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.paddings[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "n_filters[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HamiltonianNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HamiltonianNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HamiltonianNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "conv_paddings[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[0 if isinstance(p, list) else p for p in paddings]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HamiltonianNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "networks/transformer_net.py": {
        "torch": {
            "Conv2d_73": {
                "variable": {
                    "value": "self.in_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(k / 2) for k in kernel_sizes]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(in_channels=n_filters[i], out_channels=n_filters[i + 1], kernel_size=kernel_sizes[i + 1], padding=paddings[i + 1], stride=strides[i + 1]) for i in range(hidden_conv_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(k / 2) for k in kernel_sizes]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "n_filters[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['n_filters']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['kernel_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(k / 2) for k in kernel_sizes]",
                            "ListComp"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "TransformerNet.DEFAULT_PARAMS['strides']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/check_gradients.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "rollouts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[43.23], [22.12], [3.0], [4.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': encoder.parameters()}, {'params': transformer.parameters()}, {'params': hnn.parameters()}, {'params': decoder.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_38": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_conversions.py": {
        "torch": {
            "randn_9": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_len, channels, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_22": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_len, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_41": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_len, seq_len, channels, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_45": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seq_len * channels, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_54": {
                "input": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty((seq_len * channels, 32, 32))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "concat_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_48": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "channels * seq_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_decoder.py": {
        "torch": {
            "randn_11": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 16, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_19": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 32, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 16, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_39": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 8, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_inference_net.py": {
        "torch": {
            "randn_24": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, channels, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_57": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(128, seq_len, in_channels, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_170": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(128, in_channels, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_losses.py": {
        "torch": {
            "randn_11": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, latent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_12": {
                "variable": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, latent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_17": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, latent_size, latent_size, latent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_18": {
                "variable": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, latent_size, latent_size, latent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_networks.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "rand_images_ts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rand_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, 255, size=(BATCH_SIZE, SEQUENCE_LENGTH, 32, 32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_104": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': self.hgn.encoder.parameters(), 'lr': params['optimization']['encoder_lr']}, {'params': self.hgn.transformer.parameters(), 'lr': params['optimization']['transformer_lr']}, {'params': self.hgn.hnn.parameters(), 'lr': params['optimization']['hnn_lr']}, {'params': self.hgn.decoder.parameters(), 'lr': params['optimization']['decoder_lr']}]",
                            "List"
                        ]
                    ]
                }
            },
            "clamp_183": {
                "variable": {
                    "value": "self.langrange_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.langrange_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_181": {
                "input": {
                    "value": "lagrange_mult_param * C.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/conversions.py": {
        "torch": {}
    },
    "utilities/gradient_flow_utils.py": {
        "torch": {
            "set_detect_anomaly_16": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_88": {
                "variable": {
                    "value": "rand_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, hgn.seq_len, hgn.channels, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utilities/hgn_result.py": {
        "torch": {
            "empty_33": {
                "variable": {
                    "value": "self.reconstructed_rollout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/integrator.py": {
        "torch": {
            "grad_44": {
                "outputs": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hnn(q=q, p=p)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(energy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_51": {
                "outputs": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hnn(q=q, p=p)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(energy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hnn(q=q, p=p)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_55": {
                "input": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hnn(q=q, p=p)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utilities/loader.py": {
        "torch": {
            "DataLoader_115": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainDS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "EnvironmentSampler(environment=env, dataset_len=params['dataset']['num_train_samples'], number_of_frames=params['dataset']['rollout']['seq_length'], delta_time=params['dataset']['rollout']['delta_time'], number_of_rollouts=params['optimization']['batch_size'], img_size=params['dataset']['img_size'], color=params['dataset']['rollout']['n_channels'] == 3, radius_bound=params['dataset']['radius_bound'], noise_level=params['dataset']['rollout']['noise_level'], seed=None)",
                            "Call"
                        ],
                        [
                            "EnvironmentLoader(params['dataset']['train_data'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testDS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "EnvironmentSampler(environment=env, dataset_len=params['dataset']['num_test_samples'], number_of_frames=params['dataset']['rollout']['seq_length'], delta_time=params['dataset']['rollout']['delta_time'], number_of_rollouts=params['optimization']['batch_size'], img_size=params['dataset']['img_size'], color=params['dataset']['rollout']['n_channels'] == 3, radius_bound=params['dataset']['radius_bound'], noise_level=params['dataset']['rollout']['noise_level'], seed=None)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainDS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "EnvironmentSampler(environment=env, dataset_len=params['dataset']['num_train_samples'], number_of_frames=params['dataset']['rollout']['seq_length'], delta_time=params['dataset']['rollout']['delta_time'], number_of_rollouts=params['optimization']['batch_size'], img_size=params['dataset']['img_size'], color=params['dataset']['rollout']['n_channels'] == 3, radius_bound=params['dataset']['radius_bound'], noise_level=params['dataset']['rollout']['noise_level'], seed=None)",
                            "Call"
                        ],
                        [
                            "EnvironmentLoader(params['dataset']['train_data'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['optimization']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_DS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "EnvironmentLoader(params['dataset']['test_data'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params['optimization']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/losses.py": {
        "torch": {
            "MSELoss_15": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean' if mean_reduction else 'none'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_37": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_39": {
                "input": {
                    "value": "kld_per_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp(), dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/training_logger.py": {
        "torch": {
            "SummaryWriter_23": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join('runs', hyper_params['experiment_id'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}