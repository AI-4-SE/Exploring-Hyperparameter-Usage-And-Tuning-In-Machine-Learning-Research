{
    "model/base_model.py": {
        "sklearn": {
            "TSNE_229": {
                "variable": {
                    "value": "mapper",
                    "type": "variable",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_87": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self.hparams.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_181": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self.hparams.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_194": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self.hparams.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_204": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self.hparams.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "self.hparams.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "encoding_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoding_chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "label_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_182": {
                "f": {
                    "value": "self.hparams.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_183": {
                "f": {
                    "value": "self.hparams.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_55": {
                "obj": {
                    "value": "{'hparams': self.hparams, 'state_dict': state_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.hparams.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_184": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__129": {
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data.py": {
        "sklearn": {
            "fetch_20newsgroups_196": {
                "variable": {
                    "value": "newsgroups_train",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "data_home": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fetch_20newsgroups_197": {
                "variable": {
                    "value": "newsgroups_test",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "data_home": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_207": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "max_features": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "self.X_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['train'].toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "self.X_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['cv'].toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "self.X_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['test'].toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "self.Y_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['gnd_train']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "self.Y_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['gnd_cv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "self.Y_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['gnd_test']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "self.X_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['train'].toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "self.X_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['cv'].toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "self.X_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['test'].toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "self.Y_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['gnd_train']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "self.Y_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['gnd_cv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "self.Y_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset['gnd_test']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_91": {
                "variable": {
                    "value": "cos_sim_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(self.X_test).type(FloatTensor) if useTest else deepcopy(self.X_train).type(FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "queries / torch.norm(queries, p=2, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "documents.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_93": {
                "variable": {
                    "value": "(scores, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_sim_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(queries, documents.T)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "TopK + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(self.X_train, self.Y_train, self.edges)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "database_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "database_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(self.X_train, self.Y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(self.X_val, self.Y_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_87": {
                "input": {
                    "value": "documents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(self.X_train).type(FloatTensor)",
                            "Call"
                        ],
                        [
                            "documents / torch.norm(documents, p=2, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_88": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(self.X_test).type(FloatTensor) if useTest else deepcopy(self.X_train).type(FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "queries / torch.norm(queries, p=2, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(self.X_test, self.Y_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_99": {
                "input": {
                    "value": "(torch.sum(Y_queries.unsqueeze(1).repeat(1, TopK, 1) * Y_documents[self.topK_indices], dim=-1) > 0).type(FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_102": {
                "input": {
                    "value": "(torch.sum(Y_queries.unsqueeze(1).repeat(1, TopK, 1) * Y_documents[self.topK_indices], dim=-1) > 0).type(FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "input": {
                    "value": "FloatTensor(self.topK_scores) / alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "Y_queries.unsqueeze(1).repeat(1, TopK, 1) * Y_documents[self.topK_indices]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "Y_queries.unsqueeze(1).repeat(1, TopK, 1) * Y_documents[self.topK_indices]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/SNUH.py": {
        "torch": {
            "Tensor_11": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_30": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "kl_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(q_mu ** 2 + q_sigma ** 2 - 1 - 2 * torch.log(q_sigma + 1e-08), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "kl_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(0.5 * (q_mu1 ** 2 + q_mu2 ** 2 + q_sigma1 ** 2 + q_sigma2 ** 2 - 2 * self.tau * gamma * q_sigma1 * q_sigma2 - 2 * self.tau * q_mu1 * q_mu2) / (1 - self.tau ** 2) - 0.5 * (q_mu1 ** 2 + q_mu2 ** 2 + q_sigma1 ** 2 + q_sigma2 ** 2) - 0.5 * torch.log(1 - gamma + 1e-08) + 0.5 * torch.log(1 - self.tau ** 2), dim=1) * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "median_72": {
                "variable": {
                    "value": "(mid_val, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gaussian_params[:, :self.dim_output] / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_122": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gaussian_params[:, self.dim_output:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_141": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dim_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "q_mu ** 2 + q_sigma ** 2 - 1 - 2 * torch.log(q_sigma + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "0.5 * (q_mu1 ** 2 + q_mu2 ** 2 + q_sigma1 ** 2 + q_sigma2 ** 2 - 2 * self.tau * gamma * q_sigma1 * q_sigma2 - 2 * self.tau * q_mu1 * q_mu2) / (1 - self.tau ** 2) - 0.5 * (q_mu1 ** 2 + q_mu2 ** 2 + q_sigma1 ** 2 + q_sigma2 ** 2) - 0.5 * torch.log(1 - gamma + 1e-08) + 0.5 * torch.log(1 - self.tau ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "input": {
                    "value": "corr_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ff(net).reshape([2, -1, self.dim_output])",
                            "Call"
                        ],
                        [
                            "(corr_params[0] + corr_params[1]) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_43": {
                "input": {
                    "value": "q_sigma + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "1 - gamma + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluation.py": {
        "torch": {
            "cat_17": {
                "variable": {
                    "value": "encoding_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoding_chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "label_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_distance(tgt_encodings, src_encodings, distance_metric, chunk_size, binary)",
                            "Call"
                        ],
                        [
                            "compute_hamming_distance(X1, X2, chunk_size=chunk_size, binary=binary)",
                            "Call"
                        ],
                        [
                            "cosine_distance_torch(X1, X2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_91": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x2.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/pytorch_helper.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self.stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input if num_layers < 1 else dim_hidden",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "dim_input if l == 0 else dim_hidden",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LayerNorm_31": {
                "normalized_shape": {
                    "value": "dim_input if l == 0 else dim_hidden",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}