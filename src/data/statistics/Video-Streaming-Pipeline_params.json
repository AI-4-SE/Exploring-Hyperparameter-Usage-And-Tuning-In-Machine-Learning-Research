{
    "opencv/sources/modules/dnn/misc/quantize_face_detector.py": {
        "tensorflow": {
            "placeholder_104": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if args.fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 300, 300, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_batch_nd_110": {
                "variable": {
                    "value": "data_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(data_bn, 'data_scale')",
                            "Call"
                        ],
                        [
                            "tf.space_to_batch_nd(data_scale, [1, 1], [[3, 3], [3, 3]], name='Pad')",
                            "Call"
                        ]
                    ]
                },
                "block_shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[3, 3], [3, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Pad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "conv1_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_scale_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(conv1_bn_h, 'conv1_scale_h')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_116": {
                "variable": {
                    "value": "conv1_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_scale_h)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "layer_64_1_relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_64_1_scale2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(layer_64_1_bn2_h, 'layer_64_1_scale2_h')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_128": {
                "variable": {
                    "value": "layer_128_1_relu1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_128_1_scale1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(layer_128_1_bn1_h, 'layer_128_1_scale1_h')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_132": {
                "variable": {
                    "value": "layer_128_1_relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_128_1_scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(layer_128_1_bn2, 'layer_128_1_scale2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_139": {
                "variable": {
                    "value": "layer_256_1_relu1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_256_1_scale1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(layer_256_1_bn1, 'layer_256_1_scale1')",
                            "Call"
                        ]
                    ]
                }
            },
            "space_to_batch_nd_142": {
                "variable": {
                    "value": "layer_256_1_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_256_1_relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(layer_256_1_scale1)",
                            "Call"
                        ]
                    ]
                },
                "block_shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Pad_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "layer_256_1_relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_256_1_scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(layer_256_1_bn2, 'layer_256_1_scale2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_154": {
                "variable": {
                    "value": "layer_512_1_relu1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_512_1_scale1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(layer_512_1_bn1, 'layer_512_1_scale1')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_158": {
                "variable": {
                    "value": "layer_512_1_relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_512_1_scale2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(layer_512_1_bn2_h, 'layer_512_1_scale2_h')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_165": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "last_scale_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(last_bn_h, 'last_scale_h')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "last_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "space_to_batch_nd_172": {
                "variable": {
                    "value": "conv7_2_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7_1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(conv6_2_h, 'conv7_1_h', activ=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "block_shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Pad_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "mbox_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "mbox_loc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "mbox_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "confidences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "mbox_conf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "mbox_conf_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mbox_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(confidences, axis=-1, name='mbox_conf')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mbox_conf_reshape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_199": {
                "variable": {
                    "value": "mbox_conf_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "mbox_conf_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(mbox_conf, [-1, 2], name='mbox_conf_reshape')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mbox_conf_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "mbox_conf_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mbox_conf_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(mbox_conf_reshape, name='mbox_conf_softmax')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, total]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mbox_conf_flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NodeDef_296": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NodeDef_305": {
                "variable": {
                    "value": "detectionOut",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NodeDef_340": {
                "variable": {
                    "value": "softmaxShape",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_225": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.as_graph_def()",
                            "Call"
                        ],
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, graph_def, out_nodes)",
                            "Call"
                        ],
                        [
                            "optimize_for_inference_lib.optimize_for_inference(graph_def, inp_nodes, out_nodes, dtype.as_datatype_enum)",
                            "Call"
                        ],
                        [
                            "TransformGraph(graph_def, inp_nodes, out_nodes, transforms)",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "out_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['mbox_loc', 'mbox_conf_flatten']",
                            "List"
                        ]
                    ]
                }
            },
            "NodeDef_279": {
                "variable": {
                    "value": "priorBox",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_graph_365": {
                "graph_or_graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.as_graph_def()",
                            "Call"
                        ],
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, graph_def, out_nodes)",
                            "Call"
                        ],
                        [
                            "optimize_for_inference_lib.optimize_for_inference(graph_def, inp_nodes, out_nodes, dtype.as_datatype_enum)",
                            "Call"
                        ],
                        [
                            "TransformGraph(graph_def, inp_nodes, out_nodes, transforms)",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "args.pbtxt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "as_text": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "layer.blobs[0].flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if args.fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "mul",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "layer.blobs[0].transpose(2, 3, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if args.fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.blobs[0].flatten()",
                            "Call"
                        ],
                        [
                            "mean / scale[0]",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(mean, dtype=tf.float32, name='mean')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.blobs[1].flatten()",
                            "Call"
                        ],
                        [
                            "std / scale[0]",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(std, dtype=tf.float32, name='std')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "std",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "scale if hasWeights else np.ones(mean.shape)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "layer.blobs[3].flatten() if hasBias else np.zeros(mean.shape)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "layer.blobs[0].flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if args.fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "mul",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_190": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv(bottom, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + suffix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "layer.blobs[1].flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if args.fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + suffix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(layer.blobs[0].flatten(), dtype=dtype, name='mul')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[0].transpose(2, 3, 1, 0), dtype=dtype, name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[0].flatten(), dtype=dtype, name='mul')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, stride, stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "atrous_conv2d_58": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(layer.blobs[0].flatten(), dtype=dtype, name='mul')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[0].transpose(2, 3, 1, 0), dtype=dtype, name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[0].flatten(), dtype=dtype, name='mul')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "layer.blobs[1].flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if args.fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_62": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, filter=w, strides=(1, stride, stride, 1), padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, rate=dilation, padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(layer.blobs[1].flatten(), dtype=dtype, name='add')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[1].flatten(), dtype=dtype, name='bias')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + suffix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.fused_batch_norm(x, gamma, beta, mean, std, eps, is_training=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(bn, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if args.fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + suffix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_249": {
                "name": {
                    "value": "args.pb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_46": {
                "value": {
                    "value": "tf.multiply(x, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(layer.blobs[1].flatten(), dtype=dtype, name='add')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[1].flatten(), dtype=dtype, name='bias')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_48": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(layer.blobs[0].flatten(), dtype=dtype, name='mul')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[0].transpose(2, 3, 1, 0), dtype=dtype, name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[0].flatten(), dtype=dtype, name='mul')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + suffix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fused_batch_norm_91": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(scale if hasWeights else np.ones(mean.shape), dtype=tf.float32, name='gamma')",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(layer.blobs[3].flatten() if hasBias else np.zeros(mean.shape), dtype=tf.float32, name='beta')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.blobs[0].flatten()",
                            "Call"
                        ],
                        [
                            "mean / scale[0]",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(mean, dtype=tf.float32, name='mean')",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.blobs[1].flatten()",
                            "Call"
                        ],
                        [
                            "std / scale[0]",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(std, dtype=tf.float32, name='std')",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                },
                "is_training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l2_normalize_101": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_46": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(layer.blobs[0].flatten(), dtype=dtype, name='mul')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[0].transpose(2, 3, 1, 0), dtype=dtype, name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(layer.blobs[0].flatten(), dtype=dtype, name='mul')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "opencv/sources/modules/dnn/test/imagenet_cls_test_inception.py": {
        "tensorflow": {
            "Session_25": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_27": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_26": {
                "name": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_30": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "opencv/sources/samples/dnn/mobilenet_ssd_accuracy.py": {
        "tensorflow": {
            "GraphDef_66": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_64": {
                "name": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_72": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "opencv/sources/samples/dnn/shrink_tf_graph_weights.py": {
        "tensorflow": {
            "GraphDef_28": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_graph_62": {
                "graph_or_graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FastGFile_27": {
                "name": {
                    "value": "args.input",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opencv/sources/samples/dnn/tf_text_graph_common.py": {
        "tensorflow": {
            "GraphDef_319": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_graph_329": {
                "graph_or_graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ],
                        [
                            "TransformGraph(graph_def, ['image_tensor'], outNodes, ['sort_by_execution_order'])",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "outputPath",
                    "type": "variable",
                    "possible_values": []
                },
                "as_text": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FastGFile_318": {
                "name": {
                    "value": "modelPath",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "opencv/sources/modules/dnn/test/cityscapes_semsegm_test_enet.py": {
        "torch": {}
    },
    "python/benchmark.py": {
        "torch": {
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_8": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_16": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/benchmark_with_streaming.py": {
        "torch": {
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_43": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/benchmark_with_streaming_and_sending.py": {
        "torch": {
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_15": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/benchmark_with_streaming_bitstream.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_44": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}