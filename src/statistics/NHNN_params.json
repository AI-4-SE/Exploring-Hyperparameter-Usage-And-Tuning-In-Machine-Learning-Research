{
    "Train_CNN.py": {
        "sklearn": {
            "GroupKFold_46": {
                "variable": {
                    "value": "kfold",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "folds",
                    "possible_values": [
                        [
                            "len(df['sub_id'].unique())",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_135": {
                "variable": {
                    "value": "perf",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "possible_values": [
                        [
                            "np.take(Y, Tes_idx, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_pred",
                    "possible_values": [
                        [
                            "np.zeros(Y_test.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_27": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorDataset_69": {
                "variable": {
                    "value": "train_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(X_train)",
                    "possible_values": []
                }
            },
            "TensorDataset_70": {
                "variable": {
                    "value": "val_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(X_val)",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(torch.FloatTensor(X_train), torch.LongTensor(Y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "possible_values": [
                        [
                            "TensorDataset(torch.FloatTensor(X_val), torch.LongTensor(Y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "best_model",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "os.path.join(path, '{}.checkpoint'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "X_test",
                    "possible_values": [
                        [
                            "np.take(X, Tes_idx, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Train_NHNN.py": {
        "sklearn": {
            "StandardScaler_49": {
                "variable": {
                    "value": "X_feat",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "GroupKFold_57": {
                "variable": {
                    "value": "group_kfold",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "folds",
                    "possible_values": [
                        [
                            "len(df['sub_id'].unique())",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_156": {
                "variable": {
                    "value": "perf",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "possible_values": [
                        [
                            "np.take(Y, test_idx, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.array(pred)",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_26": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorDataset_97": {
                "variable": {
                    "value": "train_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(X_train)",
                    "possible_values": []
                }
            },
            "TensorDataset_98": {
                "variable": {
                    "value": "val_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(X_val)",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(torch.FloatTensor(X_train), torch.LongTensor(Y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "possible_values": [
                        [
                            "TensorDataset(torch.FloatTensor(X_val), torch.LongTensor(Y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_126": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_107": {
                "f": {
                    "value": "path + '{}.checkpoint'.format(trial)",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "BayesianGaussianMixture_7": {
                "variable": {
                    "value": "DPGMM",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "10000",
                    "possible_values": []
                },
                "n_init": {
                    "value": "5",
                    "possible_values": []
                },
                "tol": {
                    "value": "1e-05",
                    "possible_values": []
                },
                "init_params": {
                    "value": "method",
                    "possible_values": [
                        [
                            "'random'",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                },
                "weight_concentration_prior_type": {
                    "value": "dirichlet_process",
                    "possible_values": []
                },
                "weight_concentration_prior": {
                    "value": "1",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3)",
                    "possible_values": []
                }
            },
            "Softmax_24": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "mfb.reshape(1, mfb.shape[0], mfb.shape[1])",
                    "possible_values": []
                }
            }
        }
    },
    "NHNN.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.cnn_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=40, out_channels=128, kernel_size=15, bias=False, padding=7)",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.linear_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, 128)",
                    "possible_values": []
                }
            },
            "Conv1d_22": {
                "in_channels": {
                    "value": "40",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "2 + 2",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_26": {
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.cnn_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=40, out_channels=128, kernel_size=15, bias=False, padding=7)",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.linear_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, 128)",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.cnn_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=40, out_channels=128, kernel_size=15, bias=False, padding=7)",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.linear_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, 128)",
                    "possible_values": []
                }
            },
            "Conv1d_18": {
                "in_channels": {
                    "value": "40",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "2 + 2",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_22": {
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "p": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv1d_54": {
                "in_channels": {
                    "value": "40",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv1d_56": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "2 + 2",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_58": {
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}