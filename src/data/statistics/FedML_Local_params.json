{
    "fedml_api/data_preprocessing/NUS_WIDE/nus_wide_dataset.py": {
        "sklearn": {
            "StandardScaler_80": {
                "variable": {
                    "value": "scale_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_128": {
                "variable": {
                    "value": "scale_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/UCI/data_loader_for_susy_and_ro.py": {
        "sklearn": {
            "KMeans_122": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "len(self.client_list)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/lending_club_loan/lending_club_dataset.py": {
        "sklearn": {
            "StandardScaler_35": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/classical_vertical_fl/guest_trainer.py": {
        "sklearn": {
            "accuracy_score_145": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.y_test",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_lbls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "roc_auc_score_146": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.y_test",
                            "Attribute"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_prob_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._sigmoid(np.sum(guest_logits, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_151": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.y_test",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_lbls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "warn_for": {
                    "value": "tuple()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_38": {
                "variable": {
                    "value": "self.optimizer_fe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model_feature_extractor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_43": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "self.optimizer_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model_classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.X_train[self.batch_idx * self.batch_size:self.batch_idx * self.batch_size + self.batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(batch_x).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.y_train[self.batch_idx * self.batch_size:self.batch_idx * self.batch_size + self.batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(batch_y).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "batch_y.type_as(guest_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "guest_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "guest_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model_classifier.forward(extracted_feature)",
                            "Call"
                        ],
                        [
                            "guest_logits.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "guest_logits + host_logits",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(guest_logits, requires_grad=True).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "self.model_classifier.forward(extracted_feature)",
                            "Call"
                        ],
                        [
                            "guest_logits.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_95": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "class_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(guest_logits, batch_y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "guest_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model_classifier.forward(extracted_feature)",
                            "Call"
                        ],
                        [
                            "guest_logits.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "guest_logits + host_logits",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(guest_logits, requires_grad=True).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "self.model_classifier.forward(extracted_feature)",
                            "Call"
                        ],
                        [
                            "guest_logits.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.X_test",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/classical_vertical_fl/vfl_fixture.py": {
        "sklearn": {
            "accuracy_score_87": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_data[main_party_id]['Y']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_lbls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "roc_auc_score_88": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_data[main_party_id]['Y']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_prob_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.federated_learning.predict(Xa_test, party_X_test_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_91": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "test_data[main_party_id]['Y']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_lbls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "warn_for": {
                    "value": "tuple()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/classical_vertical_fl/main_vfl.py": {
        "sklearn": {
            "shuffle_118": {
                "variable": {
                    "value": "(Xa_train, Xb_train, Xc_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Xc_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_119": {
                "variable": {
                    "value": "(Xa_test, Xb_test, Xc_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Xc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(process_gpu_dict[process_ID - 1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "worker_number",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/classical_vertical_fl/run_vfl_fc_three_party_lending_club.py": {
        "sklearn": {
            "shuffle_73": {
                "variable": {
                    "value": "(Xa_train, Xb_train, Xc_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Xc_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_74": {
                "variable": {
                    "value": "(Xa_test, Xb_test, Xc_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Xc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_60": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/classical_vertical_fl/run_vfl_fc_three_party_nus_wide.py": {
        "sklearn": {
            "shuffle_67": {
                "variable": {
                    "value": "(Xa_train, Xb_train, Xc_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Xc_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_68": {
                "variable": {
                    "value": "(Xa_test, Xb_test, Xc_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "Xc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/classical_vertical_fl/run_vfl_fc_two_party_lending_club.py": {
        "sklearn": {
            "shuffle_68": {
                "variable": {
                    "value": "(Xa_train, Xb_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_69": {
                "variable": {
                    "value": "(Xa_test, Xb_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/classical_vertical_fl/run_vfl_fc_two_party_nus_wide.py": {
        "sklearn": {
            "shuffle_70": {
                "variable": {
                    "value": "(Xa_train, Xb_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_71": {
                "variable": {
                    "value": "(Xa_test, Xb_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Xa_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Xb_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/centralized/centralized_trainer.py": {
        "torch": {
            "CrossEntropyLoss_29": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_31": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_33": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_95": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/data_preprocessing/FederatedEMNIST/data_loader.py": {
        "torch": {
            "TensorDataset_52": {
                "variable": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(train_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(torch.tensor(train_x), torch.tensor(train_y, dtype=torch.long))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_58": {
                "variable": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(test_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(torch.tensor(test_x), torch.tensor(test_y, dtype=torch.long))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "train_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(train_data_local_dict.values()))))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "test_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack([train_h5[_EXAMPLE][client_id][_LABEL][()] for client_id in train_ids]).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack([test_h5[_EXAMPLE][client_id][_LABEL][()] for client_id in test_ids]).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConcatDataset_131": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(train_data_local_dict.values())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_138": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/ImageNet/data_loader.py": {
        "torch": {
            "DataLoader_99": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(imagenet_dataset_train, dataidxs, net_dataidx_map, train=True, transform=transform_train, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(imagenet_dataset_test, dataidxs=None, net_dataidx_map=None, train=False, transform=transform_test, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=None, train=False, transform=transform_test, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(imagenet_dataset_train, dataidxs, net_dataidx_map, train=True, transform=transform_train, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(imagenet_dataset_test, dataidxs=None, net_dataidx_map=None, train=False, transform=transform_test, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=None, train=False, transform=transform_test, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(imagenet_dataset_train, dataidxs, net_dataidx_map, train=True, transform=transform_train, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(imagenet_dataset_test, dataidxs=None, net_dataidx_map=None, train=False, transform=transform_test, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=None, train=False, transform=transform_test, download=False)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_172": {
                "variable": {
                    "value": "train_sam",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(data_dir=data_dir, dataidxs=None, train=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ImageNet_hdf5(data_dir=data_dir, dataidxs=None, train=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ImageNet(data_dir=data_dir, dataidxs=None, train=True)",
                            "Call"
                        ],
                        [
                            "ImageNet_hdf5(data_dir=data_dir, dataidxs=None, train=True)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_173": {
                "variable": {
                    "value": "test_sam",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(data_dir=data_dir, dataidxs=None, train=False, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ImageNet_hdf5(data_dir=data_dir, dataidxs=None, train=False, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ImageNet(data_dir=data_dir, dataidxs=None, train=False)",
                            "Call"
                        ],
                        [
                            "ImageNet_hdf5(data_dir=data_dir, dataidxs=None, train=False)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(data_dir=data_dir, dataidxs=None, train=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ImageNet_hdf5(data_dir=data_dir, dataidxs=None, train=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "ImageNet(data_dir=data_dir, dataidxs=None, train=True)",
                            "Call"
                        ],
                        [
                            "ImageNet_hdf5(data_dir=data_dir, dataidxs=None, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, num_replicas=world_size, rank=rank)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(data_dir=data_dir, dataidxs=None, train=False, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ImageNet_hdf5(data_dir=data_dir, dataidxs=None, train=False, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "ImageNet(data_dir=data_dir, dataidxs=None, train=False)",
                            "Call"
                        ],
                        [
                            "ImageNet_hdf5(data_dir=data_dir, dataidxs=None, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DistributedSampler(test_dataset, num_replicas=world_size, rank=rank)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/data_preprocessing/ImageNet/datasets.py": {
        "torch": {}
    },
    "fedml_api/data_preprocessing/ImageNet/datasets_hdf5.py": {
        "torch": {}
    },
    "fedml_api/data_preprocessing/Landmarks/data_loader.py": {
        "torch": {
            "DataLoader_182": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, train_files, dataidxs=dataidxs, train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, train_files, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, test_files, dataidxs=None, train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, test_files, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, train_files, dataidxs=dataidxs, train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, train_files, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, test_files, dataidxs=None, train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, test_files, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/data_preprocessing/Landmarks/datasets.py": {
        "torch": {}
    },
    "fedml_api/data_preprocessing/MNIST/data_loader.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "batched_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(batched_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "batched_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(batched_y)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/cifar10/data_loader.py": {
        "torch": {
            "DataLoader_181": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/data_preprocessing/cifar10/datasets.py": {
        "torch": {}
    },
    "fedml_api/data_preprocessing/cifar100/data_loader.py": {
        "torch": {
            "DataLoader_180": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_train, train=True, transform=transform_train, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs_test, train=False, transform=transform_test, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/data_preprocessing/cifar100/datasets.py": {
        "torch": {}
    },
    "fedml_api/data_preprocessing/cinic10/data_loader.py": {
        "torch": {
            "DataLoader_228": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(traindir, dataidxs=dataidxs, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "dl_obj(traindir, dataidxs=dataidxs_train, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_229": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(valdir, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "dl_obj(valdir, dataidxs=dataidxs_test, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_244": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(traindir, dataidxs=dataidxs, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "dl_obj(traindir, dataidxs=dataidxs_train, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_245": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(valdir, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "dl_obj(valdir, dataidxs=dataidxs_test, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_87": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_101": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_122": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_135": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/edge_case_examples/data_loader.py": {
        "torch": {
            "DataLoader_217": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=True, user_id=user_id, num_total_users=num_total_users, poison_type=poison_type, ardis_dataset_train=ardis_dataset, attack_case=attack_case)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_277": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=True)",
                            "Call"
                        ],
                        [
                            "dl_obj(datadir, dataidxs=dataidxs, train=True, transform=transform_train, download=True, user_id=user_id, num_total_users=num_total_users, poison_type=poison_type, ardis_dataset_train=ardis_dataset, attack_case=attack_case)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_278": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dl_obj(datadir, train=False, transform=transform_test, download=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_308": {
                "variable": {
                    "value": "poisoned_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(saved_data_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_310": {
                "variable": {
                    "value": "vanilla_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "emnist_test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.EMNIST('./../../../data', split='digits', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_312": {
                "variable": {
                    "value": "targetted_task_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "fashion_mnist_test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_293": {
                "variable": {
                    "value": "poisoned_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_data_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_323": {
                "variable": {
                    "value": "targetted_task_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ardis_test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(saved_data_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_321": {
                "variable": {
                    "value": "ardis_test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_data_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_416": {
                "variable": {
                    "value": "poisoned_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "CIFAR10_Poisoned(root='./../../../data/cifar10', clean_indices=np.arange(tempt_poisoned_trainset.shape[0]), poisoned_indices=np.arange(tempt_poisoned_trainset.shape[0], tempt_poisoned_trainset.shape[0] + saved_southwest_dataset_train.shape[0]), train=True, download=True, transform_clean=transform_train, transform_poison=transform_poison)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_418": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageFolderTruncated(_train_dir, transform=transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: F.pad(Variable(x.unsqueeze(0), requires_grad=False), (4, 4, 4, 4), mode='reflect').data.squeeze()), transforms.ToPILImage(), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize(mean=cinic_mean, std=cinic_std)]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_430": {
                "variable": {
                    "value": "vanilla_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_431": {
                "variable": {
                    "value": "targetted_task_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_524": {
                "variable": {
                    "value": "poisoned_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "CIFAR10_Poisoned(root='./../../../data/cifar10', clean_indices=np.arange(tempt_poisoned_trainset.shape[0]), poisoned_indices=np.arange(tempt_poisoned_trainset.shape[0], tempt_poisoned_trainset.shape[0] + saved_southwest_dataset_train.shape[0]), train=True, download=True, transform_clean=transform_train, transform_poison=transform_poison)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_527": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageFolderTruncated(_train_dir, transform=transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: F.pad(Variable(x.unsqueeze(0), requires_grad=False), (4, 4, 4, 4), mode='reflect').data.squeeze()), transforms.ToPILImage(), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize(mean=cinic_mean, std=cinic_std)]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_536": {
                "variable": {
                    "value": "vanilla_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_537": {
                "variable": {
                    "value": "targetted_task_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_606": {
                "variable": {
                    "value": "poisoned_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "CIFAR10_Poisoned(root='./../../../data/cifar10', clean_indices=np.arange(tempt_poisoned_trainset.shape[0]), poisoned_indices=np.arange(tempt_poisoned_trainset.shape[0], tempt_poisoned_trainset.shape[0] + saved_southwest_dataset_train.shape[0]), train=True, download=True, transform_clean=transform_train, transform_poison=transform_poison)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_609": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageFolderTruncated(_train_dir, transform=transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: F.pad(Variable(x.unsqueeze(0), requires_grad=False), (4, 4, 4, 4), mode='reflect').data.squeeze()), transforms.ToPILImage(), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize(mean=cinic_mean, std=cinic_std)]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_618": {
                "variable": {
                    "value": "vanilla_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_619": {
                "variable": {
                    "value": "targetted_task_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_696": {
                "variable": {
                    "value": "poisoned_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(trainset)",
                            "Call"
                        ],
                        [
                            "CIFAR10_Poisoned(root='./../../../data/cifar10', clean_indices=np.arange(tempt_poisoned_trainset.shape[0]), poisoned_indices=np.arange(tempt_poisoned_trainset.shape[0], tempt_poisoned_trainset.shape[0] + saved_southwest_dataset_train.shape[0]), train=True, download=True, transform_clean=transform_train, transform_poison=transform_poison)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_699": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageFolderTruncated(_train_dir, transform=transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: F.pad(Variable(x.unsqueeze(0), requires_grad=False), (4, 4, 4, 4), mode='reflect').data.squeeze()), transforms.ToPILImage(), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize(mean=cinic_mean, std=cinic_std)]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_708": {
                "variable": {
                    "value": "vanilla_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./../../../data/cifar10', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_709": {
                "variable": {
                    "value": "targetted_task_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "poisoned_testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(testset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_202": {
                "input": {
                    "value": "Variable(x.unsqueeze(0), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_258": {
                "input": {
                    "value": "Variable(x.unsqueeze(0), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_442": {
                "input": {
                    "value": "Variable(x.unsqueeze(0), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_454": {
                "input": {
                    "value": "Variable(x.unsqueeze(0), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_97": {
                "input": {
                    "value": "Variable(x.unsqueeze(0), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/edge_case_examples/datasets.py": {
        "torch": {
            "tensor_164": {
                "variable": {
                    "value": "images_seven",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "images_seven",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ardis_images[indices_seven, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(images_seven).type(torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "labels_seven",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[7 for y in ardis_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/fed_cifar100/data_loader.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack([train_h5[_EXAMPLE][client_id][_LABEL][()] for client_id in client_ids_train]).squeeze()",
                            "Call"
                        ],
                        [
                            "np.vstack([train_h5[_EXAMPLE][client_id_train][_LABEL][()]]).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_61": {
                "variable": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(train_x, train_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "train_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(train_data_local_dict.values()))))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "test_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack([test_h5[_EXAMPLE][client_id][_LABEL][()] for client_id in client_ids_test]).squeeze()",
                            "Call"
                        ],
                        [
                            "np.vstack([train_h5[_EXAMPLE][client_id_test][_LABEL][()]]).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_68": {
                "variable": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(test_x, test_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack([train_h5[_EXAMPLE][client_id][_IMGAE][()] for client_id in client_ids_train])",
                            "Call"
                        ],
                        [
                            "np.vstack([train_h5[_EXAMPLE][client_id_train][_IMGAE][()]])",
                            "Call"
                        ],
                        [
                            "utils.preprocess_cifar_img(torch.tensor(train_x), train=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConcatDataset_134": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(train_data_local_dict.values())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_141": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "test_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack([test_h5[_EXAMPLE][client_id][_IMGAE][()] for client_id in client_ids_test])",
                            "Call"
                        ],
                        [
                            "np.vstack([train_h5[_EXAMPLE][client_id_test][_IMGAE][()]])",
                            "Call"
                        ],
                        [
                            "utils.preprocess_cifar_img(torch.tensor(test_x), train=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/data_preprocessing/fed_cifar100/utils.py": {
        "torch": {
            "div_29": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(img, 255.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "transoformed_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cifar100_transform(i.type(torch.DoubleTensor).mean(), i.type(torch.DoubleTensor).std(), train)(i.permute(2, 0, 1)) for i in img]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/fed_shakespeare/data_loader.py": {
        "torch": {
            "TensorDataset_56": {
                "variable": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(train_x[:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_58": {
                "variable": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(test_x[:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data.TensorDataset(torch.tensor(train_x[:, :]), torch.tensor(train_y[:]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data.TensorDataset(torch.tensor(test_x[:, :]), torch.tensor(test_y[:]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "train_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(train_data_local_dict.values()))))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "test_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "train_x[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "train_y[:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "test_x[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "test_y[:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConcatDataset_140": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(train_data_local_dict.values())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_146": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/shakespeare/data_loader.py": {
        "torch": {
            "from_numpy_84": {
                "variable": {
                    "value": "batched_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(process_x(batched_x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "batched_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(process_y(batched_y))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/stackoverflow_lr/data_loader.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset((StackOverflowDataset(os.path.join(data_dir, DEFAULT_TRAIN_FILE), client_idx, 'train', {'input': lambda x: utils.preprocess_input(x, data_dir), 'target': lambda y: utils.preprocess_target(y, data_dir)}) for client_idx in range(DEFAULT_TRAIN_CLIENTS_NUM)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset((StackOverflowDataset(os.path.join(data_dir, DEFAULT_TEST_FILE), client_idx, 'test', {'input': lambda x: utils.preprocess_input(x, data_dir), 'target': lambda y: utils.preprocess_target(y, data_dir)}) for client_idx in range(DEFAULT_TEST_CLIENTS_NUM)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "StackOverflowDataset(os.path.join(data_dir, DEFAULT_TRAIN_FILE), client_idx, 'train', {'input': lambda x: utils.preprocess_input(x, data_dir), 'target': lambda y: utils.preprocess_target(y, data_dir)})",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "train_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(train_data_local_dict.values()))))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "test_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "StackOverflowDataset(os.path.join(data_dir, DEFAULT_TEST_FILE), client_idx, 'test', {'input': lambda x: utils.preprocess_input(x, data_dir), 'target': lambda y: utils.preprocess_target(y, data_dir)})",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_29": {
                "datasets": {
                    "value": "(StackOverflowDataset(os.path.join(data_dir, DEFAULT_TRAIN_FILE), client_idx, 'train', {'input': lambda x: utils.preprocess_input(x, data_dir), 'target': lambda y: utils.preprocess_target(y, data_dir)}) for client_idx in range(DEFAULT_TRAIN_CLIENTS_NUM))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ConcatDataset_39": {
                "datasets": {
                    "value": "(StackOverflowDataset(os.path.join(data_dir, DEFAULT_TEST_FILE), client_idx, 'test', {'input': lambda x: utils.preprocess_input(x, data_dir), 'target': lambda y: utils.preprocess_target(y, data_dir)}) for client_idx in range(DEFAULT_TEST_CLIENTS_NUM))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ConcatDataset_142": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(train_data_local_dict.values())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_148": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/stackoverflow_lr/dataset.py": {
        "torch": {}
    },
    "fedml_api/data_preprocessing/stackoverflow_nwp/data_loader.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset((StackOverflowDataset(os.path.join(data_dir, DEFAULT_TRAIN_FILE), client_idx, _tokenizer) for client_idx in range(DEFAULT_TRAIN_CLIENTS_NUM)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset((StackOverflowDataset(os.path.join(data_dir, DEFAULT_TEST_FILE), client_idx, 'test', _tokenizer) for client_idx in range(DEFAULT_TEST_CLIENTS_NUM)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "StackOverflowDataset(os.path.join(data_dir, DEFAULT_TRAIN_FILE), client_idx, 'train', _tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "train_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(train_data_local_dict.values()))))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "test_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "StackOverflowDataset(os.path.join(data_dir, DEFAULT_TEST_FILE), client_idx, 'test', _tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_34": {
                "datasets": {
                    "value": "(StackOverflowDataset(os.path.join(data_dir, DEFAULT_TRAIN_FILE), client_idx, _tokenizer) for client_idx in range(DEFAULT_TRAIN_CLIENTS_NUM))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ConcatDataset_41": {
                "datasets": {
                    "value": "(StackOverflowDataset(os.path.join(data_dir, DEFAULT_TEST_FILE), client_idx, 'test', _tokenizer) for client_idx in range(DEFAULT_TEST_CLIENTS_NUM))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ConcatDataset_136": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(train_data_local_dict.values())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_143": {
                "datasets": {
                    "value": "list((dl.dataset for dl in list(test_data_local_dict.values()) if dl is not None))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/data_preprocessing/stackoverflow_nwp/dataset.py": {
        "torch": {}
    },
    "fedml_api/data_preprocessing/synthetic_1_1/data_loader.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "full_x_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "full_y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "full_x_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "full_y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_54": {
                "variable": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "full_x_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_55": {
                "variable": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "full_x_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "train_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(torch.tensor(train_data[_USER_DATA][client_ids_train[i]]['x']), torch.tensor(train_data[_USER_DATA][client_ids_train[i]]['y'], dtype=torch.int64))",
                            "Call"
                        ],
                        [
                            "data.TensorDataset(full_x_train, full_y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "test_data_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(torch.tensor(train_data[_USER_DATA][client_ids_test[i]]['x']), torch.tensor(train_data[_USER_DATA][client_ids_test[i]]['y'], dtype=torch.int64))",
                            "Call"
                        ],
                        [
                            "data.TensorDataset(full_x_test, full_y_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_40": {
                "variable": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(train_data[_USER_DATA][client_ids_train[i]]['x'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_42": {
                "variable": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(train_data[_USER_DATA][client_ids_test[i]]['x'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(torch.tensor(train_data[_USER_DATA][client_ids_train[i]]['x']), torch.tensor(train_data[_USER_DATA][client_ids_train[i]]['y'], dtype=torch.int64))",
                            "Call"
                        ],
                        [
                            "data.TensorDataset(full_x_train, full_y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(torch.tensor(train_data[_USER_DATA][client_ids_test[i]]['x']), torch.tensor(train_data[_USER_DATA][client_ids_test[i]]['y'], dtype=torch.int64))",
                            "Call"
                        ],
                        [
                            "data.TensorDataset(full_x_test, full_y_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_BATCH_SIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "full_x_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x_train, torch.tensor(train_data[_USER_DATA][client_ids_train[i]]['x']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "full_y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y_train, torch.tensor(train_data[_USER_DATA][client_ids_train[i]]['y'], dtype=torch.int64))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "full_x_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x_test, torch.tensor(test_data[_USER_DATA][client_ids_test[i]]['x']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "full_y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y_test, torch.tensor(test_data[_USER_DATA][client_ids_test[i]]['y'], dtype=torch.int64))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "train_data[_USER_DATA][client_ids_train[i]]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "train_data[_USER_DATA][client_ids_train[i]]['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "train_data[_USER_DATA][client_ids_test[i]]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "train_data[_USER_DATA][client_ids_test[i]]['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "train_data[_USER_DATA][client_ids_train[i]]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "train_data[_USER_DATA][client_ids_train[i]]['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "test_data[_USER_DATA][client_ids_test[i]]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "test_data[_USER_DATA][client_ids_test[i]]['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/classical_vertical_fl/host_trainer.py": {
        "torch": {
            "SGD_29": {
                "variable": {
                    "value": "self.optimizer_fe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model_feature_extractor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_34": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_35": {
                "variable": {
                    "value": "self.optimizer_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model_classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "self.batch_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.X_train[self.batch_idx * self.batch_size:self.batch_idx * self.batch_size + self.batch_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(gradient).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.X_test",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedavg/FedAVGAggregator.py": {
        "torch": {
            "Subset_103": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_global.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(range(test_data_num), min(num_samples, test_data_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "sample_testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.test_global.dataset, sample_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedavg/MyModelTrainer.py": {
        "torch": {
            "CrossEntropyLoss_25": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_65": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_27": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_29": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/distributed/fedavg/utils.py": {
        "torch": {
            "from_numpy_7": {
                "variable": {
                    "value": "model_params_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(model_params_list[k])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedavg_robust/FedAvgRobustAggregator.py": {
        "torch": {
            "CrossEntropyLoss_280": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_56": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_65": {
                "variable": {
                    "value": "backdoor_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target == target_class",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_like_66": {
                "variable": {
                    "value": "target_backdoor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target[backdoor_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_287": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.argmax(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedavg_robust/FedAvgRobustTrainer.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_39": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedgkt/GKTClientTrainer.py": {
        "torch": {
            "CrossEntropyLoss_38": {
                "variable": {
                    "value": "self.criterion_CE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_32": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.bnwd_optim_params(self.client_model, self.model_params, self.master_params) if args.no_bn_wd else self.master_params",
                            "IfExp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.bnwd_optim_params(self.client_model, self.model_params, self.master_params) if args.no_bn_wd else self.master_params",
                            "IfExp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "large_model_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.server_logits_dict[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedgkt/GKTServerTrainer.py": {
        "torch": {
            "ReduceLROnPlateau_46": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_48": {
                "variable": {
                    "value": "self.criterion_CE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_29": {
                "variable": {
                    "value": "self.model_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_40": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.bnwd_optim_params(self.model_global, self.model_params, self.master_params) if args.no_bn_wd else self.master_params",
                            "IfExp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.bnwd_optim_params(self.model_global, self.model_params, self.master_params) if args.no_bn_wd else self.master_params",
                            "IfExp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "batch_feature_map_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "extracted_feature_dict[batch_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "variable": {
                    "value": "batch_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "logits_dict[batch_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "variable": {
                    "value": "batch_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels_dict[batch_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "{'state_dict': self.model_global.state_dict(), 'optim_dict': self.optimizer.state_dict(), 'epoch': round_idx + 1, 'test_accTop1': test_metrics['test_accTop1'], 'test_accTop5': test_metrics['test_accTop5']}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "last_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join('./checkpoint/last.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_305": {
                "variable": {
                    "value": "batch_feature_map_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "extracted_feature_dict[batch_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_306": {
                "variable": {
                    "value": "batch_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels_dict[batch_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedgkt/utils.py": {
        "torch": {
            "cat_22": {
                "variable": {
                    "value": "flat_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_11": {
                "variable": {
                    "value": "pretrain_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_87": {
                "variable": {
                    "value": "output_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_batch / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_106": {
                "variable": {
                    "value": "output_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_batch / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "teacher_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_outputs / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_13": {
                "variable": {
                    "value": "pretrain_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "input": {
                    "value": "teacher_outputs / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_90": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "torch.mul(output_batch, teacher_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_110": {
                "input": {
                    "value": "output_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(output_batch / self.T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output_batch / self.T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "teacher_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(teacher_outputs / self.T, dim=1) + 10 ** (-7)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(teacher_outputs / self.T, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/distributed/fednas/FedNASAggregator.py": {
        "torch": {
            "CrossEntropyLoss_147": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_156": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_159": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/distributed/fednas/FedNASServerManager.py": {
        "torch": {
            "empty_cache_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fednas/FedNASTrainer.py": {
        "torch": {
            "CrossEntropyLoss_20": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weight_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filter(lambda p: id(p) not in arch_params, parameters)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_52": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(weight_params, self.args.learning_rate, momentum=self.args.momentum, weight_decay=self.args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, self.args.learning_rate, momentum=self.args.momentum, weight_decay=self.args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(self.args.epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.args.learning_rate_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_141": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(weight_params, self.args.learning_rate, momentum=self.args.momentum, weight_decay=self.args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, self.args.learning_rate, momentum=self.args.momentum, weight_decay=self.args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(self.args.epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.args.learning_rate_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__112": {
                "parameters": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__186": {
                "parameters": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_242": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/distributed/fedopt/FedOptAggregator.py": {
        "torch": {
            "Subset_139": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_global.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(range(test_data_num), min(num_samples, test_data_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "sample_testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.test_global.dataset, sample_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedopt/MyModelTrainer.py": {
        "torch": {
            "CrossEntropyLoss_27": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_69": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__43": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedopt/optrepo.py": {
        "torch": {}
    },
    "fedml_api/distributed/fedopt/utils.py": {
        "torch": {
            "from_numpy_7": {
                "variable": {
                    "value": "model_params_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(model_params_list[k])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedseg/FedSegAggregator.py": {
        "torch": {}
    },
    "fedml_api/distributed/fedseg/MyModelTrainer.py": {
        "torch": {
            "Adam_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "train_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': self.model.get_1x_lr_params(), 'lr': args.lr}, {'params': self.model.get_10x_lr_params(), 'lr': args.lr * 10}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/fedseg/utils.py": {
        "torch": {
            "from_numpy_28": {
                "variable": {
                    "value": "model_params_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(model_params_list[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_99": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_104": {
                "variable": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-criterion(logit, target.long())",
                            "UnaryOp"
                        ],
                        [
                            "logpt * alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_184": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.experiment_dir, filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/distributed/split_nn/client.py": {
        "torch": {
            "SGD_18": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/split_nn/server.py": {
        "torch": {
            "SGD_19": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_21": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/turboaggregate/TA_Aggregator.py": {
        "torch": {
            "CrossEntropyLoss_148": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_155": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/distributed/turboaggregate/TA_Trainer.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/turboaggregate/utils.py": {
        "torch": {
            "from_numpy_7": {
                "variable": {
                    "value": "model_params_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(model_params_list[k])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/distributed/utils/gpu_mapping.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_util_map[process_id][1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/cnn.py": {
        "torch": {
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv2d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "variable": {
                    "value": "self.max_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_52": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3136",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, (nums, 1, 28, 28))",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(x)",
                            "Call"
                        ],
                        [
                            "self.max_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(x)",
                            "Call"
                        ],
                        [
                            "self.max_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear_1(x))",
                            "Call"
                        ],
                        [
                            "self.linear_2(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.max_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_1(x)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_2(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nums, 1, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv2d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_119": {
                "variable": {
                    "value": "self.max_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv2d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_122": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9216",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, (nums, 1, 28, 28))",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(x)",
                            "Call"
                        ],
                        [
                            "self.max_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(x)",
                            "Call"
                        ],
                        [
                            "self.max_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear_1(x))",
                            "Call"
                        ],
                        [
                            "self.linear_2(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.max_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_1(x)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_2(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/darts/architect.py": {
        "torch": {
            "cat_10": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_22": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "arch_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.arch_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_67": {
                "variable": {
                    "value": "grads_alpha_with_train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "arch_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "grad_76": {
                "variable": {
                    "value": "grads_alpha_with_val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, target_valid)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_valid)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "arch_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "grad_115": {
                "variable": {
                    "value": "grads_alpha_with_train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "arch_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "grad_134": {
                "variable": {
                    "value": "grads_alpha_with_train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_train)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "arch_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "grad_141": {
                "variable": {
                    "value": "grads_alpha_with_val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, target_valid)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_valid)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "arch_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "grad_241": {
                "variable": {
                    "value": "grads_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_valid)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "arch_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "grad_252": {
                "variable": {
                    "value": "grads_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_valid)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "arch_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ],
                        [
                            "self.model.module.arch_parameters() if self.is_multi_gpu else self.model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "moment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_concat(self.model.parameters()).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "grad_42": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target_valid)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ],
                        [
                            "self.criterion(logits, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/darts/model.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_145": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.stem0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.stem1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_185": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_202": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_70": {
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_93": {
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "C_curr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "num_features": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_174": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_180": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/darts/model_search.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_157": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_209": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_236": {
                "variable": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(k, num_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.alphas_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(k, num_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_247": {
                "variable": {
                    "value": "alphas_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(k, num_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_248": {
                "variable": {
                    "value": "alphas_reduce",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(k, num_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "C_curr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "C_curr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_226": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_236": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "range(len(W[j]))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ],
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_237": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "range(len(W[j]))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ],
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_247": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "range(len(W[j]))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ],
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_248": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "range(len(W[j]))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ],
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_289": {
                "input": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_290": {
                "input": {
                    "value": "self.alphas_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/darts/model_search_gdas.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_103": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(k, num_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.alphas_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(k, num_ops)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "C_curr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gumbel_softmax_127": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.alphas_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gumbel_softmax_129": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_139": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "range(len(W[j]))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_140": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "range(len(W[j]))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_180": {
                "input": {
                    "value": "self.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "input": {
                    "value": "self.alphas_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/darts/operations.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_105": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_7": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/model/cv/darts/train.py": {
        "torch": {
            "CrossEntropyLoss_100": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weight_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.parameters() if is_multi_gpu else model.parameters()",
                            "IfExp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "train_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(root=args.data, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "valid_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(root=args.data, train=False, download=True, transform=valid_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_119": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(weight_params, args.learning_rate, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(args.epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.learning_rate_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Network(args.init_channels, CIFAR_CLASSES, args.layers, args.auxiliary, genotype)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__166": {
                "parameters": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.parameters() if is_multi_gpu else model.parameters()",
                            "IfExp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/darts/train_search.py": {
        "torch": {
            "CrossEntropyLoss_107": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weight_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filter(lambda p: id(p) not in arch_params, parameters)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "train_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(root=args.data, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size * len(gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[:split])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "valid_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(root=args.data, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size * len(gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(indices[split:num_train])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_157": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(weight_params, args.learning_rate, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(args.epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.learning_rate_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_116": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Network(args.init_channels, CIFAR_CLASSES, args.layers, criterion)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__270": {
                "parameters": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.parameters() if is_multi_gpu else model.parameters()",
                            "IfExp"
                        ],
                        [
                            "model.module.arch_parameters() if is_multi_gpu else model.arch_parameters()",
                            "IfExp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_149": {
                "indices": {
                    "value": "indices[:split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_154": {
                "indices": {
                    "value": "indices[split:num_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_204": {
                "input": {
                    "value": "model.module.alphas_normal if is_multi_gpu else model.alphas_normal",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "input": {
                    "value": "model.module.alphas_reduce if is_multi_gpu else model.alphas_reduce",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/darts/utils.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_68": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_75": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/efficientnet.py": {
        "torch": {
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_204": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_207": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self._global_params.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_111": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(start_dim=1)",
                            "Call"
                        ],
                        [
                            "self._dropout(x)",
                            "Call"
                        ],
                        [
                            "self._fc(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_115": {
                "input": {
                    "value": "x_squeezed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_reduce(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._swish(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._se_expand(x_squeezed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/model/cv/efficientnet_utils.py": {
        "torch": {
            "floor_141": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + torch.rand([batch_size, 1, 1, 1], dtype=inputs.dtype, device=inputs.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_140": {
                "*size": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_259": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_326": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_563": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_228": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_229": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_252": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_255": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_296": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_297": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_320": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_322": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_64": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/model/cv/group_normalization.py": {
        "torch": {
            "batch_norm_38": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_reshaped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(1, int(b * c / group), group, *input.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "running_mean_orig.repeat(b)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "running_var_orig.repeat(b)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight.repeat(b)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias.repeat(b)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "use_input_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/model/cv/mobilenet.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, input_channels, kernel_size, groups=input_channels, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(3, int(32 * alpha), 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthSeperabelConv2d(int(64 * alpha), int(128 * alpha), 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthSeperabelConv2d(int(128 * alpha), int(256 * alpha), 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthSeperabelConv2d(int(256 * alpha), int(512 * alpha), 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthSeperabelConv2d(int(512 * alpha), int(1024 * alpha), 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(1024 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_191": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/mobilenet_v3.py": {
        "torch": {
            "Sequential_67": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(exp_size, exp_size // divide)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_76": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, exp_size, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.depth_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(exp_size, exp_size, kernel_size=kernal_size, stride=stride, padding=padding, groups=exp_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.point_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(exp_size, out_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_249": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu6(x + 3.0, self.inplace) / 6.0",
                            "BinOp"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=[height, width]).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.dense(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch, channels, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.depth_conv(out)",
                            "Call"
                        ],
                        [
                            "self.squeeze_block(out)",
                            "Call"
                        ],
                        [
                            "self.point_conv(out)",
                            "Call"
                        ],
                        [
                            "self.init_conv(x)",
                            "Call"
                        ],
                        [
                            "self.block(out)",
                            "Call"
                        ],
                        [
                            "self.out_conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=[height, width])",
                            "Call"
                        ],
                        [
                            "self.out_conv2(out).view(batch, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=init_conv_out, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.out_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_conv1_in, out_conv1_out, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.out_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_conv2_in, out_conv2_out, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu6_41": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu6_50": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "exp_size // divide",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "exp_size // divide",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(in_channels * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(in_channels * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernal_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernal_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "exp_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(exp_size * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(out_channels * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(out_channels * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(out_channels * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(out_channels * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=init_conv_out, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.out_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_conv1_in, out_conv1_out, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.out_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_conv2_in, out_conv2_out, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_conv_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(16 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(16 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "num_features": {
                    "value": "init_conv_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(16 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(16 * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "out_conv1_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(160 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(96 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_conv1_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(960 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(576 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "num_features": {
                    "value": "out_conv1_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(960 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(576 * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "out_conv2_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(960 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(576 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_conv2_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(1280 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(1280 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_190": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "out_conv2_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(1280 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(1280 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_conv_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(16 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(16 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "num_features": {
                    "value": "init_conv_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(16 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(16 * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "out_conv1_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(160 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(96 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_conv1_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(960 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(576 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "num_features": {
                    "value": "out_conv1_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(960 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(576 * multiplier)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "out_conv2_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(960 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(576 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_conv2_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(1280 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(1280 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_238": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_239": {
                "in_channels": {
                    "value": "out_conv2_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_make_divisible(1280 * multiplier)",
                            "Call"
                        ],
                        [
                            "_make_divisible(1280 * multiplier)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_142": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_211": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_235": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/resnet56_gkt/resnet_client.py": {
        "torch": {
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_139": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_143": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_216": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_240": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/resnet56_gkt/resnet_pretrained.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_142": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_216": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_240": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_216": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_240": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/resnet56_gkt/resnet_server.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_142": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_210": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/resnet_gn.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_127": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/cv/vgg.py": {
        "torch": {
            "AdaptiveAvgPool2d_23": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ],
                        [
                            "int(v)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ],
                        [
                            "int(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/finance/vfl_classifier.py": {
        "torch": {
            "Sequential_7": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=output_dim, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_8": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/model/finance/vfl_feature_extractor.py": {
        "torch": {
            "Sequential_7": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_8": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/finance/vfl_models_standalone.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=output_dim, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(grads).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(grads).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(grads).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(grads).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/linear/lr.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/linear/test.py": {
        "torch": {
            "Linear_5": {
                "variable": {
                    "value": "connected_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_8": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/model/nlp/rnn.py": {
        "torch": {
            "Embedding_20": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "90",
                            "MethodArgument"
                        ],
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_21": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "90",
                            "MethodArgument"
                        ],
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "extended_vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab_size + 3 + num_oov_buckets",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_60": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "latent_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "670",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "670",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "extended_vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab_size + 3 + num_oov_buckets",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(final_hidden_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(fc1_output)",
                            "Call"
                        ],
                        [
                            "torch.transpose(output, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/classical_vertical_fl/party_models.py": {
        "torch": {
            "BCEWithLogitsLoss_20": {
                "variable": {
                    "value": "self.classifier_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dense_model.forward(temp_K_Z)",
                            "Call"
                        ],
                        [
                            "U + comp",
                            "BinOp"
                        ],
                        [
                            "self.K_U",
                            "Attribute"
                        ],
                        [
                            "U + grad_comp",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(U, requires_grad=True).float()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y)",
                            "Call"
                        ],
                        [
                            "y.type_as(U)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_66": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "class_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier_criterion(U, y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dense_model.forward(temp_K_Z)",
                            "Call"
                        ],
                        [
                            "U + comp",
                            "BinOp"
                        ],
                        [
                            "self.K_U",
                            "Attribute"
                        ],
                        [
                            "U + grad_comp",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(U, requires_grad=True).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/standalone/decentralized/client_dsgd.py": {
        "torch": {
            "SGD_26": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCELoss_27": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.streaming_data[iteration_id]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.streaming_data[iteration_id]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_66": {
                "variable": {
                    "value": "grads_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(outputs, train_y)",
                            "Call"
                        ],
                        [
                            "self.criterion(outputs, train_y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/decentralized/client_pushsum.py": {
        "torch": {
            "SGD_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCELoss_28": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.streaming_data[iteration_id]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.streaming_data[iteration_id]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_80": {
                "variable": {
                    "value": "grads_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(outputs, train_y)",
                            "Call"
                        ],
                        [
                            "self.criterion(outputs, train_y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedavg/fedavg_api.py": {
        "torch": {
            "Subset_96": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_global.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(range(test_data_num), min(num_samples, test_data_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "sample_testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.test_global.dataset, sample_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedavg/my_model_trainer.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_76": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_96": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/standalone/fedavg/my_model_trainer_classification.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_67": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_76": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__44": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedavg/my_model_trainer_nwp.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_65": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_74": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/standalone/fedavg/my_model_trainer_tag_prediction.py": {
        "torch": {
            "BCELoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_75": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedmc/fedmc_api.py": {
        "torch": {
            "Subset_101": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_global.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(range(test_data_num), min(num_samples, test_data_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "sample_testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.test_global.dataset, sample_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedmc/my_model_trainer_classification.py": {
        "torch": {
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_101": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__69": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fednova/client.py": {
        "torch": {
            "BCELoss_28": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_30": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_142": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_global(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/standalone/fednova/comm_helpers.py": {
        "torch": {
            "cat_22": {
                "variable": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in tensors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fednova/fednova.py": {
        "torch": {
            "tensor_160": {
                "variable": {
                    "value": "tau_eff_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.local_steps * self.ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "tau_eff_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.local_normalizing_vec * self.ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_108": {
                "variable": {
                    "value": "param_state[old_init]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_130": {
                "variable": {
                    "value": "param_state[cum_grad]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "clone_115": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "clone_183": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['cum_grad']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fednova/fednova_trainer.py": {
        "torch": {
            "clone_114": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cum_grad[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedopt/fedopt_api.py": {
        "torch": {
            "Subset_58": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_global.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(range(test_data_num), min(num_samples, test_data_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "sample_testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.test_global.dataset, sample_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedopt/my_model_trainer_classification.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_67": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_76": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__44": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedopt/my_model_trainer_nwp.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_67": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_76": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/standalone/fedopt/my_model_trainer_tag_prediction.py": {
        "torch": {
            "BCELoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_75": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_91": {
                "variable": {
                    "value": "predicted_topk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedopt/optrepo.py": {
        "torch": {}
    },
    "fedml_api/standalone/fedprox/fedprox_api.py": {
        "torch": {
            "Subset_96": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_global.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(range(test_data_num), min(num_samples, test_data_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "sample_testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.test_global.dataset, sample_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedprox/my_model_trainer.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_76": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_96": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/standalone/fedprox/my_model_trainer_classification.py": {
        "torch": {
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_84": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__61": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedprox/my_model_trainer_nwp.py": {
        "torch": {
            "CrossEntropyLoss_33": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_74": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_22": {
                "input": {
                    "value": "old_para[name] - param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_83": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_api/standalone/fedprox/my_model_trainer_tag_prediction.py": {
        "torch": {
            "BCELoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_75": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedsp/fedsp_api.py": {
        "torch": {
            "Subset_96": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_global.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "sample_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(range(test_data_num), min(num_samples, test_data_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "sample_testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.test_global.dataset, sample_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/fedsp/my_model_trainer_classification.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_83": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_92": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/hierarchical_fl/client.py": {
        "torch": {
            "SGD_13": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_15": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/turboaggregate/TA_client.py": {
        "torch": {
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_api/standalone/turboaggregate/TA_trainer.py": {
        "torch": {
            "CrossEntropyLoss_162": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_170": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_global(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_core/robustness/robust_aggregation.py": {
        "torch": {
            "cat_9": {
                "tensors": {
                    "value": "weight_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "norm_44": {
                "variable": {
                    "value": "weight_diff_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vec_local_weight - vec_global_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_52": {
                "*size": {
                    "value": "local_weight.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/FedAvgExp/MNIST-CNN-Non-IID.py": {
        "torch": {
            "from_numpy_230": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_231": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_290": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x, batched_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y, batched_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_305": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/centralized/main.py": {
        "torch": {
            "manual_seed_349": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_350": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_374": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(gpu_util[args.rank])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_376": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_model(args, model_name=args.model, output_dim=dataset[7])",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[gpu_util[args.rank]], output_device=gpu_util[args.rank])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "LogisticRegression(28 * 28, output_dim)",
                            "Call"
                        ],
                        [
                            "CNN_DropOut(False)",
                            "Call"
                        ],
                        [
                            "resnet18()",
                            "Call"
                        ],
                        [
                            "RNN_OriginalFedAvg()",
                            "Call"
                        ],
                        [
                            "RNN_OriginalFedAvg()",
                            "Call"
                        ],
                        [
                            "LogisticRegression(10004, output_dim)",
                            "Call"
                        ],
                        [
                            "RNN_StackOverFlow()",
                            "Call"
                        ],
                        [
                            "resnet56(class_num=output_dim)",
                            "Call"
                        ],
                        [
                            "mobilenet(class_num=output_dim)",
                            "Call"
                        ],
                        [
                            "MobileNetV3(model_mode='LARGE', num_classes=output_dim)",
                            "Call"
                        ],
                        [
                            "EfficientNet.from_name(model_name='efficientnet-b0', num_classes=output_dim)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[gpu_util[args.rank]]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "gpu_util[args.rank]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.gpu_util.split(',')",
                            "Call"
                        ],
                        [
                            "[int(item.strip()) for item in gpu_util]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_379": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_310": {
                "device": {
                    "value": "gpu_util[args.rank]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/base/main_base.py": {
        "torch": {
            "manual_seed_62": {
                "seed": {
                    "value": "worker_number",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/decentralized_demo/main_decentralized.py": {
        "torch": {
            "manual_seed_60": {
                "seed": {
                    "value": "worker_number",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/fed_launch/main.py": {
        "torch": {
            "device_341": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(process_gpu_dict[process_ID - 1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_333": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_349": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_372": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_util_map[process_id][1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_419": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_420": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/fedall/main_fedavg.py": {
        "torch": {
            "device_288": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(process_gpu_dict[process_ID - 1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_309": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_util_map[process_id][1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_280": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_356": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_357": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/fedavg/main_fedavg.py": {
        "torch": {
            "manual_seed_303": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_304": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/fedavg_robust/main_fedavg_robust.py": {
        "torch": {
            "device_187": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(process_gpu_dict[process_ID - 1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_230": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_231": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/fedgkt/main_fedgkt.py": {
        "torch": {
            "device_183": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(process_gpu_dict[process_ID - 1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_175": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_226": {
                "seed": {
                    "value": "np.random.randint(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/fednas/main_fednas.py": {
        "torch": {
            "device_117": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(process_gpu_dict[process_ID - 1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_156": {
                "seed": {
                    "value": "worker_number",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/fedopt/main_fedopt.py": {
        "torch": {
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(process_gpu_dict[process_ID - 1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_168": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_224": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/distributed/split_nn/main_split_nn.py": {
        "torch": {
            "device_86": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(process_gpu_dict[process_ID - 1]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "client_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*nn.ModuleList(model.children())[:split_layer]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "server_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*nn.ModuleList(model.children())[split_layer:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_108": {
                "seed": {
                    "value": "worker_number",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Flatten_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "fc_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "modules": {
                    "value": "model.children()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "modules": {
                    "value": "model.children()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/FedAvgExp/MNIST-CNN-Non-IID.py": {
        "torch": {
            "from_numpy_230": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_231": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_290": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x, batched_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y, batched_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_305": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/decentralized/main_dol.py": {
        "torch": {
            "manual_seed_66": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "fedml_experiments/standalone/fedavg/main_fedavg.py": {
        "torch": {
            "from_numpy_231": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_290": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x, batched_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y, batched_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_305": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/fedmc/fedmc_main.py": {
        "torch": {
            "device_139": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_133": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/fednova/main_fednova.py": {
        "torch": {
            "from_numpy_136": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_164": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x, batched_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y, batched_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_177": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/fedopt/main_fedopt.py": {
        "torch": {
            "device_198": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_216": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/fedprox/main_fedprox.py": {
        "torch": {
            "from_numpy_235": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_300": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x, batched_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y, batched_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_309": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_310": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/fedprox/main_fedprox_cifar10.py": {
        "torch": {
            "from_numpy_234": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_302": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x, batched_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y, batched_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_311": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_312": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/fedprox/main_fedprox_shakespeare.py": {
        "torch": {
            "from_numpy_235": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_300": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "full_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_x, batched_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "full_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_y, batched_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_309": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_310": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/fedsp/fedsp_main.py": {
        "torch": {
            "device_139": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_133": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fedml_experiments/standalone/hierarchical_fl/main.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}