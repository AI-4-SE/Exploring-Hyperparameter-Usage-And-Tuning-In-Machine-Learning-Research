{
    "add_noise_interiornet.py": {
        "torch": {
            "rand_49": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_52": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_56": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/dataloader.py": {
        "torch": {}
    },
    "evaluation/noise.py": {
        "torch": {
            "arange_6": {
                "variable": {
                    "value": "v_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "u_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_24": {
                "variable": {
                    "value": "offseted[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "offseted[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_25": {
                "variable": {
                    "value": "offseted[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "offseted[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_28": {
                "variable": {
                    "value": "resampled_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth.reshape(h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "linear_offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "offsets.reshape(h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "resampled_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "35130.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_31": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "baseline / (resampled_depth * 100.0) + depth_distribution + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_36": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_37": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_17": {
                "tensors": {
                    "value": "(u_range, v_range)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_22": {
                "input": {
                    "value": "uvgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_image_domain_grid(w, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_29": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_40": {
                "input": {
                    "value": "-0.5 * rand * rand",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "exporters/image.py": {
        "torch": {}
    },
    "exporters/point_cloud.py": {
        "torch": {
            "arange_33": {
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_41": {
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_34": {
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_42": {
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "importers/extrinsics.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "extrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros([4, 4])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "importers/image.py": {
        "torch": {
            "from_numpy_17": {
                "ndarray": {
                    "value": "depth_data.reshape(1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "depth_data.reshape(1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_9": {
                "ndarray": {
                    "value": "color_data.reshape(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "importers/intrinsics.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "intrinsics_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.array(intrinsics_dict[name])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "device_114": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpus[0]) if torch.cuda.is_available() and len(gpus) > 0 and (gpus[0] >= 0) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/model_utils.py": {
        "torch": {
            "Sequential_8": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_53": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_92": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(raw_out - bias_view, self.mask_ratio) + bias_view",
                            "BinOp"
                        ],
                        [
                            "torch.mul(output, self.update_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(raw_out, self.mask_ratio)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_94": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(PartialConv2d, self).forward(torch.mul(input, mask) if mask_in is not None else input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_10": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_in",
                            "variable"
                        ],
                        [
                            "torch.ones(input.data.shape[0], input.data.shape[1], input.data.shape[2], input.data.shape[3]).to(input)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, input.data.shape[2], input.data.shape[3]).to(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_85": {
                "variable": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_133": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_147": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_87": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_in",
                            "variable"
                        ],
                        [
                            "torch.ones(input.data.shape[0], input.data.shape[1], input.data.shape[2], input.data.shape[3]).to(input)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, input.data.shape[2], input.data.shape[3]).to(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_91": {
                "input": {
                    "value": "raw_out - bias_view",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ELU_135": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_75": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input.data.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input.data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input.data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/shallow_partial.py": {
        "torch": {
            "cat_75": {
                "variable": {
                    "value": "out_post_up_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, out_pre_ds_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "out_post_up_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, out_pre_ds_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "out_post_up_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, out_pre_ds_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "supervision/loss_ops.py": {
        "torch": {
            "sum_27": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inout[key]['color']['splatted'] != 0).detach().type(inout[key]['color']['splatted'].dtype)",
                            "Call"
                        ],
                        [
                            "(inout[k]['color']['splatted'] != 0).detach().type(inout[k]['color']['splatted'].dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_42": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inout[key]['color']['splatted'] != 0).detach().type(inout[key]['color']['splatted'].dtype)",
                            "Call"
                        ],
                        [
                            "(inout[k]['color']['splatted'] != 0).detach().type(inout[k]['color']['splatted'].dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_29": {
                "input": {
                    "value": "masked_color - inout[key]['color']['splatted']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "l1_l_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * torch.abs(masked_color - inout[key]['color']['splatted'])",
                            "BinOp"
                        ],
                        [
                            "L1_Charbonnier_premasked(l1_l_map, epsilon_squared=0.2)",
                            "Call"
                        ],
                        [
                            "l1_l_map + l1_l_map_k",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_33": {
                "input": {
                    "value": "1 - ssim_loss(inout[key]['color']['splatted'], masked_color, kernel_size=kernel_size, std=std, mode=mode) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "ssim_l_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * torch.clamp(1 - ssim_loss(inout[key]['color']['splatted'], masked_color, kernel_size=kernel_size, std=std, mode=mode) / 2, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tukey_loss_map(ssim_l_map)",
                            "Call"
                        ],
                        [
                            "ssim_l_map + ssim_l_map_k",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_44": {
                "input": {
                    "value": "masked_color - inout[k]['color']['splatted']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "l1_l_map_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * torch.abs(masked_color - inout[k]['color']['splatted'])",
                            "BinOp"
                        ],
                        [
                            "L1_Charbonnier_premasked(l1_l_map_k, epsilon_squared=0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_49": {
                "input": {
                    "value": "1 - ssim_loss(inout[k]['color']['splatted'], masked_color, kernel_size=kernel_size, std=std, mode=mode) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "ssim_l_map_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * torch.clamp(1 - ssim_loss(inout[k]['color']['splatted'], masked_color, kernel_size=kernel_size, std=std, mode=mode) / 2, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tukey_loss_map(ssim_l_map_k)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "supervision/losses.py": {
        "torch": {
            "sum_10": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((depth < max_threshold) & (depth > min_threshold)).detach().type(depth.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_15": {
                "variable": {
                    "value": "abs_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt - pred",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_25": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map_loss * map_loss + epsilon_squared",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_36": {
                "variable": {
                    "value": "extended_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "non_zero_neighbours",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 1, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_43": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(extended_normals[:, :, :-2, :-2] * pred_normals, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_81": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c ** 2 / 6 * (1.0 - (1.0 - (x / c) ** 2) ** 3)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y, 0, c ** 2 / 6)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "c ** 2 / 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_46": {
                "input": {
                    "value": "torch.sum(extended_normals[:, :, :-2, 1:-1] * pred_normals, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_49": {
                "input": {
                    "value": "torch.sum(extended_normals[:, :, :-2, 2:] * pred_normals, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_52": {
                "input": {
                    "value": "torch.sum(extended_normals[:, :, 1:-1, :-2] * pred_normals, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_55": {
                "input": {
                    "value": "torch.sum(extended_normals[:, :, 1:-1, 2:] * pred_normals, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "torch.sum(extended_normals[:, :, 2:, :-2] * pred_normals, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_61": {
                "input": {
                    "value": "torch.sum(extended_normals[:, :, 2:, 1:-1] * pred_normals, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "torch.sum(extended_normals[:, :, 2:, 2:] * pred_normals, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "self.sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "self.count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_16": {
                "input": {
                    "value": "abs_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_22": {
                "input": {
                    "value": "masked_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_77": {
                "input": {
                    "value": "non_zero_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "negate_byte_mask(zero_mask).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_43": {
                "input": {
                    "value": "extended_normals[:, :, :-2, :-2] * pred_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "extended_normals[:, :, :-2, 1:-1] * pred_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "extended_normals[:, :, :-2, 2:] * pred_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "extended_normals[:, :, 1:-1, :-2] * pred_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "extended_normals[:, :, 1:-1, 2:] * pred_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "extended_normals[:, :, 2:, :-2] * pred_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "extended_normals[:, :, 2:, 1:-1] * pred_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "extended_normals[:, :, 2:, 2:] * pred_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "extended_normals[:, :, :-2, :-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "extended_normals[:, :, :-2, 1:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "extended_normals[:, :, :-2, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "extended_normals[:, :, 1:-1, :-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "extended_normals[:, :, 1:-1, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "extended_normals[:, :, 2:, :-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "extended_normals[:, :, 2:, 1:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "extended_normals[:, :, 2:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "supervision/masking.py": {
        "torch": {
            "sum_5": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((depth < max_threshold) & (depth > min_threshold)).detach().type(depth.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "supervision/normals.py": {
        "torch": {
            "pad_6": {
                "variable": {
                    "value": "points_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_8": {
                "variable": {
                    "value": "points_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_10": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_temp[:, :, :-1, :] - points_temp[:, :, 1:, :]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_temp[:, :, :, :-1] - points_temp[:, :, :, 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_14": {
                "input": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(dy, dx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "supervision/projections.py": {
        "torch": {
            "arange_5": {
                "variable": {
                    "value": "v_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_11": {
                "variable": {
                    "value": "u_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "homogeneous_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_homogeneous, y_homogeneous, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "homogeneous_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_20": {
                "tensors": {
                    "value": "(u_range, v_range, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "supervision/smoothness.py": {
        "torch": {
            "pad_6": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(tensor, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_12": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(tensor, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_19": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(tensor, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_26": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(tensor, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(tensor, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "supervision/splatting.py": {
        "torch": {
            "clamp_14": {
                "variable": {
                    "value": "clamped_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.11",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "6.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "half_horizontal_fov",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "horizontal_fov / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "half_vertical_fov",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "vertical_fov / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "variable": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_d * u_d + v_d * v_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_39": {
                "variable": {
                    "value": "r_ud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_u_ud * r_u_ud + r_v_ud * r_v_ud",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_41": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dist - torch.mean(dist)) / torch.std(dist)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_55": {
                "variable": {
                    "value": "u0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uvs[:, 0, :, :].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_57": {
                "variable": {
                    "value": "v0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uvs[:, 1, :, :].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "u0_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(u)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_61": {
                "variable": {
                    "value": "v0_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(v)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "u1_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_63": {
                "variable": {
                    "value": "v1_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_26": {
                "input": {
                    "value": "z_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normals[:, 2, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_26": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "dist * (dist < 3 * torch.std(dist)).type(dist.dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_15": {
                "input": {
                    "value": "2 * clamped_depth / max_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_37": {
                "input": {
                    "value": "half_horizontal_fov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(horizontal_fov / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tan_38": {
                "input": {
                    "value": "half_vertical_fov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(vertical_fov / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_41": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(r_d / r_ud).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.abs((dist - torch.mean(dist)) / torch.std(dist))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_41": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(r_d / r_ud).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.abs((dist - torch.mean(dist)) / torch.std(dist))",
                            "Call"
                        ]
                    ]
                }
            },
            "std_42": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(r_d / r_ud).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.abs((dist - torch.mean(dist)) / torch.std(dist))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "supervision/ssim.py": {
        "torch": {
            "mm_14": {
                "variable": {
                    "value": "gaussian2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gaussian1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__gaussian__(kernel_size, std).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gaussian1d.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "gaussian2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_23": {
                "variable": {
                    "value": "prediction_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__create_kernel__(kernel_size, data_type=prediction.type(), channels=channels, std=std)",
                            "Call"
                        ],
                        [
                            "kernel.to(prediction.get_device())",
                            "Call"
                        ],
                        [
                            "kernel.type_as(prediction)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_24": {
                "variable": {
                    "value": "groundtruth_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "groundtruth",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__create_kernel__(kernel_size, data_type=prediction.type(), channels=channels, std=std)",
                            "Call"
                        ],
                        [
                            "kernel.to(prediction.get_device())",
                            "Call"
                        ],
                        [
                            "kernel.type_as(prediction)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_10": {
                "data": {
                    "value": "gaussian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.array([math.exp(-(x - kernel_size // 2) ** 2 / float(2 * std ** 2)) for x in range(kernel_size)])",
                            "Call"
                        ],
                        [
                            "gaussian / numpy.sum(gaussian)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_82": {
                "input": {
                    "value": "ssim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numerator / denominator",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad, pad, pad, pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "prediction * prediction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__create_kernel__(kernel_size, data_type=prediction.type(), channels=channels, std=std)",
                            "Call"
                        ],
                        [
                            "kernel.to(prediction.get_device())",
                            "Call"
                        ],
                        [
                            "kernel.type_as(prediction)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_32": {
                "input": {
                    "value": "groundtruth * groundtruth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__create_kernel__(kernel_size, data_type=prediction.type(), channels=channels, std=std)",
                            "Call"
                        ],
                        [
                            "kernel.to(prediction.get_device())",
                            "Call"
                        ],
                        [
                            "kernel.type_as(prediction)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_34": {
                "input": {
                    "value": "prediction * groundtruth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__create_kernel__(kernel_size, data_type=prediction.type(), channels=channels, std=std)",
                            "Call"
                        ],
                        [
                            "kernel.to(prediction.get_device())",
                            "Call"
                        ],
                        [
                            "kernel.type_as(prediction)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_67": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_68": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_73": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_74": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_75": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "supervision/transformations.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "DataLoader_81": {
                "variable": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data_iterator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.dataloader.DataLoad(train_data_params)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.batch_size // len(gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data_iterator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.dataloader.DataLoad(test_data_params)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.test_batch_size // len(gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.get_model(model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DataParallel(model, gpus)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(id) for id in args.gpu.split(',') if int(id) >= 0]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/checkpoint.py": {
        "torch": {
            "save_8": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path.join(save_path, name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/framework.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpus[0]) if torch.cuda.is_available() and len(gpus) > 0 and (gpus[0] >= 0) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_45": {
                "variable": {
                    "value": "opt_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.opt_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/init.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'xavier'",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "{'cuda:1': 'cuda:0'}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "utils/opt.py": {
        "torch": {
            "Adam_36": {
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt_params.get_learning_rate()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt_params.get_momentum(), opt_params.get_momentum2())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt_params.get_epsilon()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt_params.get_weight_decay()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualization.py": {
        "torch": {}
    }
}