{
    "actor.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Event_43": {
                "variable": {
                    "value": "self.completion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_62": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.log_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs, device=device, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.double",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs, device=device, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.double",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(r, device=device, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.double",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(d, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "learner.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "softmax_312": {
                "variable": {
                    "value": "policy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_313": {
                "variable": {
                    "value": "log_policy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_318": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.flatten(actions)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[*self.policy.parameters(), *self.value_fn.parameters()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hp.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_42": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda epoch: 0.95",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Event_51": {
                "variable": {
                    "value": "self.completion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_289": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.log_path / Path(f'IMPALA_{self.hp.env_name}_l{self.id}_{update_count + 1}.pt')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_314": {
                "input": {
                    "value": "policy * log_policy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_321": {
                "input": {
                    "value": "cross_entropy * advantages.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "{'policy_state_dict': self.policy.state_dict(), 'value_fn_state_dict': self.value_fn.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.log_path / Path(f'IMPALA_{self.hp.env_name}_l{self.id}_{update_count + 1}.pt')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nll_loss_299": {
                "input": {
                    "value": "F.log_softmax(policy_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.flatten(actions)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_307": {
                "input": {
                    "value": "advantages ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_72": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.log_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.double",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj.obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_106": {
                "variable": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_159": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(1, device=device, dtype=dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.add(loss, traj_loss / self.hp.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "traj_loss / self.hp.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__176": {
                "parameters": {
                    "value": "self.policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.hp.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__179": {
                "parameters": {
                    "value": "self.value_fn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.hp.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_319": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_121": {
                "variable": {
                    "value": "imp_sampling",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_log_probs - traj_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "imp_sampling",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_124": {
                "variable": {
                    "value": "rho",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "imp_sampling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(curr_log_probs - traj_log_probs).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.hp.rho_bar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_125": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "imp_sampling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(curr_log_probs - traj_log_probs).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.hp.c_bar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "vt",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "traj_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.double",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_131": {
                "variable": {
                    "value": "vt",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "vt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(traj_len + 1, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.add(vt, v)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.value_fn(obs).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_300": {
                "input": {
                    "value": "policy_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_319": {
                "input": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(traj.a)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_108": {
                "input": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(traj.r)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_117": {
                "tensors": {
                    "value": "traj.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_301": {
                "input": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(traj.a)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "traj.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(obs_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(obs_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_30": {
                "variable": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.forward(obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_32": {
                "variable": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.forward(obs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "p": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.policy_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs, device=device, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.double",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(obs, device=device, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.double",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}