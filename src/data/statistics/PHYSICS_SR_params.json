{
    "code/data/__init__.py": {
        "torch": {}
    },
    "code/data/benchmark.py": {
        "torch": {}
    },
    "code/data/common.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_transpose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(img.transpose((2, 0, 1)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/data/demo.py": {
        "torch": {}
    },
    "code/data/div2k.py": {
        "torch": {}
    },
    "code/data/srdata.py": {
        "torch": {}
    },
    "code/dataloader.py": {
        "torch": {
            "set_num_threads_34": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_102": {
                "variable": {
                    "value": "maybe_device_id",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/loss/__init__.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.log, torch.zeros(1, len(self.loss)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_138": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_125": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_25": {
                "variable": {
                    "value": "loss_function",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "os.path.join(apath, 'loss.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_27": {
                "variable": {
                    "value": "loss_function",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.loss)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/loss/adversarial.py": {
        "torch": {
            "Adam_20": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_69": {
                "variable": {
                    "value": "loss_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_for_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.discriminator(fake)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(d_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_35": {
                "variable": {
                    "value": "label_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.discriminator(fake_detach)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_36": {
                "variable": {
                    "value": "label_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.discriminator(real)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_38": {
                "input": {
                    "value": "d_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.discriminator(fake_detach)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(d_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_39": {
                "input": {
                    "value": "d_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.discriminator(real)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(d_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_43": {
                "variable": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "grad_47": {
                "outputs": {
                    "value": "d_hat.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fake_detach.mul(1 - epsilon) + real.mul(epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/loss/discriminator.py": {
        "torch": {
            "LeakyReLU_14": {
                "variable": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_features",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_classifier",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "out_channels * patch_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/loss/vgg.py": {
        "torch": {
            "mse_loss_34": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "vgg_sr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_forward(sr)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "vgg_hr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_forward(hr.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules[:8]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules[:35]",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/main.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/__init__.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "output_cat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sr_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[sr_lists[i][0] for i in range(len(sr_lists))]",
                            "ListComp"
                        ],
                        [
                            "[forward_function(aug) for aug in lr_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_29": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "target.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_latest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_203": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_74": {
                "obj": {
                    "value": "target.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_best.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "target.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "lr_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lr_list[i:i + n_GPUs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_latest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_best.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_{}.pt'.format(resume))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "pre_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'.'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "code/model/common.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_18": {
                "variable": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_20": {},
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "n_feat",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "PixelShuffle_65": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PixelShuffle_70": {
                "upscale_factor": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "n_feat",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "n_feat",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/ddbpn.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(inter_channels, nr, scale, up), nn.PReLU(nr)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(nr, inter_channels, scale, not up), nn.PReLU(inter_channels)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(inter_channels, nr, scale, up), nn.PReLU(nr)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.initial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*initial",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.upmodules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.downmodules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reconstruction",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(in_channels, nr, 1), nn.PReLU(nr)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_82": {
                "num_parameters": {
                    "value": "n0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "n0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_84": {
                "num_parameters": {
                    "value": "nr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.depth * nr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "h_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "l_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_44": {
                "num_parameters": {
                    "value": "nr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "PReLU_48": {
                "num_parameters": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nr",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "PReLU_52": {
                "num_parameters": {
                    "value": "nr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "h_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_35": {
                "num_parameters": {
                    "value": "nr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "code/model/edsr.py": {
        "torch": {
            "ReLU_16": {
                "variable": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/model/mdsr.py": {
        "torch": {
            "ReLU_16": {
                "variable": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.pre_process",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(common.ResBlock(conv, n_feats, 5, act=act), common.ResBlock(conv, n_feats, 5, act=act)) for _ in args.scale]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[common.Upsampler(conv, s, n_feats, act=False) for s in args.scale]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "common.ResBlock(conv, n_feats, 5, act=act)",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/model/physics_sr.py": {
        "torch": {
            "ReLU_19": {
                "variable": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.head_refine1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.body_refine1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.tail_refine1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail_refine",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.head_refine2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.body_refine2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.tail_refine2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail_refine",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.gaussian_blur",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "gaussian_blur_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.ceil(gaussian_blur_sigma * 3) * 2 + 1)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((gaussian_blur_kernel_size - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/tools/jpeg2binary.py": {
        "torch": {
            "Tensor_38": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_47": {
                "obj": {
                    "value": "pack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "targetDir + '/pack.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor(png.astype(float)).byte()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(targetDir, idx + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/trainer.py": {
        "torch": {
            "device_143": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "os.path.join(ckp.dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/utility.py": {
        "torch": {
            "Tensor_45": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.log, log]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "StepLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "my_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "step_size": {
                    "value": "args.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_84": {
                "obj": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'psnr_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "trainer.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_184": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "my_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "milestones": {
                    "value": "milestones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.decay_type.split('_')",
                            "Call"
                        ],
                        [
                            "list(map(lambda x: int(x), milestones))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/psnr_log.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}