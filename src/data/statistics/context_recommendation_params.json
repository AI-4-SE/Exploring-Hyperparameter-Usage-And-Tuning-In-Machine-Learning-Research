{
    "scripts/contextual_macdae_yelp.py": {
        "sklearn": {
            "KMeans_84": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TSNE_94": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "DEFINE_string_31": {
                "name": {
                    "value": "pretrain_model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "pretrain_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "os.path.join(folder_path, 'model/pretrain_macdae_yelp_%s' % model_head_num)",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_190": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/metric.py": {
        "sklearn": {
            "LabelBinarizer_97": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/recommd_context_pretrain_yelp.py": {
        "sklearn": {
            "roc_auc_score_423": {
                "variable": {
                    "value": "auc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(y_true, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.concatenate(y_pred, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "matmul_124": {
                "variable": {
                    "value": "deep_final",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "deep_output",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "deep_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_weights_with_regularizer([deep_output_dim, output_y_dim], name='output_w', regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_186": {
                "variable": {
                    "value": "deep_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[user_imp, item_imp, sparse_imp, u_i_ids_imp, i_u_ids_imp, dense_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_242": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "weight_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal([wide_dim, wide_embed_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_103": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weight_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=tf.random_normal([wide_dim, wide_embed_dim]), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "wide_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_weights_with_regularizer([input_dim, output_dim], name='weight_%d' % i, regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(weight_embedding, wide_feature, None)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.total_sparse_id, config.total_sparse_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_160": {
                "variable": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "user_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_162": {
                "variable": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_164": {
                "variable": {
                    "value": "sparse_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "sparse_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sparse_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, sparse_feature)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_167": {
                "variable": {
                    "value": "u_i_ids_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "u_i_ids_sparse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "variable": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u_i_ids_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, u_i_ids_sparse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_170": {
                "variable": {
                    "value": "i_u_ids_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "i_u_ids_sparse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "variable": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "i_u_ids_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, i_u_ids_sparse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_277": {
                "variable": {
                    "value": "self._user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_278": {
                "variable": {
                    "value": "self._item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_279": {
                "variable": {
                    "value": "self._sparse_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "self._dense_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, input_dense_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_281": {
                "variable": {
                    "value": "self._u_i_ids_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "u_i_ids_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_282": {
                "variable": {
                    "value": "self._i_u_ids_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "i_u_ids_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_286": {
                "variable": {
                    "value": "self._Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, output_y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_297": {
                "variable": {
                    "value": "self.prediction_result",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "output_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_299": {
                "variable": {
                    "value": "self._correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.argmax(self.logits, 1), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(tf.argmax(self._Y, 1), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_301": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_306": {
                "variable": {
                    "value": "self._cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=self._Y, logits=self.logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DEFINE_string_516": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "data_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(folder_path, 'data/yelp/yelp-dataset')",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_517": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(folder_path, 'model/wide_deep_yelp_%s' % model_name)",
                            "Call"
                        ]
                    ]
                },
                "help": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_641": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "wide",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_125": {
                "x": {
                    "value": "deep_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(deep_output, deep_weight)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "wide_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wide_part(sparse_feature, config.input_wide_dim, config.input_wide_embed_dim, name='wide_output')",
                            "Call"
                        ],
                        [
                            "wide_part(sparse_feature, config.input_wide_dim, config.input_wide_embed_dim, name='wide_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_317": {
                "variable": {
                    "value": "self._train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_318": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdagradOptimizer_320": {
                "variable": {
                    "value": "self._train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_321": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_635": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_string_684": {
                "name": {
                    "value": "pretrain_model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "pretrain_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ],
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ],
                        [
                            "FLAGS.pretrain_model_name",
                            "Attribute"
                        ],
                        [
                            "'base'",
                            "str"
                        ]
                    ]
                },
                "help": {
                    "value": "pretrain_model_name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_685": {
                "name": {
                    "value": "eval_mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "eval_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.argv[2]",
                            "Subscript"
                        ],
                        [
                            "FLAGS.eval_mode",
                            "Attribute"
                        ]
                    ]
                },
                "help": {
                    "value": "eval_mode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_297": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_299": {
                "x": {
                    "value": "tf.argmax(self._Y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_306": {
                "labels": {
                    "value": "self._Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_299": {
                "input": {
                    "value": "self._Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_587": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "latest_checkpoint_644": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_647": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_80": {
                "x": {
                    "value": "tf.matmul(input_x, weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_bias_with_regularizer([output_dim], name='bias_%d' % i, regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_596": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_op_673": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_80": {
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_weights_with_regularizer([input_dim, output_dim], name='weight_%d' % i, regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(weight_embedding, wide_feature, None)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_84": {
                "x": {
                    "value": "tf.matmul(prev_layer, weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_bias_with_regularizer([output_dim], name='bias_%d' % i, regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_86": {
                "x": {
                    "value": "tf.matmul(prev_layer, weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_bias_with_regularizer([output_dim], name='bias_%d' % i, regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_606": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "a": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[len(hidden) - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_weights_with_regularizer([input_dim, output_dim], name='weight_%d' % i, regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(weight_embedding, wide_feature, None)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "a": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[len(hidden) - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_weights_with_regularizer([input_dim, output_dim], name='weight_%d' % i, regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(weight_embedding, wide_feature, None)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/MultiHeadDenoisingAutoencoder.py": {
        "tensorflow": {
            "concat_44": {
                "variable": {
                    "value": "hidden_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hidden_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_47": {
                "variable": {
                    "value": "reconstruction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden_merge, network_weights['w2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "network_weights['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[user_imp, item_imp, sparse_imp, u_i_ids_imp, i_u_ids_imp, prod_vector, dense_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_279": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_22": {
                "variable": {
                    "value": "all_weights[w2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_hidden, n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "all_weights[b2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.total_sparse_id, config.total_sparse_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_77": {
                "variable": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "user_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "embedding_lookup_79": {
                "variable": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "embedding_lookup_81": {
                "variable": {
                    "value": "sparse_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "sparse_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sparse_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, sparse_feature)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_84": {
                "variable": {
                    "value": "u_i_ids_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "u_i_ids_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u_i_ids_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, u_i_ids_sparse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_87": {
                "variable": {
                    "value": "i_u_ids_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "i_u_ids_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "i_u_ids_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, i_u_ids_sparse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "self.sparse_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self.dense_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config.input_dense_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self.u_i_ids_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "u_i_ids_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.i_u_ids_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "i_u_ids_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_155": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_269": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask_noise_autoencoder'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "all_weights[weight_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'w1_%d' % index",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_input, n_head_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_20": {
                "variable": {
                    "value": "all_weights[bias_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_head_hidden], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'b1_%d' % index",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_47": {
                "a": {
                    "value": "hidden_merge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(hidden_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "network_weights['w2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_22": {
                "shape": {
                    "value": "[n_hidden, n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "shape": {
                    "value": "[n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_39": {
                "x": {
                    "value": "tf.matmul(tf.nn.dropout(x, keep_prob), network_weights[weight_key_i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "network_weights[bias_key_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_100": {
                "x": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_149": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.reconstruction, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "pretrain_var_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pretrain_model_scope'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_289": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "shape": {
                    "value": "[n_head_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "tf.nn.dropout(x, keep_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "network_weights[weight_key_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_99": {
                "x": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_149": {
                "x": {
                    "value": "tf.subtract(self.reconstruction, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "latest_checkpoint_272": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_39": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_98": {
                "x": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_149": {
                "x": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_97": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_96": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_95": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_94": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_93": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_91": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_92": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/MultiHeadVariationalAutoencoder.py": {
        "tensorflow": {
            "concat_68": {
                "variable": {
                    "value": "z_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "z_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "z_mean_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "z_mean_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "z_log_sigma_sq_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "z_log_sigma_sq_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_73": {
                "variable": {
                    "value": "reconstruction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(z_merge, network_weights['w2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "network_weights['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[user_imp, item_imp, sparse_imp, u_i_ids_imp, i_u_ids_imp, prod_vector, dense_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "all_weights[w2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_hidden, n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "all_weights[b2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_53": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, network_weights[mean_weight_key])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "network_weights[mean_bias_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_58": {
                "variable": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, network_weights[log_sigma_weight_key])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "network_weights[log_sigma_bias_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_62": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, network_weights[mean_weight_key]), network_weights[mean_bias_key])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(tf.sqrt(tf.exp(z_log_sigma_sq)), eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.total_sparse_id, config.total_sparse_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_106": {
                "variable": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "user_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "embedding_lookup_108": {
                "variable": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "embedding_lookup_110": {
                "variable": {
                    "value": "sparse_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "sparse_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sparse_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, sparse_feature)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_113": {
                "variable": {
                    "value": "u_i_ids_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "u_i_ids_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u_i_ids_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, u_i_ids_sparse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_116": {
                "variable": {
                    "value": "i_u_ids_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "i_u_ids_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "i_u_ids_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, i_u_ids_sparse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.sparse_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "self.dense_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config.input_dense_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.u_i_ids_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "u_i_ids_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "self.i_u_ids_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "i_u_ids_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "variable": {
                    "value": "self.reconstr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconstr_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(tf.pow(tf.subtract(self.reconstruction, self.x), 2.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_178": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconstr_loss + latent_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_182": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_327": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'variational_autoencoder'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "all_weights[mean_weight_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_weight_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'w1_%d' % index",
                            "BinOp"
                        ],
                        [
                            "'w1_%d' % index",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_input, n_hidden_head]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "all_weights[mean_bias_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_hidden_head], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_bias_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'b1_%d' % index",
                            "BinOp"
                        ],
                        [
                            "'b1_%d' % index",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "all_weights[log_sigma_weight_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "log_sigma_weight_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'log_sigma_w1_%d' % index",
                            "BinOp"
                        ],
                        [
                            "'log_sigma_w1_%d' % index",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_input, n_hidden_head]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "all_weights[log_sigma_bias_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_hidden_head], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "log_sigma_bias_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'log_sigma_b1_%d' % index",
                            "BinOp"
                        ],
                        [
                            "'log_sigma_b1_%d' % index",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'variational_autoencoder'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "a": {
                    "value": "z_merge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(z_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "network_weights['w2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_32": {
                "shape": {
                    "value": "[n_hidden, n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "shape": {
                    "value": "[n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "network_weights[mean_weight_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "network_weights[log_sigma_weight_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_61": {
                "values": {
                    "value": "[tf.shape(x)[0], n_hidden_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_62": {
                "x": {
                    "value": "tf.sqrt(tf.exp(z_log_sigma_sq))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.stack([tf.shape(x)[0], n_hidden_head]), 0, 1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_128": {
                "x": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.reconstruction, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_175": {
                "input_tensor": {
                    "value": "1 + self.z_log_sigma_sq_merge - tf.square(self.z_mean_merge) - tf.exp(self.z_log_sigma_sq_merge)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "pretrain_var_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pretrain_model_scope'",
                            "Method Argument"
                        ],
                        [
                            "'pretrain_model_scope'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "shape": {
                    "value": "[n_hidden_head]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "shape": {
                    "value": "[n_hidden_head]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_62": {
                "x": {
                    "value": "tf.exp(z_log_sigma_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_170": {
                "x": {
                    "value": "tf.subtract(self.reconstruction, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "latest_checkpoint_330": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_62": {
                "x": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, network_weights[log_sigma_weight_key]), network_weights[log_sigma_bias_key])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_126": {
                "x": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_170": {
                "x": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_177": {
                "x": {
                    "value": "self.z_log_sigma_sq_merge",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_125": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_176": {
                "x": {
                    "value": "self.z_mean_merge",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_124": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_123": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_122": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_121": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_119": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_120": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/macDAE.py": {
        "tensorflow": {
            "matmul_56": {
                "variable": {
                    "value": "x_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "construct_input(user_id, item_id, sparse_feature, dense_feature, u_i_ids_sparse, i_u_ids_sparse, self.config)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_weights([n_input, head_dim], name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_62": {
                "variable": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "dot_prod_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(dot_prod_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "hidden_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hidden_merge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_73": {
                "variable": {
                    "value": "reconstruction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden_merge, network_weights['w2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "network_weights['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l2_normalize_110": {
                "variable": {
                    "value": "norm_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "construct_input(user_id, item_id, sparse_feature, dense_feature, u_i_ids_sparse, i_u_ids_sparse, self.config)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_111": {
                "variable": {
                    "value": "norm_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "cos_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(norm_x, norm_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[user_imp, item_imp, sparse_imp, u_i_ids_imp, i_u_ids_imp, prod_vector, dense_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "all_weights[w2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_hidden, n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "variable": {
                    "value": "all_weights[b2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "variable": {
                    "value": "hidden_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(x_projection, hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_67": {
                "variable": {
                    "value": "weight_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([attn_weight[:, i]] * head_dim, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "hidden_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "variable": {
                    "value": "lagrangian_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.total_sparse_id, config.total_sparse_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_156": {
                "variable": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "user_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ],
                        [
                            "param['user_id']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "embedding_lookup_158": {
                "variable": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ],
                        [
                            "param['item_id']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "embedding_lookup_160": {
                "variable": {
                    "value": "sparse_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "sparse_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ],
                        [
                            "param['sparse_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_161": {
                "variable": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sparse_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, sparse_feature)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_163": {
                "variable": {
                    "value": "u_i_ids_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "u_i_ids_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['u_i_ids_sparse']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u_i_ids_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, u_i_ids_sparse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_166": {
                "variable": {
                    "value": "i_u_ids_feature_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sparse_embedding', [config.total_sparse_id, config.total_sparse_emb_dim], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "i_u_ids_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ],
                        [
                            "param['i_u_ids_sparse']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "i_u_ids_feature_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, i_u_ids_sparse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_208": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_209": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_210": {
                "variable": {
                    "value": "self.sparse_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_211": {
                "variable": {
                    "value": "self.dense_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config.input_dense_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "self.u_i_ids_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "u_i_ids_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_213": {
                "variable": {
                    "value": "self.i_u_ids_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "i_u_ids_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_215": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_240": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_412": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask_noise_autoencoder'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "all_weights[weight_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'w1_%d' % index",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_input, n_head_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "all_weights[bias_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_head_hidden], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'b1_%d' % index",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_73": {
                "a": {
                    "value": "hidden_merge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(hidden_merge_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "network_weights['w2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_93": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "slack_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_sim_batch - eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "penalty_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_112": {
                "x": {
                    "value": "norm_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(y, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_28": {
                "shape": {
                    "value": "[n_hidden, n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "shape": {
                    "value": "[n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_49": {
                "x": {
                    "value": "tf.matmul(tf.nn.dropout(x, keep_prob), network_weights[weight_key_i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "network_weights[bias_key_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_60": {
                "x": {
                    "value": "x_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transfer_function(tf.add(tf.matmul(tf.nn.dropout(x, keep_prob), network_weights[weight_key_i]), network_weights[bias_key_i]))",
                            "Call"
                        ],
                        [
                            "hidden_list[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_67": {
                "values": {
                    "value": "[attn_weight[:, i]] * head_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "input_tensor": {
                    "value": "tf.concat(prod_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_178": {
                "x": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_229": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self._reconstruction, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "pretrain_var_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pretrain_model_scope'",
                            "Method Argument"
                        ],
                        [
                            "'pretrain_model_scope'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "shape": {
                    "value": "[n_head_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "a": {
                    "value": "tf.nn.dropout(x, keep_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "network_weights[weight_key_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_101": {
                "values": {
                    "value": "prod_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_177": {
                "x": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_229": {
                "x": {
                    "value": "tf.subtract(self._reconstruction, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "latest_checkpoint_415": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_49": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "construct_input(user_id, item_id, sparse_feature, dense_feature, u_i_ids_sparse, i_u_ids_sparse, self.config)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_176": {
                "x": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_229": {
                "x": {
                    "value": "self._reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_175": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_174": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_173": {
                "x": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_172": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_u_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(i_u_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_171": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_i_ids_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(u_i_ids_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_169": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_170": {
                "x": {
                    "value": "user_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(sparse_embedding, user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sparse_imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sparse_feature_imp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/model_utils.py": {
        "tensorflow": {
            "Variable_8": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape, mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal(shape, mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape, mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal(shape, mean=0.0, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}