{
    "TF/model.py": {
        "tensorflow": {
            "ConfigProto_11": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_12": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_65": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_67": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_147": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.input_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_44": {
                "variable": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "self.input_seq.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.w_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.vocab_size, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "self.b_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.vocab_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.output_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.step_losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_34": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_41": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.output_seq[:, t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_53": {
                "variable": {
                    "value": "step_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.w_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.b_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rnn_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_output[t]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.output_seq[:, t], [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_variables_159": {
                "variable": {
                    "value": "self.init_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.LSTM.states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "shape": {
                    "value": "[self.vocab_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "shape": {
                    "value": "[self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "a": {
                    "value": "rnn_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_output[t]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(self.w_proj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "a": {
                    "value": "self.w_proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TF/train.py": {
        "tensorflow": {
            "set_verbosity_10": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "arguments.py": {
        "torch": {
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "local_models/log_uniform/test.py": {
        "torch": {
            "Tensor_10": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_32": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_uniform_distribution(N)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8192",
                            "int"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_37": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_uniform_distribution(N)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remainder_12": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x * log_N).long() - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "793471",
                            "int"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([log_uniform(idx, range_max) for idx in range(range_max)])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_11": {
                "input": {
                    "value": "x * log_N",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "local_models/lstm.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_54": {
                "variable": {
                    "value": "self.lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "maxNorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "args.maxnorm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LSTM_55": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_LSTM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_458": {
                "variable": {
                    "value": "output_sentence_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "number_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.gen_bptt - self.args.gen_warmup",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.args.gen_bsz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.lastLayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_68": {
                "variable": {
                    "value": "self.get_logProb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bptt",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_211": {
                "variable": {
                    "value": "next_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_distr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Softmax(dim=0)(torch.mul(next_logits, 1 / self.temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_520": {
                "obj": {
                    "value": "self.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "modelAbsoluteName",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.directoryCkpt, self.args.model + '_Best{}_'.format(mode) + '_ppl_' + '%.3f' % bestPPL + 'vocabSize_{}'.format(self.vsize) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_71": {
                "variable": {
                    "value": "self.lastLayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "self.vsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "self.cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_180": {
                "variable": {
                    "value": "output[time_step, batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[time_step, batch, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_210": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_210": {
                "input": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(hids).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__288": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "local_models/simple.py": {
        "torch": {
            "is_available_33": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_191": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_192": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "LR * 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_35": {
                "device": {
                    "value": "gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_132": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_133": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_135": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_222": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "LR * 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "losses/regularCrossEntropy.py": {
        "torch": {
            "NLLLoss_21": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(self.vsize).fill_(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "torch_LM.py": {
        "torch": {
            "manual_seed_52": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_347": {
                "variable": {
                    "value": "schedule",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(params, lr=args.lr, weight_decay=args.wd, betas=(args.b1, args.b2))",
                            "Call"
                        ],
                        [
                            "optim.SGD(params, lr=args.lr, weight_decay=args.wd, nesterov=not args.nonag, momentum=args.mom, dampening=args.dm)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "factor": {
                    "value": "args.lrd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_339": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([np.prod(p.size()) for p in model_parameters])",
                            "Call"
                        ],
                        [
                            "params_model + params_loss",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.b1, args.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_342": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([np.prod(p.size()) for p in model_parameters])",
                            "Call"
                        ],
                        [
                            "params_model + params_loss",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "not args.nonag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dampening": {
                    "value": "args.dm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}