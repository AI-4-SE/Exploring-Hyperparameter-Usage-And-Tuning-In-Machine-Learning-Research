{
    "USAID_dataloader.py": {
        "sklearn": {
            "extract_patches_2d_233": {
                "variable": {
                    "value": "extract_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.cvtColor(Satsample, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                },
                "patch_size": {
                    "value": "(int(0.8 * h), int(0.8 * w))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_patches": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "extract_patches_2d_239": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.cvtColor(Satsample, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                },
                "patch_size": {
                    "value": "(self.cropSize, self.cropSize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_patches": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "FPN/B3_test.py": {
        "torch": {
            "DataParallel_44": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn(21)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(seg).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiDataSet(cropSize=50, inSize=500, testFlag=True, preload=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "/hdd2/sharonwang/DnCNN/FPN/checkpoints/B3_noGT/final_net_SateFPN.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "seg_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(seg_input).cuda())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FPN/B3_train.py": {
        "torch": {
            "log_softmax_62": {
                "variable": {
                    "value": "sfmx_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_63": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sfmx_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(inputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiDataSet(cropSize=50, inSize=500, testFlag=False, preload=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "CONFIG.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "CONFIG.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn(CONFIG.N_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_42": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ],
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_74": {
                "variable": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_35": {
                "f": {
                    "value": "/hdd2/sharonwang/DnCNN/FPN/checkpoints/B3_noGT/final_net_SateFPN.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_212": {
                "variable": {
                    "value": "seg_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_rgb.permute((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data, seg_rgb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "target_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize_target(target, output.size(2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_).long()",
                            "Call"
                        ],
                        [
                            "target_.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_device_name_75": {
                "device": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_121": {
                "params": {
                    "value": "[{'params': model.parameters(), 'lr': CONFIG.LR, 'weight_decay': CONFIG.WEIGHT_DECAY}]",
                    "type": "List",
                    "possible_values": []
                },
                "momentum": {
                    "value": "CONFIG.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "ndarray": {
                    "value": "seg_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classToRGB(target.permute((1, 2, 0)))",
                            "Call"
                        ],
                        [
                            "cv2.resize(seg_rgb, (seg_rgb.shape[0] * 4, seg_rgb.shape[1] * 4))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(seg_rgb).cuda().float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(seg_rgb.permute((2, 0, 1)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_195": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data, dataOne]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "FPN/data/B3_dataloader.py": {
        "torch": {}
    },
    "FPN/data/VOC_dataloader.py": {
        "torch": {}
    },
    "FPN/data/data_loading.py": {
        "torch": {}
    },
    "FPN/models/fpn.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.toplayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.smooth1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.smooth2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.smooth3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.smooth4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.smooth1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.smooth2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.smooth3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.smooth4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.latlayer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.latlayer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.latlayer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numClass",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_32": {
                "variable": {
                    "value": "p5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.upsample(p5, size=(H, W), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.toplayer(c5)",
                            "Call"
                        ],
                        [
                            "self.smooth1_2(self.smooth1_1(p5))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_33": {
                "variable": {
                    "value": "p4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.upsample(p4, size=(H, W), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self._upsample_add(p5, self.latlayer1(c4))",
                            "Call"
                        ],
                        [
                            "self.smooth2_2(self.smooth2_1(p4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_34": {
                "variable": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.upsample(p3, size=(H, W), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self._upsample_add(p4, self.latlayer2(c3))",
                            "Call"
                        ],
                        [
                            "self.smooth3_2(self.smooth3_1(p3))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "[p5, p4, p3, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FPN/models/resnet.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "FPN/test.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiDataSet(CONFIG.ROOT, CONFIG.CROPSIZE, CONFIG.INSIZE, phase='crossvali', testFlag=True, preload=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "CONFIG.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_29": {
                "obj": {
                    "value": "network.to('cpu').state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ],
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_40": {
                "variable": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn(CONFIG.N_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_22": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ],
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_70": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_device_name_41": {
                "device": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FPN/train.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiDataSet(cropSize=50, inSize=300, testFlag=False, preload=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "CONFIG.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "CONFIG.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_99": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn(CONFIG.N_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_36": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ],
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_63": {
                "variable": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_29": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ],
                        [
                            "osp.join(saveDir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "target_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize_target(target, output.size(2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_).long()",
                            "Call"
                        ],
                        [
                            "target_.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_device_name_64": {
                "device": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_109": {
                "params": {
                    "value": "[{'params': model.parameters(), 'lr': CONFIG.LR, 'weight_decay': CONFIG.WEIGHT_DECAY}]",
                    "type": "List",
                    "possible_values": []
                },
                "momentum": {
                    "value": "CONFIG.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data, dataOne]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, targetOne]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "FPN/utils/loss.py": {
        "torch": {
            "Tensor_21": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_9": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_12": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_66": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_49": {
                "input": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "input": {
                    "value": "inputs[range(index, index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "targets[range(index, index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "USAID_train.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiDataSet(cropSize=opt.cropSize, testFlag=False, Scale=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiDataSet(cropSize=opt.cropSize, testFlag=True, Scale=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_55": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_56": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DnCNN(channels=3, num_of_layers=opt.num_of_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn(opt.num_of_SegClass)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(seg).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_63": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[10, 40, 80, 120, 140]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_179": {
                "variable": {
                    "value": "out_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgn_train - model(imgn_train)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_100": {
                "variable": {
                    "value": "out_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgn_train - model(imgn_train)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "target_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize_target(target, seg_output.size(2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_).long()",
                            "Call"
                        ],
                        [
                            "target_.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_187": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, str(opt.num_of_SegClass) + '_USAID_lastest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "img_train.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "seg_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_train.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(seg_input).cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_149": {
                "variable": {
                    "value": "out_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgn_val - model(imgn_val)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, str(opt.num_of_SegClass) + '_USAID_epoch' + str(epoch + 1) + '_' + str(psnr_val) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, str(opt.num_of_SegClass) + '_USAID_final.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.dncnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "transpose_31": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(img, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "variable": {
                    "value": "imclean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imclean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(imclean, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_140": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_148": {
                "variable": {
                    "value": "sfmx_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_149": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sfmx_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(inputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_121": {
                "input": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_42": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(img, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}