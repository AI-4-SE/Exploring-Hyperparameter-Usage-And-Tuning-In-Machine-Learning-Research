{
    "pytorch/utils/load_adult.py": {
        "sklearn": {
            "StandardScaler_15": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/load_names.py": {
        "sklearn": {
            "shuffle_104": {
                "variable": {
                    "value": "(data, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_letters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_letters)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_letters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_letters)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_54": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'datasets/names/data.pt'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_55": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "labels_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'datasets/names/labels.pt'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_85": {
                "variable": {
                    "value": "padded_features",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "unpadded_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(labels_dir)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(data_dir)",
                            "Call"
                        ],
                        [
                            "padded_features",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "datasets/names/data.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_93": {
                "obj": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(labels_dir)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "datasets/names/labels.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/main.py": {
        "torch": {
            "manual_seed_145": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test.py": {
        "torch": {
            "manual_seed_79": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/Custom_Dataset.py": {
        "torch": {}
    },
    "pytorch/utils/Data_Prepper.py": {
        "torch": {
            "ZeroPad2d_346": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_347": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(sample.data) for sample in self.data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_376": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_380": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.validation_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_data.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_target.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_data.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_target.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.train_batch_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "SubsetRandomSampler(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_135": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(n_samples))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/utils/Federated_Learner.py": {
        "torch": {
            "sinh_753": {
                "variable": {
                    "value": "reputations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha * reputations",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_845": {
                "variable": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[update.data.view(-1) for update in grad_update]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_846": {
                "variable": {
                    "value": "masked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(len(flattened))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "flattened.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "self.shard_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data_prepper.shard_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "variable": {
                    "value": "self.reputations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_participants",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "self.reputations_pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_participants",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_790": {
                "variable": {
                    "value": "all_update_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[update.data.view(-1).abs() for update in grad_update]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "prod_851": {
                "variable": {
                    "value": "size_of_update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(update.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_68": {
                "variable": {
                    "value": "self.federated_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.federated_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.args['device_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "self.shard_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(self.n_freeriders), self.shard_sizes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ExponentialLR_102": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_fn(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['gamma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ExponentialLR_107": {
                "variable": {
                    "value": "scheduler_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_pretrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_fn(model_pretrain.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['gamma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ExponentialLR_112": {
                "variable": {
                    "value": "standalone_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "standalone_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_fn(standalone_model.parameters(), lr=std_lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['gamma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ExponentialLR_118": {
                "variable": {
                    "value": "dssgd_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "dssgd_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_fn(dssgd_model.parameters(), lr=dssgd_lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['gamma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ExponentialLR_122": {
                "variable": {
                    "value": "fedavg_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "fedavg_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_fn(fedavg_model.parameters(), lr=fed_lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['gamma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "div_268": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.shard_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.shard_sizes.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_517": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_participants",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "absolute_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[update.data.view(-1).abs() for update in self.aggregated_gradient_updates]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_534": {
                "variable": {
                    "value": "absolute_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[update.data.view(-1).abs() for update in self.aggregated_gradient_updates_pretrain]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "clamp_783": {
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "-grad_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "grad_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['grad_clip']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "topk_798": {
                "variable": {
                    "value": "(topk, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_update_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([update.data.view(-1).abs() for update in grad_update])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "mask_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(len(all_update_mod) * mask_percentile)",
                            "Call"
                        ],
                        [
                            "math.ceil(len(layer_mod) * mask_percentile)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_858": {
                "input": {
                    "value": "1.0 / 6 * torch.div(1.0, R_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_860": {
                "input": {
                    "value": "coef * torch.div(1.0, R_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "param.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "param.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_427": {
                "obj": {
                    "value": "self.federated_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(models_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_457": {
                "*size": {
                    "value": "param.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_458": {
                "*size": {
                    "value": "param.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_511": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.shard_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "max(self.shard_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_515": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(class_sizes).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "max(class_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_529": {
                "variable": {
                    "value": "random_permuted_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(absolute_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_531": {
                "variable": {
                    "value": "(topk, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "absolute_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([update.data.view(-1).abs() for update in self.aggregated_gradient_updates])",
                            "Call"
                        ],
                        [
                            "torch.cat([update.data.view(-1).abs() for update in self.aggregated_gradient_updates_pretrain])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(len(absolute_values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_538": {
                "variable": {
                    "value": "(topk_pretrain, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "absolute_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([update.data.view(-1).abs() for update in self.aggregated_gradient_updates])",
                            "Call"
                        ],
                        [
                            "torch.cat([update.data.view(-1).abs() for update in self.aggregated_gradient_updates_pretrain])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(len(absolute_values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_637": {
                "variable": {
                    "value": "self.performance_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_644": {
                "variable": {
                    "value": "self.performance_dict_pretrain[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_810": {
                "variable": {
                    "value": "grad_update[i].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "layer.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_812": {
                "variable": {
                    "value": "(topk, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.data.view(-1).abs()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "min(mask_order, len(layer_mod) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_846": {
                "start": {
                    "value": "len(flattened)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "self.n_freeriders",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_419": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(models_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_424": {
                "obj": {
                    "value": "self.federated_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(models_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_515": {
                "data": {
                    "value": "class_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(1, n_classes, self.n_participants, dtype='int')",
                            "Call"
                        ],
                        [
                            "np.linspace(1, n_classes, self.n_participants, dtype='int')",
                            "Call"
                        ],
                        [
                            "np.linspace(1, n_classes, self.n_participants, dtype='int')",
                            "Call"
                        ],
                        [
                            "np.linspace(1, n_classes, self.n_participants, dtype='int')",
                            "Call"
                        ],
                        [
                            "np.linspace(1, n_classes, self.n_participants, dtype='int')",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_536": {
                "n": {
                    "value": "len(absolute_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_851": {
                "data": {
                    "value": "update.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_639": {
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_646": {
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_858": {
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "other": {
                    "value": "R_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_860": {
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "other": {
                    "value": "R_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(R)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/utils/Participant.py": {
        "torch": {
            "device_119": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_50": {
                "*size": {
                    "value": "param.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/arguments.py": {
        "torch": {
            "is_available_7": {
                "variable": {
                    "value": "cuda_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_12": {
                "variable": {
                    "value": "args[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(args['gpu'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_23": {
                "type": {
                    "value": "cuda if cuda_available and use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "NLLLoss_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_63": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() and use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "NLLLoss_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_105": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() and use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "NLLLoss_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_141": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() and use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "NLLLoss_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_188": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() and use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "NLLLoss_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_232": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() and use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "NLLLoss_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_278": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "NLLLoss_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/models.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "86",
                            "Method Argument"
                        ],
                        [
                            "86",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.class_num",
                            "Attribute"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.i2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_83": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_136": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_189": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_194": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "variable": {
                    "value": "self.resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_211": {
                "variable": {
                    "value": "self.resnet.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_324": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.embed_num",
                            "Attribute"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.embed_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_325": {
                "variable": {
                    "value": "self.convs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(Ci, Co, (K, D)) for K in Ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_331": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(Ks) * Co",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.class_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_336": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_336": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_337": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_337": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_380": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embed_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.embed_num",
                            "Attribute"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.embed_dim",
                            "Attribute"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.pad_idx",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_382": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.embed_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.class_num",
                            "Attribute"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_388": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(text)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(embedded.shape[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_388": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "[self.forward_one_tensor(line_tensor) for line_tensor in line_tensors]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_124": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_146": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_198": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_364": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_391": {
                "input": {
                    "value": "self.fc(pooled)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_118": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_119": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_141": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_227": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_230": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_234": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_235": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_236": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_237": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_241": {
                "in_features": {
                    "value": "256 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_244": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_289": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_353": {
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_353": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_354": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(line_tensor.size()[0])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_354": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_325": {
                "in_channels": {
                    "value": "Ci",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Co",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.kernel_num",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(K, D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_283": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_286": {
                "num_features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 16)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 256 * 2 * 2)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "Variable(x).to(self.device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_287": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/utils.py": {
        "torch": {
            "zeros_203": {
                "variable": {
                    "value": "marginal_contributions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_participants",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(grad_updates)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "[update.data.view(-1) for update in grad_update]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "shard_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(grad_updates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_104": {
                "data": {
                    "value": "flattened[:n_params]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "input": {
                    "value": "param.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "[grad_update[i] for grad_update in grad_updates_]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_60": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_65": {
                "tensors": {
                    "value": "[grad_update[i] for grad_update in grad_updates_]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_65": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[grad_update[i] for grad_update in grad_updates_]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_75": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_133": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}