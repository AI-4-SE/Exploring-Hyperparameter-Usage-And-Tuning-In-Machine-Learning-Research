{
    "euclideanizing_flows/flows.py": {
        "torch": {
            "eye_284": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "output_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dims",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_30": {
                "variable": {
                    "value": "self.I",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_dim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.n_dim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_30": {
                "variable": {
                    "value": "self.I",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_65": {
                "variable": {
                    "value": "xd_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_hat_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(J_hat)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(torch.matmul(J_hat_T, J_hat) + 1e-12 * I), J_hat_T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "yd_hat.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "xd_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_104": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_126": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_126": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearClamped(in_dim, nfeat, self.coeff, self.offset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "self.origin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_dim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_59": {
                "variable": {
                    "value": "J_hat_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.taskmap_fcn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_63": {
                "input": {
                    "value": "J_hat_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "J_hat.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "J_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.taskmap_fcn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_184": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale_net(masked_inputs) * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_187": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_256": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_270": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(inputs, mode)",
                            "Call"
                        ],
                        [
                            "module(inputs, mode)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_286": {
                "outputs": {
                    "value": "y_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_m)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.repeat(1, output_dims).view(-1, output_dims)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(output_dims).repeat(n, 1).to(x.device)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, num_dims) % 2",
                            "BinOp"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "self.mask",
                            "Attribute"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_87": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_dims",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_109": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(y_m, x_m, mask, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "J.reshape(n, output_dims, output_dims)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_dims, device=inputs.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_dims, device=inputs.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(y_m, x_m, mask, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "J.reshape(n, output_dims, output_dims)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_dims, device=inputs.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_dims, device=inputs.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(y_m, x_m, mask, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "J.reshape(n, output_dims, output_dims)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_dims, device=inputs.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_dims, device=inputs.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ],
                        [
                            "module.jacobian(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(y_m, x_m, mask, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "J.reshape(n, output_dims, output_dims)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_dims, device=inputs.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_dims, device=inputs.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ],
                        [
                            "torch.matmul(J_module, J)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_209": {
                "in_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfeat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_229": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_230": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_255": {
                "input": {
                    "value": "input.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_36": {
                "input": {
                    "value": "self.log_vel_scalar(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_63": {
                "input": {
                    "value": "torch.matmul(J_hat_T, J_hat) + 1e-12 * I",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "euclideanizing_flows/plot_utils.py": {
        "torch": {
            "meshgrid_169": {
                "variable": {
                    "value": "(x2_coords, x1_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(x_lim[1][0], x_lim[1][1], delta), torch.arange(x_lim[0][0], x_lim[0][1], delta)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1_coords.nelement()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_0",
                            "variable"
                        ],
                        [
                            "state + dt * dynamics(t[-1], state)",
                            "BinOp"
                        ],
                        [
                            "state + dt * dynamics(t[-1], state)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(state).float()",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sol.y.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_data, y_data)",
                            "Tuple"
                        ],
                        [
                            "x_data",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_170": {
                "start": {
                    "value": "x_lim[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "x_lim[1][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_171": {
                "start": {
                    "value": "x_lim[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "x_lim[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "euclideanizing_flows/train_utils.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__90": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_value_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_178": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "float"
                        ]
                    ]
                }
            },
            "TensorDataset_182": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_train_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}