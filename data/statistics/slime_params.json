{
    "slime/discretize.py": {
        "sklearn": {
            "check_random_state_48": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DecisionTreeClassifier_218": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slime/explanation.py": {
        "sklearn": {
            "check_random_state_256": {
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slime/lime_base.py": {
        "sklearn": {
            "check_random_state_30": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Ridge_62": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Ridge_227": {
                "variable": {
                    "value": "model_regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Ridge_303": {
                "variable": {
                    "value": "model_regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Ridge_89": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slime/lime_image.py": {
        "sklearn": {
            "check_random_state_125": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pairwise_distances_205": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_labels(image, fudged_image, segments, classifier_fn, num_samples, batch_size=batch_size, progress_bar=progress_bar)",
                            "Call"
                        ],
                        [
                            "self.random_state.randint(0, 2, num_samples * n_features).reshape((num_samples, n_features))",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "data[0].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "distance_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cosine'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slime/lime_tabular.py": {
        "sklearn": {
            "check_random_state_189": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_260": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pairwise_distances_355": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.multiply(self.scaler.scale_)",
                            "Call"
                        ],
                        [
                            "(data - self.scaler.mean_) / self.scaler.scale_",
                            "BinOp"
                        ],
                        [
                            "scaled_data.tocsr()",
                            "Call"
                        ],
                        [
                            "data.multiply(self.scaler.scale_)",
                            "Call"
                        ],
                        [
                            "(data - self.scaler.mean_) / self.scaler.scale_",
                            "BinOp"
                        ],
                        [
                            "scaled_data.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "scaled_data[0].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "distance_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "Method Argument"
                        ],
                        [
                            "'euclidean'",
                            "Method Argument"
                        ],
                        [
                            "'euclidean'",
                            "Method Argument"
                        ],
                        [
                            "'euclidean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pairwise_distances_533": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.multiply(self.scaler.scale_)",
                            "Call"
                        ],
                        [
                            "(data - self.scaler.mean_) / self.scaler.scale_",
                            "BinOp"
                        ],
                        [
                            "scaled_data.tocsr()",
                            "Call"
                        ],
                        [
                            "data.multiply(self.scaler.scale_)",
                            "Call"
                        ],
                        [
                            "(data - self.scaler.mean_) / self.scaler.scale_",
                            "BinOp"
                        ],
                        [
                            "scaled_data.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "scaled_data[0].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "distance_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "Method Argument"
                        ],
                        [
                            "'euclidean'",
                            "Method Argument"
                        ],
                        [
                            "'euclidean'",
                            "Method Argument"
                        ],
                        [
                            "'euclidean'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slime/lime_text.py": {
        "sklearn": {
            "check_random_state_357": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pairwise_distances_469": {
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "Y": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "metric": {
                    "value": "distance_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cosine'",
                            "Method Argument"
                        ],
                        [
                            "'cosine'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slime/tests/test_discretize.py": {
        "sklearn": {
            "load_iris_14": {
                "variable": {
                    "value": "iris",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slime/tests/test_lime_tabular.py": {
        "sklearn": {
            "load_iris_28": {
                "variable": {
                    "value": "iris",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_36": {
                "variable": {
                    "value": "(self.train, self.test, self.labels_train, self.labels_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "iris.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "iris.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_40": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_classification_65": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_71": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_multilabel_classification_86": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_labels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_91": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_107": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_131": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_classification_156": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_162": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_classification_243": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_249": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_586": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slime/tests/test_lime_text.py": {
        "sklearn": {
            "fetch_20newsgroups_21": {
                "variable": {
                    "value": "newsgroups_train",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ]
                    ]
                }
            },
            "fetch_20newsgroups_23": {
                "variable": {
                    "value": "newsgroups_test",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_26": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultinomialNB_29": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_pipeline_33": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ],
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ],
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ]
                    ]
                },
                "memory": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ],
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ],
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "fetch_20newsgroups_43": {
                "variable": {
                    "value": "newsgroups_train",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ]
                    ]
                }
            },
            "fetch_20newsgroups_45": {
                "variable": {
                    "value": "newsgroups_test",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_48": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultinomialNB_51": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_pipeline_55": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ],
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ],
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ]
                    ]
                },
                "memory": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ],
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ],
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "fetch_20newsgroups_69": {
                "variable": {
                    "value": "newsgroups_train",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ]
                    ]
                }
            },
            "fetch_20newsgroups_71": {
                "variable": {
                    "value": "newsgroups_test",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ],
                        [
                            "['alt.atheism', 'soc.religion.christian']",
                            "List"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_74": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultinomialNB_77": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_pipeline_81": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ],
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ],
                        [
                            "TfidfVectorizer(lowercase=False)",
                            "Call"
                        ]
                    ]
                },
                "memory": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ],
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ],
                        [
                            "MultinomialNB(alpha=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_32": {
                "y_true": {
                    "value": "newsgroups_test.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ],
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ],
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_54": {
                "y_true": {
                    "value": "newsgroups_test.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ],
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ],
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_80": {
                "y_true": {
                    "value": "newsgroups_test.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ],
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ],
                        [
                            "nb.predict(test_vectors)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slime_lm/_least_angle.py": {
        "sklearn": {
            "min_pos_717": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_pos_727": {
                "variable": {
                    "value": "z_pos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_pos_721": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}