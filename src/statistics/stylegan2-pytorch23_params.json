{
    "stylegan2_pytorch/stylegan2_pytorch.py": {
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "acos_182": {
                "variable": {
                    "value": "omega",
                    "possible_values": []
                },
                "input": {
                    "value": "(low_norm * high_norm).sum(1)",
                    "possible_values": []
                }
            },
            "sin_183": {
                "variable": {
                    "value": "so",
                    "possible_values": []
                },
                "input": {
                    "value": "omega",
                    "possible_values": [
                        [
                            "torch.acos((low_norm * high_norm).sum(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.g",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*[Residual(Rezero(ImageLinearAttention(chan))), Residual(Rezero(nn.Sequential(nn.Conv2d(chan, chan * 2, 1), leaky_relu(), nn.Conv2d(chan * 2, chan, 1))))]",
                    "possible_values": []
                }
            },
            "isnan_116": {
                "input": {
                    "value": "t",
                    "possible_values": []
                }
            },
            "randn_147": {
                "*size": {
                    "value": "n",
                    "possible_values": [
                        [
                            "image_noise(num_rows ** 2, image_size)",
                            "Call"
                        ],
                        [
                            "image_noise(num_rows ** 2, image_size)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_163": {
                "negative_slope": {
                    "value": "p",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "chunked_outputs",
                    "possible_values": [
                        [
                            "[model(*i) for i in split_args]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "[t[:, None, :].expand(-1, n, -1) for (t, n) in styles_def]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_249": {
                "input": {
                    "value": "cropped",
                    "possible_values": [
                        [
                            "tensor[:, :, h_delta:h_delta + new_width, w_delta:w_delta + new_width].clone()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, h)",
                    "possible_values": []
                }
            },
            "flip_254": {
                "input": {
                    "value": "tensor",
                    "possible_values": []
                },
                "dims": {
                    "value": "(3,)",
                    "possible_values": []
                }
            },
            "Sequential_282": {
                "variable": {
                    "value": "self.net",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.to_style",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_channel",
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((out_chan, in_chan, kernel, kernel))",
                    "possible_values": []
                }
            },
            "conv2d_342": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x, style)",
                            "Call"
                        ],
                        [
                            "x + prev_rgb",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(1, -1, h, w)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights, padding=padding, groups=b)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.filters, h, w)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, style1)",
                            "Call"
                        ],
                        [
                            "self.activation(x + noise1)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, style2)",
                            "Call"
                        ],
                        [
                            "self.activation(x + noise2)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.to_initial_block(avg_style)",
                            "Call"
                        ],
                        [
                            "self.initial_block.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "attn(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.to_logit(x)",
                            "Call"
                        ],
                        [
                            "attn_block(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "w2 * (w1 + 1)",
                            "BinOp"
                        ],
                        [
                            "weights * d",
                            "BinOp"
                        ],
                        [
                            "weights.reshape(b * self.filters, *ws)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "self._get_same_padding(h, self.kernel, self.dilation, self.stride)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "b",
                    "possible_values": []
                }
            },
            "Linear_352": {
                "variable": {
                    "value": "self.to_style1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_channels",
                    "possible_values": []
                }
            },
            "Linear_353": {
                "variable": {
                    "value": "self.to_noise1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.to_style2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.to_noise2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_385": {
                "variable": {
                    "value": "self.conv_res",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "variable": {
                    "value": "self.net",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, filters, 3, padding=1)",
                    "possible_values": []
                }
            },
            "ModuleList_426": {
                "variable": {
                    "value": "self.blocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "ModuleList_427": {
                "variable": {
                    "value": "self.attns",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "ModuleList_499": {
                "variable": {
                    "value": "self.blocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_500": {
                "variable": {
                    "value": "self.attn_blocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "attn_blocks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_501": {
                "variable": {
                    "value": "self.quantize_blocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "quantize_blocks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_506": {
                "variable": {
                    "value": "self.to_logit",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_511": {
                "variable": {
                    "value": "quantize_loss",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "total_disc_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "variable": {
                    "value": "total_gen_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "no_grad_823": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_868": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "linspace_905": {
                "variable": {
                    "value": "ratios",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "8.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "no_grad_889": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_137": {
                "*size": {
                    "value": "images.shape",
                    "possible_values": []
                }
            },
            "norm_180": {
                "input": {
                    "value": "low",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "norm_181": {
                "input": {
                    "value": "high",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "rsqrt_333": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "input": {
                    "value": "(weights ** 2).sum(dim=(2, 3, 4), keepdim=True) + EPS",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_422": {
                "variable": {
                    "value": "self.to_initial_block",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "latent_dim",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "init_channels",
                    "possible_values": [
                        [
                            "filters[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Parameter_424": {
                "variable": {
                    "value": "self.initial_block",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((1, init_channels, 4, 4))",
                    "possible_values": []
                }
            },
            "from_numpy_881": {
                "variable": {
                    "value": "av_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.av",
                    "possible_values": []
                }
            },
            "save_941": {
                "obj": {
                    "value": "self.GAN.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_name(num)",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_153": {
                "*size": {
                    "value": "()",
                    "possible_values": []
                }
            },
            "Upsample_296": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "randn_319": {
                "*size": {
                    "value": "(out_chan, in_chan, kernel, kernel)",
                    "possible_values": []
                }
            },
            "Upsample_350": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_388": {
                "in_channels": {
                    "value": "input_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "in_channels": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_394": {
                "in_channels": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "[network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "Subscript"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ],
                        [
                            "[init_channels, *filters]",
                            "List"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ],
                        [
                            "list(map(set_fmap_max, filters))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "DataLoader_666": {
                "dataset": {
                    "value": "self.dataset",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "default(self.num_workers, num_cores)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "index_select_856": {
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_956": {
                "f": {
                    "value": "self.model_name(name)",
                    "possible_values": []
                }
            },
            "ones_129": {
                "*size": {
                    "value": "output.size()",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "outputs.shape",
                    "possible_values": []
                }
            },
            "randn_424": {
                "*size": {
                    "value": "(1, init_channels, 4, 4)",
                    "possible_values": []
                }
            },
            "isnan_807": {
                "input": {
                    "value": "l",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "in_features": {
                    "value": "emb",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "nn.Conv2d(chan, chan * 2, 1)",
                    "possible_values": []
                }
            },
            "sin_184": {
                "input": {
                    "value": "val * omega",
                    "possible_values": []
                }
            },
            "relu_737": {
                "input": {
                    "value": "1 - fake_output",
                    "possible_values": []
                }
            },
            "isnan_780": {
                "input": {
                    "value": "pl_loss",
                    "possible_values": [
                        [
                            "((pl_lengths - self.pl_mean) ** 2).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "chan * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chan",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}