{
    "generator.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_32": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_34": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_37": {
                "variable": {
                    "value": "self.reflection_pad_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_39": {
                "variable": {
                    "value": "self.reflection_pad_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.res1(x)",
                            "Call"
                        ],
                        [
                            "self.res2(x)",
                            "Call"
                        ],
                        [
                            "self.res3(x)",
                            "Call"
                        ],
                        [
                            "self.res4(x)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.res1(x)",
                            "Call"
                        ],
                        [
                            "self.res2(x)",
                            "Call"
                        ],
                        [
                            "self.res3(x)",
                            "Call"
                        ],
                        [
                            "self.res4(x)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.res1(x)",
                            "Call"
                        ],
                        [
                            "self.res2(x)",
                            "Call"
                        ],
                        [
                            "self.res3(x)",
                            "Call"
                        ],
                        [
                            "self.res4(x)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.res1(x)",
                            "Call"
                        ],
                        [
                            "self.res2(x)",
                            "Call"
                        ],
                        [
                            "self.res3(x)",
                            "Call"
                        ],
                        [
                            "self.res4(x)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.res1(x)",
                            "Call"
                        ],
                        [
                            "self.res2(x)",
                            "Call"
                        ],
                        [
                            "self.res3(x)",
                            "Call"
                        ],
                        [
                            "self.res4(x)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad_4(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_84": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_86": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_100": {
                "variable": {
                    "value": "self.reflection_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "run_style_transfer.py": {
        "torch": {
            "is_available_33": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=data_path, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "MSELoss_108": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_178": {
                "obj": {
                    "value": "gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'gen.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_189": {
                "f": {
                    "value": "f'models/vangogh_gen_all.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_205": {
                "input": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open('content_images/original_dog.jpg')",
                            "Call"
                        ],
                        [
                            "test.resize((256, 256))",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test[:3]",
                            "Subscript"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ],
                        [
                            "Image.fromarray(test * 255)",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_206": {
                "input": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open('content_images/original_dog.jpg')",
                            "Call"
                        ],
                        [
                            "test.resize((256, 256))",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test[:3]",
                            "Subscript"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ],
                        [
                            "Image.fromarray(test * 255)",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_106": {
                "f": {
                    "value": "restore_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_228": {
                "f": {
                    "value": "f'models/{style}_gen_all.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'models/gen_ep{e}_b{idx}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "device_189": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_249": {
                "input": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open('content_images/original_dog.jpg')",
                            "Call"
                        ],
                        [
                            "test.resize((256, 256))",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test[:3]",
                            "Subscript"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ],
                        [
                            "Image.fromarray(test * 255)",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_250": {
                "input": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open('content_images/original_dog.jpg')",
                            "Call"
                        ],
                        [
                            "test.resize((256, 256))",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test[:3]",
                            "Subscript"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ],
                        [
                            "Image.fromarray(test * 255)",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_228": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "run_super_res.py": {
        "torch": {
            "is_available_30": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_64": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_65": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "coarse_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coarse_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=data_path, transform=coarse_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "fine_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "fine_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=data_path, transform=fine_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_SR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "MSELoss_106": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "model_SR.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'models/SR_ep{e + 1}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_145": {
                "f": {
                    "value": "f'models/SR_ep{epoch_num}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_156": {
                "input": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open('nature.jpg')",
                            "Call"
                        ],
                        [
                            "test.resize((256, 256))",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_157": {
                "input": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open('nature.jpg')",
                            "Call"
                        ],
                        [
                            "test.resize((256, 256))",
                            "Call"
                        ],
                        [
                            "transform(test)",
                            "Call"
                        ],
                        [
                            "test.reshape(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "test - torch.min(test)",
                            "BinOp"
                        ],
                        [
                            "test / torch.max(test)",
                            "BinOp"
                        ],
                        [
                            "test * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_145": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "superres.py": {
        "torch": {
            "ReflectionPad2d_20": {
                "variable": {
                    "value": "self.refpad4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_30": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vgg.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}