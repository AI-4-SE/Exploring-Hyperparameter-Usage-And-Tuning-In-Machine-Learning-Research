{
    "experiments/main.py": {
        "sklearn": {
            "StratifiedKFold_122": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SVC_142": {
                "variable": {
                    "value": "gs",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel": {
                    "value": "precomputed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_149": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gs.predict(K_test[best_params['K_idx']])",
                            "Call"
                        ],
                        [
                            "gs.predict(K_test[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_135": {
                "kernel": {
                    "value": "precomputed",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/utilities.py": {
        "sklearn": {
            "StratifiedKFold_149": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "cv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "StratifiedKFold(n_splits=cv, shuffle=False)",
                            "Call"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_169": {
                "variable": {
                    "value": "ret_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ParameterGrid_157": {
                "param_grid": {
                    "value": "param_grid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clone_158": {
                "estimator": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "make_scorer_158": {
                "score_func": {
                    "value": "accuracy_score",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/wwl.py": {
        "sklearn": {
            "scale_33": {
                "variable": {
                    "value": "node_features_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.concatenate(node_features, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/wwl/propagation_scheme.py": {
        "sklearn": {
            "scale_190": {
                "variable": {
                    "value": "node_features_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.concatenate(node_features, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/wwl/utilities.py": {
        "sklearn": {
            "StratifiedKFold_30": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "cv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "StratifiedKFold(n_splits=cv, shuffle=False)",
                            "Call"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_50": {
                "variable": {
                    "value": "ret_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ParameterGrid_38": {
                "param_grid": {
                    "value": "param_grid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clone_39": {
                "estimator": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "make_scorer_39": {
                "score_func": {
                    "value": "accuracy_score",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/wwl/wwl.py": {
        "sklearn": {
            "laplacian_kernel_90": {
                "variable": {
                    "value": "wwl",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "D_W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_wasserstein_distance(X, node_features=node_features, num_iterations=num_iterations, sinkhorn=sinkhorn)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}