{
    "lib/layer_utils/dpp_loss_layer.py": {
        "tensorflow": {
            "get_default_graph_19": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_18": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_21": {
                "func": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "Variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "py_func_47": {
                "func": {
                    "value": "self._lddp_loss_gradient_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[op.inputs[0], op.inputs[1], op.inputs[2], op.inputs[3], op.inputs[4], op.inputs[5], op.inputs[6], op.inputs[7], op.inputs[8], grad]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/train_val.py": {
        "tensorflow": {
            "ConfigProto_370": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_183": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.net.get_variables_to_restore(variables, var_keep_dic)",
                            "Call"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_107": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_128": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_148": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_150": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_151": {
                "variable": {
                    "value": "self.valwriter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tbvaldir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_373": {
                "config": {
                    "value": "tfconfig",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_119": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_185": {
                "var_list": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "Gradient_Mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_273": {
                "ref": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ],
                        [
                            "cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ],
                        [
                            "rate * cfg.TRAIN.GAMMA",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_141": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(grad, scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "scale * 2.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/nets/mobilenet_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_187": {
                "variable": {
                    "value": "weights_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_45": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "separable_conv2d_37": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "rate * conv_def.stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "separable_conv2d_47": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "rate * conv_def.stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_249": {
                "variable": {
                    "value": "fc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mobilenet_v1_base(pool5, _CONV_DEFS[12:], starting_layer=12, depth_multiplier=self._depth_multiplier, reuse=reuse, scope=self._scope)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "Fix_MobileNet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_271": {
                "variable": {
                    "value": "Conv2d_0_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Conv2d_0_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, max(int(32 * self._depth_multiplier), 8)]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_274": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/Conv2d_0/weights': Conv2d_0_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_164": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, depth(conv_def.depth), conv_def.kernel, stride=conv_def.stride, scope=end_point)",
                            "Call"
                        ],
                        [
                            "separable_conv2d_same(net, conv_def.kernel, stride=layer_stride, rate=layer_rate, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), [1, 1], stride=1, scope=end_point)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth(conv_def.depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_point_base",
                            "Name"
                        ],
                        [
                            "end_point_base + '_depthwise'",
                            "BinOp"
                        ],
                        [
                            "end_point_base + '_pointwise'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_269": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_277": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/Conv2d_0/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(Conv2d_0_rgb / (255.0 / 2.0), [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_278": {
                "tensor": {
                    "value": "Conv2d_0_rgb / (255.0 / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nets/network.py": {
        "tensorflow": {
            "resize_bilinear_45": {
                "variable": {
                    "value": "resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._image + cfg.PIXEL_MEANS",
                            "BinOp"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes, [self._gt_image, self._gt_boxes, self._im_info], tf.float32, name='gt_boxes')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.to_int32(self._im_info[:2] / self._im_info[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_46": {
                "variable": {
                    "value": "self._gt_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "resized",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, tf.to_int32(self._im_info[:2] / self._im_info[2]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_52": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "draw_bounding_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self._gt_image, self._gt_boxes, self._im_info]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_70": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_237": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_box_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_238": {
                "variable": {
                    "value": "smoothL1_sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(tf.less(abs_in_box_diff, 1.0 / sigma_2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_242": {
                "variable": {
                    "value": "loss_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(out_loss_box, axis=dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_299": {
                "variable": {
                    "value": "rpn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._image_to_head(is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.RPN_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "rpn_conv/3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_302": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net_conv, cfg.RPN_CHANNELS, [3, 3], trainable=is_training, weights_initializer=initializer, scope='rpn_conv/3x3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "rpn_cls_score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_308": {
                "variable": {
                    "value": "rpn_cls_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(rpn_cls_score_reshape, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "rpn_cls_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_310": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net_conv, cfg.RPN_CHANNELS, [3, 3], trainable=is_training, weights_initializer=initializer, scope='rpn_conv/3x3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "rpn_bbox_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_342": {
                "variable": {
                    "value": "cls_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._predictions['cls_score']",
                            "Subscript"
                        ],
                        [
                            "slim.fully_connected(fc7, self._num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "cls_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_363": {
                "variable": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_364": {
                "variable": {
                    "value": "self._im_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_365": {
                "variable": {
                    "value": "self._gt_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_56": {
                "name": {
                    "value": "GROUND_TRUTH",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._image + cfg.PIXEL_MEANS",
                            "BinOp"
                        ],
                        [
                            "tf.py_func(draw_bounding_boxes, [self._gt_image, self._gt_boxes, self._im_info], tf.float32, name='gt_boxes')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_59": {
                "name": {
                    "value": "ACT/ + tensor.op.name + /activations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_60": {
                "name": {
                    "value": "ACT/ + tensor.op.name + /zero_fraction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_64": {
                "name": {
                    "value": "SCORE/ + tensor.op.name + / + key + /scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_67": {
                "name": {
                    "value": "'TRAIN/' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "self._act_summaries",
                            "Attribute"
                        ],
                        [
                            "self._train_summaries",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_73": {
                "variable": {
                    "value": "to_caffe",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_caffe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(bottom, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[[1, num_dim, -1], [input_shape[2]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "variable": {
                    "value": "to_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(to_caffe, tf.concat(axis=0, values=[[1, num_dim, -1], [input_shape[2]]]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_83": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "bottom_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "reshaped_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "bottom_reshaped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, input_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_87": {
                "logits": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "py_func_91": {
                "variable": {
                    "value": "(rois, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_top_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_prob, rpn_bbox_pred, self._im_info, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal_top",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_102": {
                "variable": {
                    "value": "(rois, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_123": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stop_gradient_131": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "crop_and_resize_133": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_135": {
                "input": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_138": {
                "x": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "py_func_142": {
                "variable": {
                    "value": "(rpn_labels, rpn_bbox_targets, rpn_bbox_inside_weights, rpn_bbox_outside_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "anchor_target_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rpn_cls_score, self._gt_boxes, self._im_info, self._feat_stride, self._anchors, self._num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "anchor_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_153": {
                "variable": {
                    "value": "rpn_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rpn_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(rpn_labels, name='to_int32')",
                            "Call"
                        ],
                        [
                            "self._anchor_target_layer(rpn_cls_score, 'anchor')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "to_int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_165": {
                "variable": {
                    "value": "(rois, roi_scores, labels, bbox_targets, bbox_inside_weights, bbox_outside_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_target_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[rois, roi_scores, self._gt_boxes, self._num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "proposal_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_179": {
                "variable": {
                    "value": "self._proposal_targets[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "to_int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_191": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(self._im_info[0] / np.float32(self._feat_stride[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_192": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(self._im_info[1] / np.float32(self._feat_stride[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "py_func_193": {
                "variable": {
                    "value": "(anchors, anchor_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_anchors_pre",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[height, width, self._feat_stride, self._anchor_scales, self._anchor_ratios]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "generate_anchors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_205": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_206": {
                "variable": {
                    "value": "initializer_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_208": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_209": {
                "variable": {
                    "value": "initializer_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._predictions['rpn_cls_score_reshape']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._anchor_targets['rpn_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_253": {
                "variable": {
                    "value": "rpn_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(rpn_label, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(rpn_cls_score, rpn_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(rpn_label, rpn_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_256": {
                "variable": {
                    "value": "rpn_cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=rpn_cls_score, labels=rpn_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._proposal_targets['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_270": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=cls_score, labels=label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_290": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "regu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_424": {
                "variable": {
                    "value": "self._summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_425": {
                "variable": {
                    "value": "self._summary_op_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_summaries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "to_int32_45": {
                "x": {
                    "value": "self._im_info[:2] / self._im_info[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zero_fraction_61": {
                "value": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "reshaped_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(bottom_reshaped, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(bottom)",
                            "Call"
                        ],
                        [
                            "tf.shape(bottom)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "'ANCHOR_' + self._tag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_238": {
                "x": {
                    "value": "tf.less(abs_in_box_diff, 1.0 / sigma_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_242": {
                "input_tensor": {
                    "value": "out_loss_box",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_outside_weights * in_loss_box",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "'LOSS_' + self._tag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_308": {
                "tensor": {
                    "value": "rpn_cls_score_reshape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._reshape_layer(rpn_cls_score, 2, 'rpn_cls_score_reshape')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_76": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1, num_dim, -1], [input_shape[2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_121": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_126": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_127": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_128": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_129": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._region_proposal(net_conv, is_training, initializer)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_131": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_133": {
                "x": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_191": {
                "x": {
                    "value": "self._im_info[0] / np.float32(self._feat_stride[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_192": {
                "x": {
                    "value": "self._im_info[1] / np.float32(self._feat_stride[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_238": {
                "x": {
                    "value": "abs_in_box_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(in_box_diff)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / sigma_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "not_equal_253": {
                "x": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_254": {
                "params": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._predictions['rpn_cls_score_reshape'], [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_cls_score, rpn_select), [-1, 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(rpn, self._num_anchors * 2, [1, 1], trainable=is_training, weights_initializer=initializer, padding='VALID', activation_fn=None, scope='rpn_cls_score')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_select",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_255": {
                "params": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_select",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_257": {
                "logits": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._predictions['rpn_cls_score_reshape'], [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_cls_score, rpn_select), [-1, 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(rpn, self._num_anchors * 2, [1, 1], trainable=is_training, weights_initializer=initializer, padding='VALID', activation_fn=None, scope='rpn_cls_score')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._anchor_targets['rpn_labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather(rpn_label, rpn_select), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_270": {
                "logits": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._predictions['cls_score']",
                            "Subscript"
                        ],
                        [
                            "slim.fully_connected(fc7, self._num_classes, weights_initializer=initializer, trainable=is_training, activation_fn=None, scope='cls_score')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._proposal_targets['labels'], [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_286": {
                "a": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_286": {
                "input": {
                    "value": "self._proposal_targets['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_286": {
                "value": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.tile(np.array(cfg.TRAIN.BBOX_NORMALIZE_STDS), self._num_classes)",
                            "Call"
                        ],
                        [
                            "np.tile(np.array(cfg.TRAIN.BBOX_NORMALIZE_STDS), self._num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_regularization_losses_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_317": {
                "control_inputs": {
                    "value": "[rpn_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_413": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_124": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_125": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_239": {
                "x": {
                    "value": "in_box_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_395": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_416": {
                "name": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "self._act_summaries",
                            "Attribute"
                        ],
                        [
                            "self._train_summaries",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "lib/nets/resnet_v1.py": {
        "tensorflow": {
            "squeeze_57": {
                "variable": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(rois, [0, 0], [-1, 1], name='batch_id')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_59": {
                "variable": {
                    "value": "bottom_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stop_gradient_67": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([y1, x1, y2, x2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_83": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_84": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(self._image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_124": {
                "variable": {
                    "value": "fc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc7",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(fc7, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "crop_and_resize_70": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[pre_pool_size, pre_pool_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_72": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [pre_pool_size, pre_pool_size], name='crops')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(crops, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(bottom, bboxes, tf.to_int32(batch_ids), [cfg.POOLING_SIZE, cfg.POOLING_SIZE], name='crops')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_and_resize_74": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.concat([y1, x1, y2, x2], 1))",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.to_int32(batch_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[cfg.POOLING_SIZE, cfg.POOLING_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Fix_Resnet_V1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_173": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_174": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/conv1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "slice_57": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_62": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_63": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_64": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_65": {
                "input_": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_67": {
                "values": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_171": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_60": {
                "x": {
                    "value": "bottom_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_61": {
                "x": {
                    "value": "bottom_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_70": {
                "x": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_74": {
                "x": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(rois, [0, 0], [-1, 1], name='batch_id'), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_177": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_178": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [7, 7, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nets/vgg16.py": {
        "tensorflow": {
            "repeat_28": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_30": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_31": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_34": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_36": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_37": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_39": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_40": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(self._image, 2, slim.conv2d, 64, [3, 3], trainable=False, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], trainable=False, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], trainable=is_training, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], padding='SAME', scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], trainable=is_training, scope='conv5')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_50": {
                "variable": {
                    "value": "pool5_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool5",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "fc6",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(pool5_flat, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc6, keep_prob=0.5, is_training=True, scope='dropout6')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "fc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc6, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(fc7, keep_prob=0.5, is_training=True, scope='dropout7')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "is_training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Fix_VGG16",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "fc6_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc6_conv",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 7, 512, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "fc7_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc7_conv",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4096, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "conv1_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_90": {
                "variable": {
                    "value": "restorer_fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{self._scope + '/fc6/weights': fc6_conv, self._scope + '/fc7/weights': fc7_conv, self._scope + '/conv1/conv1_1/weights': conv1_rgb}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_95": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/fc6/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(fc6_conv, self._variables_to_fix[self._scope + '/fc6/weights:0'].get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_97": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/fc7/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(fc7_conv, self._variables_to_fix[self._scope + '/fc7/weights:0'].get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_99": {
                "ref": {
                    "value": "self._variables_to_fix[self._scope + '/conv1/conv1_1/weights:0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reverse(conv1_rgb, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "fc6_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc6_conv', [7, 7, 512, 4096], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self._variables_to_fix[self._scope + '/fc6/weights:0'].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "fc7_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc7_conv', [1, 1, 4096, 4096], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self._variables_to_fix[self._scope + '/fc7/weights:0'].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_100": {
                "tensor": {
                    "value": "conv1_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1_rgb', [3, 3, 3, 64], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tools/convert_from_depre.py": {
        "tensorflow": {
            "ConfigProto_125": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_127": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_96": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.TRAIN.LEARNING_RATE * cfg.TRAIN.GAMMA",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE * cfg.TRAIN.GAMMA, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.MOMENTUM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_156": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_159": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "name2var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{convert_names(v.name): v for v in variables}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "Saver_160": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_131": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "Gradient_Mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_149": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(grad, scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "scale * 2.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tools/demo.py": {
        "tensorflow": {
            "ConfigProto_129": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_133": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_143": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_net.py": {
        "tensorflow": {
            "ConfigProto_89": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_93": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_115": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/trainval_net.py": {
        "tensorflow": {}
    }
}