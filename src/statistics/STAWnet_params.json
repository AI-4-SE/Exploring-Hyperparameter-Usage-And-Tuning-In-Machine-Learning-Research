{
    "engine.py": {
        "torch": {
            "Adam_9": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lrate",
                    "type": "Name",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wdecay",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "einsum_14": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncvl,vw->ncwl",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_72": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_77": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "self.filter_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.gate_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "self.residual_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.skip_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.gat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.start_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "residual_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.end_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "skip_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "end_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.end_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "end_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_217": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "skip[:, :, :, -s.size(3):]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "s + skip",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_218": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.end_conv_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.emb_length, num_nodes).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_177": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.receptive_field - in_len, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_188": {
                "variable": {
                    "value": "filter",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "filter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.filter_convs[i](residual)",
                            "Call"
                        ],
                        [
                            "torch.tanh(filter)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_190": {
                "variable": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gate_convs[i](residual)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_57": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "x_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.qm(x_embedding).permute(0, 3, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "residual_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dilation_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "new_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "new_dilation * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv1d_138": {
                "in_channels": {
                    "value": "residual_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dilation_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "new_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "new_dilation * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv1d_143": {
                "in_channels": {
                    "value": "dilation_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "residual_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_148": {
                "in_channels": {
                    "value": "dilation_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "skip_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "residual_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_127": {
                "*size": {
                    "value": "self.emb_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_66": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_134": {
                "variable": {
                    "value": "realy",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "yhat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_138": {
                "variable": {
                    "value": "testx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "engine.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '_exp' + str(args.expid) + '_best_' + str(round(his_loss[bestid], 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_78": {
                "variable": {
                    "value": "trainx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_80": {
                "variable": {
                    "value": "trainy",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "testx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_101": {
                "variable": {
                    "value": "testy",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "engine.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '_epoch_' + str(i) + '_' + str(round(mvalid_loss, 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "args.save + '_epoch_' + str(bestid + 1) + '_' + str(round(his_loss[bestid], 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "where_167": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_170": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_184": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_185": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_187": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_198": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_201": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_166": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_171": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_174": {
                "input": {
                    "value": "masked_mse(preds=preds, labels=labels, null_val=null_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_183": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_188": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_197": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_202": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_167": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_167": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_170": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_184": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_184": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_187": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_187": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_198": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_198": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_199": {
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_201": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_201": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_162": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "isnan_179": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "isnan_193": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}