{
    "datasets/cityscapes_dataset.py": {
        "torch": {
            "cityscapesDataSet_12": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.list_path": {
                    "value": "list_path",
                    "possible_values": []
                },
                "self.crop_size": {
                    "value": "crop_size",
                    "possible_values": [
                        [
                            "(321",
                            "MethodArgument"
                        ],
                        [
                            "(321",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.ignore_label": {
                    "value": "ignore_label",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.mean": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "(128",
                            "MethodArgument"
                        ],
                        [
                            "(128",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.is_mirror": {
                    "value": "mirror",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.set": {
                    "value": "set",
                    "possible_values": [
                        [
                            "'val'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cityscapesPseudo_56": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.list_path": {
                    "value": "list_path",
                    "possible_values": []
                },
                "self.crop_size": {
                    "value": "crop_size",
                    "possible_values": [
                        [
                            "(321",
                            "MethodArgument"
                        ],
                        [
                            "(321",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.ignore_label": {
                    "value": "ignore_label",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.mean": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "(128",
                            "MethodArgument"
                        ],
                        [
                            "(128",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.is_mirror": {
                    "value": "mirror",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "possible_values": [
                        [
                            "GTA5DataSet('./data', is_transform=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/gta5_dataset.py": {
        "torch": {
            "GTA5DataSet_13": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.list_path": {
                    "value": "list_path",
                    "possible_values": []
                },
                "self.crop_size": {
                    "value": "crop_size",
                    "possible_values": [
                        [
                            "(321",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.ignore_label": {
                    "value": "ignore_label",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.mean": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "(128",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.is_mirror": {
                    "value": "mirror",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "possible_values": [
                        [
                            "GTA5DataSet('./data', is_transform=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                }
            }
        }
    },
    "nets/deeplab_multi.py": {
        "torch": {
            "BasicBlock_24": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_30": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "ReLU_31": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_33": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion, affine=affine_par))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_56": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_61": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_62": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_67": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": [
                            [
                                "dilation",
                                "Name"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "dilation": {
                        "value": "dilation",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "BatchNorm2d_69": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "Conv2d_72": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_73": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "ReLU_76": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion, affine=affine_par))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Classifier_Module_103": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_106": {
                    "variable": {
                        "value": "self.conv2d_list",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "ResNetMulti_121": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_125": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_127": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "ReLU_130": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_131": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "ceil_mode": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "nets/discriminator.py": {
        "torch": {
            "FCDiscriminator_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_10": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "num_classes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "ndf",
                        "possible_values": [
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "4",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_11": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "ndf",
                        "possible_values": [
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "ndf * 2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "4",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_12": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "ndf * 2",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "ndf * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "4",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_13": {
                    "variable": {
                        "value": "self.conv4",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "ndf * 4",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "ndf * 8",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "4",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_14": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "ndf * 8",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "4",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "LeakyReLU_16": {
                    "variable": {
                        "value": "self.leaky_relu",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Upsample_17": {
                    "variable": {
                        "value": "self.up_sample",
                        "possible_values": []
                    },
                    "scale_factor": {
                        "value": "32",
                        "possible_values": []
                    },
                    "mode": {
                        "value": "bilinear",
                        "possible_values": []
                    }
                },
                "Sigmoid_18": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "nets/meta_base.py": {
        "torch": {
            "MetaModule_22": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Cifar10_254": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_272": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*layers",
                        "possible_values": []
                    }
                },
                "Sequential_280": {
                    "variable": {
                        "value": "self.fc_layers",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*layers",
                        "possible_values": []
                    }
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "ignore",
                    "possible_values": []
                },
                "in_features": {
                    "value": "*args",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "ignore",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "possible_values": []
                }
            },
            "Embedding_148": {
                "variable": {
                    "value": "ignore",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "*args",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_169": {
                "variable": {
                    "value": "ignore",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "variable": {
                    "value": "ignore",
                    "possible_values": []
                },
                "num_features": {
                    "value": "*args",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.main",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "self.fc_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 5 * 5",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "Dropout_294": {
                "variable": {
                    "value": "self.drop",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "max_pool2d_299": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "max_pool2d_300": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "relu_302": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "max_pool2d_316": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.main",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.fc_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "linear_111": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 147456)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 147456)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "embedding_159": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 147456)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "possible_values": []
                }
            },
            "conv_transpose2d_185": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 147456)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "self._output_padding(x, output_size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                }
            },
            "batch_norm_216": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 147456)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_230": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_234": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_261": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "ReLU_264": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "ReLU_266": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_275": {
                "in_features": {
                    "value": "147456",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_277": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Linear_278": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "possible_values": []
                }
            },
            "relu_299": {
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "relu_300": {
                "input": {
                    "value": "self.conv2(x)",
                    "possible_values": []
                }
            },
            "relu_316": {
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "Conv2d_325": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "ReLU_326": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_327": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "in_channels": {
                    "value": "6",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "ReLU_330": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_331": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_333": {
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "ReLU_334": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "in_features": {
                    "value": "120",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "in_features": {
                    "value": "84",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "*size": {
                    "value": "ignore.num_features",
                    "possible_values": []
                }
            },
            "ones_210": {
                "*size": {
                    "value": "ignore.num_features",
                    "possible_values": []
                }
            }
        }
    },
    "nets/meta_deeplab_multi.py": {
        "torch": {
            "load_214": {
                "variable": {
                    "value": "saved_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "./resnet_pretrained.pth",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.conv2d_list",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaConv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            }
        }
    },
    "tools/evaluate_cityscapes.py": {
        "torch": {
            "device_112": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapesDataSet(DATA_DIRECTORY, DATA_LIST_PATH, crop_size=(1024, 512), mean=IMG_MEAN, scale=False, mirror=False, set=SET)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_122": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1024, 2048)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_155": {
                "f": {
                    "value": "/home/cyang53/CED/Ours/MetaCorrection-CVPR/snapshots/Past/GTA5_best.pth",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_adv.py": {
        "torch": {
            "device_169": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if not args.cpu else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "GTA5DataSet(args.data_dir, args.data_list, max_iters=args.num_steps * args.iter_size * args.batch_size, crop_size=input_size, scale=args.random_scale, mirror=args.random_mirror, mean=IMG_MEAN)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "targetloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapesDataSet(args.data_dir_target, args.data_list_target, max_iters=args.num_steps * args.iter_size * args.batch_size, crop_size=input_size_target, scale=False, mirror=args.random_mirror, mean=IMG_MEAN, set=args.set)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SGD_236": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.optim_parameters(args)",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "Adam_240": {
                "variable": {
                    "value": "optimizer_D1",
                    "possible_values": []
                },
                "params": {
                    "value": "model_D1.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_D",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "possible_values": []
                }
            },
            "Adam_243": {
                "variable": {
                    "value": "optimizer_D2",
                    "possible_values": []
                },
                "params": {
                    "value": "model_D2.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_D",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_250": {
                "variable": {
                    "value": "seg_loss",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "possible_values": []
                }
            },
            "Upsample_252": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[1], input_size[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_253": {
                "variable": {
                    "value": "interp_target",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size_target[1], input_size_target[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_247": {
                "variable": {
                    "value": "bce_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "saved_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore_from",
                    "possible_values": []
                }
            },
            "MSELoss_249": {
                "variable": {
                    "value": "bce_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_414": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, 'GTA5_' + str(args.num_steps_stop) + '.pth')",
                    "possible_values": []
                }
            },
            "save_415": {
                "obj": {
                    "value": "model_D1.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, 'GTA5_' + str(args.num_steps_stop) + '_D1.pth')",
                    "possible_values": []
                }
            },
            "save_416": {
                "obj": {
                    "value": "model_D2.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, 'GTA5_' + str(args.num_steps_stop) + '_D2.pth')",
                    "possible_values": []
                }
            },
            "softmax_327": {
                "input": {
                    "value": "pred_target1",
                    "possible_values": [
                        [
                            "interp_target(pred_target1)",
                            "Call"
                        ],
                        [
                            "pred_target1.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_328": {
                "input": {
                    "value": "pred_target2",
                    "possible_values": [
                        [
                            "interp_target(pred_target2)",
                            "Call"
                        ],
                        [
                            "pred_target2.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_353": {
                "input": {
                    "value": "pred1",
                    "possible_values": [
                        [
                            "interp(pred1)",
                            "Call"
                        ],
                        [
                            "pred1.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_354": {
                "input": {
                    "value": "pred2",
                    "possible_values": [
                        [
                            "interp(pred2)",
                            "Call"
                        ],
                        [
                            "pred2.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_373": {
                "input": {
                    "value": "pred_target1",
                    "possible_values": [
                        [
                            "interp_target(pred_target1)",
                            "Call"
                        ],
                        [
                            "pred_target1.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_374": {
                "input": {
                    "value": "pred_target2",
                    "possible_values": [
                        [
                            "interp_target(pred_target2)",
                            "Call"
                        ],
                        [
                            "pred_target2.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_meta.py": {
        "torch": {
            "where_193": {
                "variable": {
                    "value": "source_like",
                    "possible_values": []
                },
                "condition": {
                    "value": "meta_map < 0.5",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "metaloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "GTA5DataSet(args.data_dir, args.data_list, max_iters=args.num_steps * args.iter_size * args.batch_size, crop_size=input_size_target, scale=False, mirror=args.random_mirror, mean=IMG_MEAN)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.update_f * args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_221": {
                "variable": {
                    "value": "targetloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapesPseudo(args.data_dir_target, args.data_list_target, max_iters=args.num_steps * args.iter_size * args.batch_size, crop_size=input_size_target, scale=False, mirror=args.random_mirror, mean=IMG_MEAN)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_231": {
                "variable": {
                    "value": "saved_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore_from",
                    "possible_values": []
                }
            },
            "SGD_235": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "main_model.optim_parameters(args)",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "Upsample_241": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_242": {
                "variable": {
                    "value": "interp_target",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_185": {
                "f": {
                    "value": "/home/cyang53/CED/Baseline/AdaptSegNet-CVPR2018/snapshots/GTA5_best.pth",
                    "possible_values": []
                }
            },
            "load_187": {
                "f": {
                    "value": "/home/cyang53/CED/Ours/AdaptSegNet-CVPR2018/snapshots/GTA5_best_D2.pth",
                    "possible_values": []
                }
            },
            "softmax_276": {
                "variable": {
                    "value": "y_f_hat1",
                    "possible_values": []
                },
                "input": {
                    "value": "interp_target(y_f_hat1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "permute_276": {
                "variable": {
                    "value": "y_f_hat1",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "softmax_277": {
                "variable": {
                    "value": "y_f_hat2",
                    "possible_values": []
                },
                "input": {
                    "value": "interp_target(y_f_hat2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "permute_277": {
                "variable": {
                    "value": "y_f_hat2",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mm_279": {
                "variable": {
                    "value": "pre1",
                    "possible_values": []
                },
                "input": {
                    "value": "y_f_hat1",
                    "possible_values": [
                        [
                            "torch.softmax(interp_target(y_f_hat1), dim=1).permute(0, 2, 3, 1).contiguous().view(-1, args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.softmax(interp_target(y_f_hat1), dim=1).permute(0, 2, 3, 1).contiguous().view(-1, args.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "T1",
                    "possible_values": [
                        [
                            "to_var(torch.eye(19, 19))",
                            "Call"
                        ],
                        [
                            "torch.clamp(T1 - 0.11 * grad_eps1, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_279": {
                "variable": {
                    "value": "pre1",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "mm_280": {
                "variable": {
                    "value": "pre2",
                    "possible_values": []
                },
                "input": {
                    "value": "y_f_hat2",
                    "possible_values": [
                        [
                            "torch.softmax(interp_target(y_f_hat2), dim=1).permute(0, 2, 3, 1).contiguous().view(-1, args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.softmax(interp_target(y_f_hat2), dim=1).permute(0, 2, 3, 1).contiguous().view(-1, args.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "T2",
                    "possible_values": [
                        [
                            "to_var(torch.eye(19, 19))",
                            "Call"
                        ],
                        [
                            "torch.clamp(T2 - 0.11 * grad_eps2, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_280": {
                "variable": {
                    "value": "pre2",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "grad_285": {
                "variable": {
                    "value": "grads",
                    "possible_values": []
                },
                "outputs": {
                    "value": "l_f_meta",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss_calc(pre2, label) + 0.1 * loss_calc(pre1, label)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "meta_net.params()",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_295": {
                "variable": {
                    "value": "y_g_hat1",
                    "possible_values": []
                },
                "input": {
                    "value": "interp(y_g_hat1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_296": {
                "variable": {
                    "value": "y_g_hat2",
                    "possible_values": []
                },
                "input": {
                    "value": "interp(y_g_hat2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_303": {
                "variable": {
                    "value": "T1",
                    "possible_values": []
                },
                "input": {
                    "value": "T1 - 0.11 * grad_eps1",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_305": {
                "variable": {
                    "value": "norm_c",
                    "possible_values": []
                },
                "input": {
                    "value": "T1",
                    "possible_values": [
                        [
                            "to_var(torch.eye(19, 19))",
                            "Call"
                        ],
                        [
                            "torch.clamp(T1 - 0.11 * grad_eps1, min=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_312": {
                "variable": {
                    "value": "T2",
                    "possible_values": []
                },
                "input": {
                    "value": "T2 - 0.11 * grad_eps2",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_314": {
                "variable": {
                    "value": "norm_c",
                    "possible_values": []
                },
                "input": {
                    "value": "T2",
                    "possible_values": [
                        [
                            "to_var(torch.eye(19, 19))",
                            "Call"
                        ],
                        [
                            "torch.clamp(T2 - 0.11 * grad_eps2, min=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_322": {
                "variable": {
                    "value": "y_f_hat1",
                    "possible_values": []
                },
                "input": {
                    "value": "interp_target(y_f_hat1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "permute_322": {
                "variable": {
                    "value": "y_f_hat1",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "softmax_323": {
                "variable": {
                    "value": "y_f_hat2",
                    "possible_values": []
                },
                "input": {
                    "value": "interp_target(y_f_hat2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "permute_323": {
                "variable": {
                    "value": "y_f_hat2",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mm_324": {
                "variable": {
                    "value": "pre1",
                    "possible_values": []
                },
                "input": {
                    "value": "y_f_hat1",
                    "possible_values": [
                        [
                            "torch.softmax(interp_target(y_f_hat1), dim=1).permute(0, 2, 3, 1).contiguous().view(-1, args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.softmax(interp_target(y_f_hat1), dim=1).permute(0, 2, 3, 1).contiguous().view(-1, args.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "T1",
                    "possible_values": [
                        [
                            "to_var(torch.eye(19, 19))",
                            "Call"
                        ],
                        [
                            "torch.clamp(T1 - 0.11 * grad_eps1, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_324": {
                "variable": {
                    "value": "pre1",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "mm_325": {
                "variable": {
                    "value": "pre2",
                    "possible_values": []
                },
                "input": {
                    "value": "y_f_hat2",
                    "possible_values": [
                        [
                            "torch.softmax(interp_target(y_f_hat2), dim=1).permute(0, 2, 3, 1).contiguous().view(-1, args.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.softmax(interp_target(y_f_hat2), dim=1).permute(0, 2, 3, 1).contiguous().view(-1, args.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "T2",
                    "possible_values": [
                        [
                            "to_var(torch.eye(19, 19))",
                            "Call"
                        ],
                        [
                            "torch.clamp(T2 - 0.11 * grad_eps2, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_325": {
                "variable": {
                    "value": "pre2",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "main_model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.log_dir, 'GTA5_' + str(args.num_steps_stop) + '.pth')",
                    "possible_values": []
                }
            },
            "eye_272": {
                "n": {
                    "value": "19",
                    "possible_values": []
                },
                "m": {
                    "value": "19",
                    "possible_values": []
                }
            },
            "eye_273": {
                "n": {
                    "value": "19",
                    "possible_values": []
                },
                "m": {
                    "value": "19",
                    "possible_values": []
                }
            },
            "grad_299": {
                "outputs": {
                    "value": "l_g_meta",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss_calc(y_g_hat2, y_val) + 0.1 * loss_calc(y_g_hat1, y_val)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "T1",
                    "possible_values": [
                        [
                            "to_var(torch.eye(19, 19))",
                            "Call"
                        ],
                        [
                            "torch.clamp(T1 - 0.11 * grad_eps1, min=0)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_300": {
                "outputs": {
                    "value": "l_g_meta",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss_calc(y_g_hat2, y_val) + 0.1 * loss_calc(y_g_hat1, y_val)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "T2",
                    "possible_values": [
                        [
                            "to_var(torch.eye(19, 19))",
                            "Call"
                        ],
                        [
                            "torch.clamp(T2 - 0.11 * grad_eps2, min=0)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_302": {
                "input": {
                    "value": "grad_eps1",
                    "possible_values": [
                        [
                            "torch.autograd.grad(l_g_meta, T1, only_inputs=True, retain_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "grad_eps1 / torch.max(grad_eps1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_311": {
                "input": {
                    "value": "grad_eps2",
                    "possible_values": [
                        [
                            "torch.autograd.grad(l_g_meta, T2, only_inputs=True)[0]",
                            "Subscript"
                        ],
                        [
                            "grad_eps2 / torch.max(grad_eps2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_360": {
                "obj": {
                    "value": "main_model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.log_dir, 'MetaCorrection_best.pth')",
                    "possible_values": []
                }
            },
            "softmax_192": {
                "input": {
                    "value": "output2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "CrossEntropy2d_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.size_average": {
                    "value": "size_average",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.ignore_label": {
                    "value": "ignore_label",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.is_softmax": {
                    "value": "is_softmax",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_37": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "possible_values": [
                        [
                            "predict.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "predict[target_mask.view(n, h, w, 1).repeat(1, 1, 1, c)].view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "log_39": {
                "variable": {
                    "value": "log_out",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "possible_values": [
                        [
                            "predict.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "predict[target_mask.view(n, h, w, 1).repeat(1, 1, 1, c)].view(-1, c)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_40": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "log_out",
                    "possible_values": [
                        [
                            "torch.log(predict)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}