{
    "momentum_teacher/exps/arxiv/base_exp.py": {
        "torch": {}
    },
    "momentum_teacher/exps/arxiv/exp_128_2080ti/momentum2_teacher_100e_4096batch_16mm_exp.py": {
        "torch": {}
    },
    "momentum_teacher/exps/arxiv/linear_eval_exp.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, 1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_23": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(True, typical_imagenet_transform(True))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(False, typical_imagenet_transform(False))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.distributed.DistributedSampler(eval_set) if is_distributed else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_98": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.basic_lr_per_img * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "num_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_79": {
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(True, typical_imagenet_transform(True))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_90": {
                "dataset": {
                    "value": "eval_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNet(False, typical_imagenet_transform(False))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "momentum_teacher/exps/arxiv/momentum2_teacher_exp.py": {
        "torch": {
            "DataLoader_59": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SSL_Dataset(transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_72": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.student_encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.warmup_lr",
                            "Attribute"
                        ],
                        [
                            "self.basic_lr_per_img * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_52": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SSL_Dataset(transform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "momentum_teacher/layers/optimizer.py": {
        "torch": {
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_71": {
                "variable": {
                    "value": "weight_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_72": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "momentum_teacher/models/m2_teacher.py": {
        "torch": {
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "momentum_teacher/models/resnet_mbn.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - tmp_running_mean[None, :, None, None].detach()) / torch.sqrt(tmp_running_var[None, :, None, None].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :, None, None] + self.bias[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "(x - tmp_running_mean[None, :].detach()) / torch.sqrt(tmp_running_var[None, :].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :] + self.bias[None, :]",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "var_81": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - tmp_running_mean[None, :, None, None].detach()) / torch.sqrt(tmp_running_var[None, :, None, None].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :, None, None] + self.bias[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "(x - tmp_running_mean[None, :].detach()) / torch.sqrt(tmp_running_var[None, :].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :] + self.bias[None, :]",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - tmp_running_mean[None, :, None, None].detach()) / torch.sqrt(tmp_running_var[None, :, None, None].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :, None, None] + self.bias[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "(x - tmp_running_mean[None, :].detach()) / torch.sqrt(tmp_running_var[None, :].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :] + self.bias[None, :]",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "var_131": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - tmp_running_mean[None, :, None, None].detach()) / torch.sqrt(tmp_running_var[None, :, None, None].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :, None, None] + self.bias[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "(x - tmp_running_mean[None, :].detach()) / torch.sqrt(tmp_running_var[None, :].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :] + self.bias[None, :]",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_298": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_301": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_306": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_424": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - tmp_running_mean[None, :, None, None].detach()) / torch.sqrt(tmp_running_var[None, :, None, None].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :, None, None] + self.bias[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "(x - tmp_running_mean[None, :].detach()) / torch.sqrt(tmp_running_var[None, :].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :] + self.bias[None, :]",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_44": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - tmp_running_mean[None, :, None, None].detach()) / torch.sqrt(tmp_running_var[None, :, None, None].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :, None, None] + self.bias[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "(x - tmp_running_mean[None, :].detach()) / torch.sqrt(tmp_running_var[None, :].detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.weight[None, :] + self.bias[None, :]",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_386": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_409": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_90": {
                "input": {
                    "value": "tmp_running_var[None, :, None, None].detach() + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_139": {
                "input": {
                    "value": "tmp_running_var[None, :].detach() + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_313": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_314": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_327": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_319": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_321": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_322": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_328": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_329": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_330": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_332": {
                "num_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, low_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_340": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_342": {
                "in_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_344": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_345": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_350": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_352": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_353": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_357": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "momentum_teacher/tools/eval.py": {
        "torch": {}
    },
    "momentum_teacher/tools/train.py": {
        "torch": {}
    },
    "momentum_teacher/utils/__init__.py": {
        "torch": {
            "save_42": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save, model_name + '_ckpt.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "momentum_teacher/utils/torch_dist.py": {
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}