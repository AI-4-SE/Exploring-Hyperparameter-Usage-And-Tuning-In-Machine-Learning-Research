{
    "classifier_training_utils.py": {
        "sklearn": {
            "compute_class_weight_100": {
                "variable": {
                    "value": "class_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "Constant",
                    "possible_values": []
                },
                "classes": {
                    "value": "np.unique(label_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "label_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_train[y_train == 1][:, 6]",
                            "Subscript"
                        ],
                        [
                            "y_train",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "is_available_12": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.tensor(input_train), torch.tensor(label_train).reshape(-1, 1), torch.tensor(sample_weights[0]).reshape(-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.tensor(input_train), torch.tensor(label_train).reshape(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.tensor(input_val), torch.tensor(label_val).reshape(-1, 1), torch.tensor(sample_weights[1]).reshape(-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.tensor(input_val), torch.tensor(label_val).reshape(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_110": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(input_train)",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_113": {
                "variable": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(input_val)",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_117": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(input_train)",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_119": {
                "variable": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(input_val)",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "input_train",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "X_train[:, 1:5]",
                            "Subscript"
                        ],
                        [
                            "X_train[:, :5]",
                            "Subscript"
                        ],
                        [
                            "input_train[y_train == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "data": {
                    "value": "label_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_train[y_train == 1][:, 6]",
                            "Subscript"
                        ],
                        [
                            "y_train",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "sample_weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "input_val",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "X_val[:, 1:5]",
                            "Subscript"
                        ],
                        [
                            "X_test[:, 1:5]",
                            "Subscript"
                        ],
                        [
                            "X_val[:, :5]",
                            "Subscript"
                        ],
                        [
                            "X_test[:, :5]",
                            "Subscript"
                        ],
                        [
                            "input_val[X_val[:, -2] == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_114": {
                "data": {
                    "value": "label_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_val[X_val[:, -2] == 1][:, 6]",
                            "Subscript"
                        ],
                        [
                            "X_val[:, -2]",
                            "Subscript"
                        ],
                        [
                            "y_test",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "sample_weights[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "input_train",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "X_train[:, 1:5]",
                            "Subscript"
                        ],
                        [
                            "X_train[:, :5]",
                            "Subscript"
                        ],
                        [
                            "input_train[y_train == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "data": {
                    "value": "label_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_train[y_train == 1][:, 6]",
                            "Subscript"
                        ],
                        [
                            "y_train",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "input_val",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "X_val[:, 1:5]",
                            "Subscript"
                        ],
                        [
                            "X_test[:, 1:5]",
                            "Subscript"
                        ],
                        [
                            "X_val[:, :5]",
                            "Subscript"
                        ],
                        [
                            "X_test[:, :5]",
                            "Subscript"
                        ],
                        [
                            "input_val[X_val[:, -2] == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_120": {
                "data": {
                    "value": "label_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_val[X_val[:, -2] == 1][:, 6]",
                            "Subscript"
                        ],
                        [
                            "X_val[:, -2]",
                            "Subscript"
                        ],
                        [
                            "y_test",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_120": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_model + '_ep' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "batch_labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if use_cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_181": {
                "*size": {
                    "value": "batch_labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if use_cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data_handler.py": {
        "sklearn": {
            "KernelDensity_683": {
                "bandwidth": {
                    "value": "self.KDE_bandwidth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel": {
                    "value": "gaussian",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "log_971": {
                "variable": {
                    "value": "data4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data3 / (1 - data3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_991": {
                "variable": {
                    "value": "sigorbg",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_992": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_993": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[:, 1:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1015": {
                "variable": {
                    "value": "datadict[sigmask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_data[:, -1] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_1016": {
                "variable": {
                    "value": "datadict[bgmask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_data[:, -1] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "TensorDataset_1091": {
                "variable": {
                    "value": "datadict[dataset]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "datadict['tensor2']",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1092": {
                "variable": {
                    "value": "datadict[loader]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datadict['dataset']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle_loader",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_621": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_663": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_737": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_770": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_990": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_998": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_1076": {
                "variable": {
                    "value": "datadict[mean2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "reference_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor2",
                            "Name"
                        ],
                        [
                            "datadict['tensor']",
                            "Subscript"
                        ],
                        [
                            "reference_tensor_logit_fix",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "std_1077": {
                "variable": {
                    "value": "datadict[std2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "reference_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor2",
                            "Name"
                        ],
                        [
                            "datadict['tensor']",
                            "Subscript"
                        ],
                        [
                            "reference_tensor_logit_fix",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "std_1078": {
                "variable": {
                    "value": "datadict[std2_logit_fix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "reference_tensor_logit_fix",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_13": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_623": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_669": {
                "variable": {
                    "value": "uni_mjj_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uni_mjj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.uniform(low=self.cond_min, high=self.cond_max, size=(self.n_samples, 1)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_669": {
                "variable": {
                    "value": "uni_mjj_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_690": {
                "variable": {
                    "value": "train_mjj_vals_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_mjj_vals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "logit_transform_inverse(KernelDensity(bandwidth=self.KDE_bandwidth, kernel='gaussian').fit(mjj_logit.reshape(-1, 1)).sample(self.n_samples), max(raw_train_mjj_vals).item(), min(raw_train_mjj_vals).item())",
                            "Call"
                        ],
                        [
                            "train_mjj_vals.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_690": {
                "variable": {
                    "value": "train_mjj_vals_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_790": {
                "variable": {
                    "value": "tensor2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.sample_array",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_1025": {
                "input": {
                    "value": "datadict['tensor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_1026": {
                "input": {
                    "value": "datadict['tensor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_799": {
                "ndarray": {
                    "value": "self.sample_array",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_782": {
                "ndarray": {
                    "value": "self.sample_array",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_786": {
                "ndarray": {
                    "value": "self.sample_array",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation_utils.py": {
        "sklearn": {
            "roc_curve_287": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "X_test[:, -1][y_test == 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "preds_matris[j, i][y_test == 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_curve_306": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_test[:, -2]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_matris[j, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_60": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_318": {
                "variable": {
                    "value": "bce",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if use_cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ANODE_evaluation_utils.py": {
        "torch": {
            "exp_76": {
                "variable": {
                    "value": "R_ANODE_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p_data_test - log_p_bkg_test",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "full_loss_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_78": {
                "variable": {
                    "value": "R_ANODE_extrasig",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p_data_extrasig - log_p_bkg_extrasig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "loss_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_vals_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_35": {
                "variable": {
                    "value": "loss_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_vals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(loss_vals_list)",
                            "Call"
                        ],
                        [
                            "torch.exp(loss_vals)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_vals, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.log(loss_vals).flatten()",
                            "Call"
                        ],
                        [
                            "loss_vals.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_36": {
                "variable": {
                    "value": "loss_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_vals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(loss_vals_list)",
                            "Call"
                        ],
                        [
                            "torch.exp(loss_vals)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_vals, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.log(loss_vals).flatten()",
                            "Call"
                        ],
                        [
                            "loss_vals.flatten()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_37": {
                "variable": {
                    "value": "loss_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_vals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(loss_vals_list)",
                            "Call"
                        ],
                        [
                            "torch.exp(loss_vals)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_vals, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.log(loss_vals).flatten()",
                            "Call"
                        ],
                        [
                            "loss_vals.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_37": {
                "variable": {
                    "value": "loss_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "torch.log(2 * (1 + torch.cosh(data * stdval + meanval)) / (stdval * (maxval - minval)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "2 * (1 + torch.cosh(data * stdval + meanval)) / (stdval * (maxval - minval))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cosh_31": {
                "input": {
                    "value": "data * stdval + meanval",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ANODE_training_utils.py": {
        "torch": {
            "device_9": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, model_file_name + '_epoch_' + str(epoch) + '.par')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_156": {
                "input": {
                    "value": "correct_logit * data * (1.0 - data)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_156": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_161": {
                "input": {
                    "value": "loss_vals",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loss_vals_raw.flatten()",
                            "Call"
                        ],
                        [
                            "loss_vals[~torch.isnan(loss_vals)]",
                            "Subscript"
                        ],
                        [
                            "loss_vals[torch.abs(loss_vals) < 1000]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_162": {
                "input": {
                    "value": "loss_vals",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loss_vals_raw.flatten()",
                            "Call"
                        ],
                        [
                            "loss_vals[~torch.isnan(loss_vals)]",
                            "Subscript"
                        ],
                        [
                            "loss_vals[torch.abs(loss_vals) < 1000]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_96": {
                "input": {
                    "value": "data_std * data * (1.0 - data)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_96": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_159": {
                "input": {
                    "value": "loss_vals",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loss_vals_raw.flatten()",
                            "Call"
                        ],
                        [
                            "loss_vals[~torch.isnan(loss_vals)]",
                            "Subscript"
                        ],
                        [
                            "loss_vals[torch.abs(loss_vals) < 1000]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_160": {
                "input": {
                    "value": "loss_vals",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "loss_vals_raw.flatten()",
                            "Call"
                        ],
                        [
                            "loss_vals[~torch.isnan(loss_vals)]",
                            "Subscript"
                        ],
                        [
                            "loss_vals[torch.abs(loss_vals) < 1000]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "classifier.py": {
        "torch": {
            "rand_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.model_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_25": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(params['learning_rate'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand(5)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if use_cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "n_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nodes",
                            "Name"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "n_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nodes",
                            "Name"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "density_estimator.py": {
        "torch": {
            "device_45": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "load_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "flows.py": {
        "torch": {
            "from_numpy_60": {
                "ndarray": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty((2 * n_masks, num_inputs))",
                            "Call"
                        ],
                        [
                            "np.identity(num_inputs)",
                            "Call"
                        ],
                        [
                            "self.mask.repeat(inputs.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_79": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.linear.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.s_trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.t_trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_246": {
                "variable": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_247": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_303": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_304": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_331": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_inputs, num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tril_355": {
                "variable": {
                    "value": "self.L_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.W.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_360": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_361": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(U)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_366": {
                "variable": {
                    "value": "self.sign_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sign_S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.sign(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_367": {
                "variable": {
                    "value": "self.log_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(log_S)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_369": {
                "variable": {
                    "value": "self.I",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.L.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_486": {
                "variable": {
                    "value": "self.scale_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(total_inputs, num_hidden)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.translate_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(total_inputs, num_hidden)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_555": {
                "variable": {
                    "value": "self.CL_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(total_inputs, num_hidden)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_575": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_591": {
                "variable": {
                    "value": "transform_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transform_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "params.view(batch_size, self.output_multiplier, features)",
                            "Call"
                        ],
                        [
                            "torch.transpose(transform_params, 1, 2)",
                            "Call"
                        ],
                        [
                            "autoregressive_params.view(batch_size, features, self.output_multiplier)",
                            "Call"
                        ],
                        [
                            "autoregressive_params.view(batch_size, self.output_multiplier, features)",
                            "Call"
                        ],
                        [
                            "torch.transpose(transform_params, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_748": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_779": {
                "variable": {
                    "value": "transform_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transform_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "params.view(batch_size, self.output_multiplier, features)",
                            "Call"
                        ],
                        [
                            "torch.transpose(transform_params, 1, 2)",
                            "Call"
                        ],
                        [
                            "autoregressive_params.view(batch_size, features, self.output_multiplier)",
                            "Call"
                        ],
                        [
                            "autoregressive_params.view(batch_size, self.output_multiplier, features)",
                            "Call"
                        ],
                        [
                            "torch.transpose(transform_params, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_817": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "reduce_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(num_batch_dims, x.ndimension()))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.cond_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cond_in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_202": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_415": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs / (1.0 - inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "masked_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[masked_inputs, cond_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_511": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.scale_net(masked_inputs) * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.scale_net(masked_inputs) * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_516": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_571": {
                "variable": {
                    "value": "masked_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[masked_inputs, cond_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_639": {
                "variable": {
                    "value": "logdets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_661": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_685": {
                "variable": {
                    "value": "logdets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_705": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_760": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_22": {
                "start": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_27": {
                "start": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_142": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_246": {
                "*size": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "*size": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_252": {
                "*size": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_303": {
                "*size": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_304": {
                "*size": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_331": {},
            "ones_355": {
                "*size": {
                    "value": "self.W.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "ndarray": {
                    "value": "L",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.L * self.L_mask + self.I",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_361": {
                "ndarray": {
                    "value": "U",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.U * self.U_mask + torch.diag(self.sign_S * torch.exp(self.log_S))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_367": {
                "ndarray": {
                    "value": "log_S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(abs(S))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_380": {
                "input": {
                    "value": "self.sign_S * torch.exp(self.log_S)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_427": {
                "n": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argsort_428": {
                "input": {
                    "value": "self.perm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_487": {
                "in_features": {
                    "value": "total_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_inputs + num_cond_inputs",
                            "BinOp"
                        ],
                        [
                            "num_inputs",
                            "Name"
                        ],
                        [
                            "int(mask.sum() + num_cond_inputs)",
                            "Call"
                        ],
                        [
                            "int(mask.sum())",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_488": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_489": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_491": {
                "in_features": {
                    "value": "total_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_inputs + num_cond_inputs",
                            "BinOp"
                        ],
                        [
                            "num_inputs",
                            "Name"
                        ],
                        [
                            "int(mask.sum() + num_cond_inputs)",
                            "Call"
                        ],
                        [
                            "int(mask.sum())",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_492": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_493": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_556": {
                "in_features": {
                    "value": "total_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_inputs + num_cond_inputs",
                            "BinOp"
                        ],
                        [
                            "num_inputs",
                            "Name"
                        ],
                        [
                            "int(mask.sum() + num_cond_inputs)",
                            "Call"
                        ],
                        [
                            "int(mask.sum())",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_557": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_558": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.transformed_dimensions * self.output_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_25": {
                "start": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_144": {
                "input": {
                    "value": "-a",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_157": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_198": {
                "input": {
                    "value": "-a",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_218": {
                "input": {
                    "value": "s(inputs) * (1 - s(inputs))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_221": {
                "input": {
                    "value": "inputs / (1 - inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_287": {
                "input": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_309": {
                "input": {
                    "value": "1.0 / (inputs.std(0) + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_336": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_412": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_413": {
                "input": {
                    "value": "logabsdet",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(inputs) / (1.0 + torch.exp(inputs)) ** 2",
                            "BinOp"
                        ],
                        [
                            "-torch.log(inputs - inputs ** 2)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_413": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_413": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_416": {
                "input": {
                    "value": "inputs - inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_432": {
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_452": {
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_455": {
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_222": {
                "input": {
                    "value": "inputs - inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_222": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_276": {
                "input": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_315": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_340": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_340": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_381": {
                "input": {
                    "value": "self.log_S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_388": {
                "input": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.P @ L @ U",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_411": {
                "input": {
                    "value": "-inputs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "a[:, i_col]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_206": {
                "input": {
                    "value": "a[:, i_col]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_318": {
                "input": {
                    "value": "-self.weight",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_277": {
                "input": {
                    "value": "var",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.batch_var",
                            "Attribute"
                        ],
                        [
                            "self.running_var",
                            "Attribute"
                        ],
                        [
                            "self.batch_var",
                            "Attribute"
                        ],
                        [
                            "self.running_var",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_291": {
                "input": {
                    "value": "var",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.batch_var",
                            "Attribute"
                        ],
                        [
                            "self.running_var",
                            "Attribute"
                        ],
                        [
                            "self.batch_var",
                            "Attribute"
                        ],
                        [
                            "self.running_var",
                            "Attribute"
                        ]
                    ]
                }
            },
            "slogdet_336": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slogdet_340": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "run_ANODE_evaluation.py": {
        "torch": {
            "is_available_36": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_ANODE_training.py": {
        "torch": {
            "is_available_54": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "run_classifier_data_creation.py": {
        "torch": {
            "is_available_75": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}