{
    "zscomm/experiment.py": {
        "sklearn": {
            "f1_score_150": {
                "variable": {
                    "value": "mean_ground_truth_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth_labels.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_156": {
                "variable": {
                    "value": "ground_truth_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth_labels.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "RMSprop_56": {
                "variable": {
                    "value": "self.optimiser_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_57": {
                "variable": {
                    "value": "self.optimiser_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "test_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.loss_fn(outputs, targets, **self.loss_kwargs) for (_, targets, outputs) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "ground_truth_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.argmax(targets[-1], axis=-1) for (_, targets, _) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_140": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.argmax(student_preds, axis=-1) for (_, _, (student_preds, _)) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "variable": {
                    "value": "mean_student_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[student_pred_matches_implied_class(outputs, targets) for (_, targets, outputs) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_mean_175": {
                "variable": {
                    "value": "mean_teacher_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[teacher_test_message_is_correct(outputs, targets) for (_, targets, outputs) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "variable": {
                    "value": "mean_protocol_diversity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[protocol_diversity_loss(outputs) ** (-1) for (_, targets, outputs) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "variable": {
                    "value": "mean_protocol_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[protocol_entropy(outputs) for (_, targets, outputs) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GradientTape_97": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_253": {
                "variable": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_s + loss_t",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(outputs, targets)",
                            "Call"
                        ],
                        [
                            "self.training_step()",
                            "Call"
                        ],
                        [
                            "round(item.get('loss', np.nan), 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_136": {
                "input": {
                    "value": "targets[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_141": {
                "input": {
                    "value": "student_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_255": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_s + loss_t",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(outputs, targets)",
                            "Call"
                        ],
                        [
                            "self.training_step()",
                            "Call"
                        ],
                        [
                            "round(item.get('loss', np.nan), 3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zscomm/agent.py": {
        "tensorflow": {
            "Concatenate_24": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_30": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "first_activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_38": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_59": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.channel_size + self.num_classes + 1",
                            "BinOp"
                        ],
                        [
                            "self.channel_size + self.num_classes",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Lambda_62": {
                "variable": {
                    "value": "self.extract_utterance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: x[:, :self.channel_size]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_65": {
                "variable": {
                    "value": "self.extract_class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: tf.nn.softmax(x[:, self.channel_size:])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder(inp)",
                            "Call"
                        ],
                        [
                            "self.concat([x, prev_utt, other_utt])",
                            "Call"
                        ],
                        [
                            "self.dense1(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Lambda_28": {
                "function": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "logits": {
                    "value": "x[:, self.channel_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "zscomm/analysis.py": {
        "tensorflow": {
            "shape_6": {
                "variable": {
                    "value": "(*_, msg_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "message",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_9": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(label_indices, msg_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "map_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(num_rows, msg_size)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "concat_22": {
                "variable": {
                    "value": "messages",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[history[-1]['message_from_teacher'] for (*_, (_, history)) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_27": {
                "variable": {
                    "value": "cls_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.argmax(targets[-1], axis=-1) for (_, targets, _) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_32": {
                "variable": {
                    "value": "(*_, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "games_played[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_33": {
                "variable": {
                    "value": "(*_, msg_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "messages",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([history[-1]['message_from_teacher'] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[item['message_from_teacher'] for item in history[:-1]] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(messages, (num_ts * batch_size, chan_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "cm_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_classes, msg_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "variable": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cm_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros((num_classes, msg_size))",
                            "Call"
                        ],
                        [
                            "cm_map + make_map(cls_label, message, num_classes)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_40": {
                "variable": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cm_map, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_totals, msg_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_totals, tf.shape(cm_map))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(im_map, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_totals, msg_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_totals, tf.shape(im_map))",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "msg_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cm_map, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_totals, msg_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_totals, tf.shape(cm_map))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(im_map, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_totals, msg_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_totals, tf.shape(im_map))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(cm_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "messages",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[item['message_from_teacher'] for item in history[:-1]] for (*_, (_, history)) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_57": {
                "variable": {
                    "value": "(num_ts, batch_size, chan_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "messages",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([history[-1]['message_from_teacher'] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[item['message_from_teacher'] for item in history[:-1]] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(messages, (num_ts * batch_size, chan_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "messages",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "messages",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([history[-1]['message_from_teacher'] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[item['message_from_teacher'] for item in history[:-1]] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(messages, (num_ts * batch_size, chan_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_ts * batch_size, chan_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_60": {
                "variable": {
                    "value": "time_step_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[int(batch_size) * [i] for (i, _) in enumerate(history[:-1])] for (*_, (_, history)) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "time_step_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "time_step_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([[int(batch_size) * [i] for (i, _) in enumerate(history[:-1])] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(time_step_indices, (num_ts * batch_size,))",
                            "Call"
                        ],
                        [
                            "tf.cast(time_step_indices, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_ts * batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "time_step_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "time_step_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([[int(batch_size) * [i] for (i, _) in enumerate(history[:-1])] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(time_step_indices, (num_ts * batch_size,))",
                            "Call"
                        ],
                        [
                            "tf.cast(time_step_indices, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_68": {
                "variable": {
                    "value": "(*_, msg_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "messages",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([history[-1]['message_from_teacher'] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[item['message_from_teacher'] for item in history[:-1]] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(messages, (num_ts * batch_size, chan_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "im_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_indices, msg_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "im_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros((num_indices, msg_size))",
                            "Call"
                        ],
                        [
                            "im_map + make_map(idx, message, num_indices)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_75": {
                "variable": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cm_map, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_totals, msg_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_totals, tf.shape(cm_map))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(im_map, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_totals, msg_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_totals, tf.shape(im_map))",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "msg_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_totals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cm_map, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_totals, msg_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_totals, tf.shape(cm_map))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(im_map, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_totals, msg_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_totals, tf.shape(im_map))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(im_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.argmax(targets[-1], axis=-1) for (_, targets, _) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.argmax(student_preds, axis=-1) for (_, _, (student_preds, _)) in games_played]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "confusion_matrix_92": {
                "variable": {
                    "value": "conf_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.argmax(targets[-1], axis=-1) for (_, targets, _) in games_played], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.argmax(student_preds, axis=-1) for (_, _, (student_preds, _)) in games_played], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "col_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "conf_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.confusion_matrix(labels, preds)",
                            "Call"
                        ],
                        [
                            "(conf_matrix / col_totals).numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_95": {
                "variable": {
                    "value": "col_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "col_totals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(conf_matrix, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.repeat(col_totals, tf.shape(conf_matrix)[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(col_totals, tf.shape(conf_matrix))",
                            "Call"
                        ],
                        [
                            "tf.transpose(col_totals)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "tf.shape(conf_matrix)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "col_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "col_totals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(conf_matrix, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.repeat(col_totals, tf.shape(conf_matrix)[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(col_totals, tf.shape(conf_matrix))",
                            "Call"
                        ],
                        [
                            "tf.transpose(col_totals)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(conf_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "variable": {
                    "value": "col_totals",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "col_totals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(conf_matrix, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.repeat(col_totals, tf.shape(conf_matrix)[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(col_totals, tf.shape(conf_matrix))",
                            "Call"
                        ],
                        [
                            "tf.transpose(col_totals)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_9": {
                "input": {
                    "value": "label_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(num_rows))",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "msg_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_11": {
                "x": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.repeat(label_indices, msg_size), map_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int64) == label",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_12": {
                "x": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.repeat(label_indices, msg_size), map_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int64) == label",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "cm_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros((num_classes, msg_size))",
                            "Call"
                        ],
                        [
                            "cm_map + make_map(cls_label, message, num_classes)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_67": {
                "input_tensor": {
                    "value": "time_step_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([[int(batch_size) * [i] for (i, _) in enumerate(history[:-1])] for (*_, (_, history)) in games_played], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(time_step_indices, (num_ts * batch_size,))",
                            "Call"
                        ],
                        [
                            "tf.cast(time_step_indices, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_76": {
                "input": {
                    "value": "im_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros((num_indices, msg_size))",
                            "Call"
                        ],
                        [
                            "im_map + make_map(idx, message, num_indices)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_96": {
                "input": {
                    "value": "conf_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.confusion_matrix(labels, preds)",
                            "Call"
                        ],
                        [
                            "(conf_matrix / col_totals).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_28": {
                "input": {
                    "value": "targets[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "input": {
                    "value": "targets[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_88": {
                "input": {
                    "value": "student_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "conf_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.confusion_matrix(labels, preds)",
                            "Call"
                        ],
                        [
                            "(conf_matrix / col_totals).numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zscomm/comm_channel.py": {
        "tensorflow": {
            "zeros_21": {
                "shape": {
                    "value": "(batch_size, self.size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(x, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(x)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.argmax(x, axis=-1), self.size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "x + tf.random.normal(tf.shape(x), mean=tf.zeros_like(x), stddev=self.noise)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_48": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(x)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.argmax(x, axis=-1), self.size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "x + tf.random.normal(tf.shape(x), mean=tf.zeros_like(x), stddev=self.noise)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normal_29": {
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "mean": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "stddev": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_29": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(x)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.argmax(x, axis=-1), self.size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "x + tf.random.normal(tf.shape(x), mean=tf.zeros_like(x), stddev=self.noise)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_30": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(x)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.argmax(x, axis=-1), self.size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "x + tf.random.normal(tf.shape(x), mean=tf.zeros_like(x), stddev=self.noise)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "zscomm/data.py": {
        "tensorflow": {
            "convert_to_tensor_40": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.concat([[inputs[b][t]] for b in range(batch_size)], 0) for t in range(num_classes + 1)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_46": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.concat([[targets[b][t]] for b in range(batch_size)], 0) for t in range(num_classes + 1)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_data_63": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_37": {
                "values": {
                    "value": "[[inputs[b][t]] for b in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_43": {
                "values": {
                    "value": "[[targets[b][t]] for b in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_26": {
                "value": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.choice(source[target])",
                            "Call"
                        ],
                        [
                            "random.choice(source[target])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_29": {
                "indices": {
                    "value": "tar - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_21": {
                "value": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.choice(source[target])",
                            "Call"
                        ],
                        [
                            "random.choice(source[target])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zscomm/loss.py": {
        "tensorflow": {
            "argmax_29": {
                "variable": {
                    "value": "protocol_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_31": {
                "variable": {
                    "value": "final_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "final_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "final_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(targets[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(final_labels, (1, batch_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_46": {
                "variable": {
                    "value": "discretised_protocol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "comm_protocol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_comm_protocol(messages)",
                            "Call"
                        ],
                        [
                            "get_comm_protocol(messages)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_47": {
                "variable": {
                    "value": "discretised_final_message",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "messages[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "discretised_final_message",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "discretised_final_message",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(messages[-1], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(discretised_final_message, (batch_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "idx_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "protocol_labels == final_labels",
                            "Compare"
                        ],
                        [
                            "discretised_protocol == discretised_final_message",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "row_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "idx_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(idx, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "row_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(idx_num, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sum, (batch_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_58": {
                "variable": {
                    "value": "protocol_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.argmax(targets[:-1], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(protocol_labels + 1, tf.float32) * idx_num",
                            "BinOp"
                        ],
                        [
                            "tf.cast(correct_preds, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(correct_preds - 1, num_classes, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([correct_preds, uniform_preds], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(correct_preds, axis=-2)",
                            "Call"
                        ],
                        [
                            "correct_preds / row_sums",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_62": {
                "variable": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "correct_preds - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(targets)[2]",
                            "Subscript"
                        ],
                        [
                            "protocol_msgs.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_65": {
                "variable": {
                    "value": "uniform_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, pred_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "uniform_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "uniform_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones((batch_size, pred_size))",
                            "Call"
                        ],
                        [
                            "uniform_preds * tf.cast(dont_know, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(uniform_preds, (batch_size, 1, pred_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 1, pred_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[correct_preds, uniform_preds]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(protocol_labels + 1, tf.float32) * idx_num",
                            "BinOp"
                        ],
                        [
                            "tf.cast(correct_preds, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(correct_preds - 1, num_classes, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([correct_preds, uniform_preds], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(correct_preds, axis=-2)",
                            "Call"
                        ],
                        [
                            "correct_preds / row_sums",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(protocol_labels + 1, tf.float32) * idx_num",
                            "BinOp"
                        ],
                        [
                            "tf.cast(correct_preds, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(correct_preds - 1, num_classes, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([correct_preds, uniform_preds], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(correct_preds, axis=-2)",
                            "Call"
                        ],
                        [
                            "correct_preds / row_sums",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(correct_preds, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sums, (batch_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(protocol_msgs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sums, (tf.shape(row_sums)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_sums, num_classes, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "teacher_utt",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "history[-1]['teacher_utterance']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_109": {
                "variable": {
                    "value": "(num_msgs, batch_size, channel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "messages",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_sent_messages(history)",
                            "Call"
                        ],
                        [
                            "get_sent_messages(history)",
                            "Call"
                        ],
                        [
                            "get_sent_messages(history)",
                            "Call"
                        ],
                        [
                            "get_sent_messages(history)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_114": {
                "variable": {
                    "value": "protocol_msgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk->jki",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "protocol_msgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "messages[:-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.einsum('ijk->jki', protocol_msgs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(protocol_msgs, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "protocol_msgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "protocol_msgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "messages[:-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.einsum('ijk->jki', protocol_msgs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(protocol_msgs, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(batch_size * channel_size, num_classes)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "protocol_msgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "messages[:-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.einsum('ijk->jki', protocol_msgs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(protocol_msgs, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(correct_preds, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sums, (batch_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(protocol_msgs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sums, (tf.shape(row_sums)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_sums, num_classes, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(row_sums)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "repeat_124": {
                "variable": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(correct_preds, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sums, (batch_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(protocol_msgs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sums, (tf.shape(row_sums)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_sums, num_classes, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(targets)[2]",
                            "Subscript"
                        ],
                        [
                            "protocol_msgs.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cce(probs, probs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(entropy, (batch_size, channel_size))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(entropy ** beta, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, channel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "variable": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "entropy ** beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_7": {
                "value": {
                    "value": "[item['message_from_teacher'] for item in history]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_13": {
                "value": {
                    "value": "[item['teacher_utterance'] for item in history]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "einsum_19": {
                "equation": {
                    "value": "ijk->jik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "messages[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_102": {
                "input_tensor": {
                    "value": "tf.reduce_sum(protocol, axis=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "comm_protocol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_comm_protocol(messages)",
                            "Call"
                        ],
                        [
                            "get_comm_protocol(messages)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_35": {
                "a": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "protocol_labels == final_labels",
                            "Compare"
                        ],
                        [
                            "discretised_protocol == discretised_final_message",
                            "Compare"
                        ]
                    ]
                }
            },
            "shape_45": {
                "input": {
                    "value": "comm_protocol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_comm_protocol(messages)",
                            "Call"
                        ],
                        [
                            "get_comm_protocol(messages)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_58": {
                "input": {
                    "value": "targets[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_59": {
                "x": {
                    "value": "protocol_labels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(protocol_labels + 1, tf.float32) * idx_num",
                            "BinOp"
                        ],
                        [
                            "tf.cast(correct_preds, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(correct_preds - 1, num_classes, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([correct_preds, uniform_preds], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(correct_preds, axis=-2)",
                            "Call"
                        ],
                        [
                            "correct_preds / row_sums",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_66": {
                "x": {
                    "value": "dont_know",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "row_sum == 0.0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "protocol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_comm_protocol(messages)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_123": {
                "input": {
                    "value": "row_sums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(correct_preds, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sums, (batch_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(protocol_msgs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_sums, (tf.shape(row_sums)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.repeat(row_sums, num_classes, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zscomm/play_game.py": {
        "tensorflow": {
            "convert_to_tensor_25": {
                "variable": {
                    "value": "prev_utts",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.argmax(item['message_from_teacher'], axis=-1) for item in history]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "prev_utts",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prev_utts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([tf.argmax(item['message_from_teacher'], axis=-1) for item in history])",
                            "Call"
                        ],
                        [
                            "tf.transpose(prev_utts)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_31": {
                "variable": {
                    "value": "possible_utts",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[list(range(channel_size))]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_33": {
                "variable": {
                    "value": "possible_utts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "possible_utts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(range(channel_size))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([list(range(channel_size))], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.repeat(possible_utts, len(history), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.repeat([possible_utts], batch_size, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "len(history)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_34": {
                "variable": {
                    "value": "possible_utts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[possible_utts]",
                    "type": "List",
                    "possible_values": []
                },
                "repeats": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(message)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_42": {
                "variable": {
                    "value": "random_choice",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(noise, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "channel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(message)[1]",
                            "Subscript"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "random_choice",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "random_choice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.repeat(tf.argmax(noise, axis=1), channel_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(random_choice, (batch_size, channel_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, channel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_47": {
                "variable": {
                    "value": "possible_mutations",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "possible_mutations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "possible_utts[:, 0, :][random_choice_idx]",
                            "Subscript"
                        ],
                        [
                            "tf.one_hot(possible_mutations, channel_size)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(possible_mutations)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "channel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(message)[1]",
                            "Subscript"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_48": {
                "variable": {
                    "value": "possible_mutations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "possible_mutations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "possible_utts[:, 0, :][random_choice_idx]",
                            "Subscript"
                        ],
                        [
                            "tf.one_hot(possible_mutations, channel_size)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(possible_mutations)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_50": {
                "variable": {
                    "value": "rand_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rand_samples < p_mutate",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_75": {
                "variable": {
                    "value": "indices_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "indices_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(indices_col)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_77": {
                "variable": {
                    "value": "indices_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[list(range(batch_size))]",
                    "type": "List",
                    "possible_values": []
                },
                "repeats": {
                    "value": "channel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(message)[1]",
                            "Subscript"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "variable": {
                    "value": "indices_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "indices_row",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.repeat([list(range(batch_size))], channel_size, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices_row)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_80": {
                "variable": {
                    "value": "permutation_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[indices_row, indices_col]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "variable": {
                    "value": "no_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_nd_86": {
                "params": {
                    "value": "message",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "permutation_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([indices_row, indices_col], axis=-1)",
                            "Call"
                        ],
                        [
                            "create_permutation_map(batch_size, comm_channel.size, permutation_subset_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "stop_gradient_198": {
                "variable": {
                    "value": "message_from_teacher",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "message_from_teacher",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "comm_channel(teacher_utterance, training=training)",
                            "Call"
                        ],
                        [
                            "apply_permutation(permutation_map, message_from_teacher)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(message_from_teacher)",
                            "Call"
                        ],
                        [
                            "comm_channel(teacher_utterance, training=training)",
                            "Call"
                        ],
                        [
                            "apply_permutation(permutation_map, message_from_teacher)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(message_from_teacher)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_14": {
                "input": {
                    "value": "message",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_15": {
                "input": {
                    "value": "message",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "tensor": {
                    "value": "tf.repeat(prev_utts, channel_size, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "possible_utts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "input_tensor": {
                    "value": "tf.cast(idx, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "uniform_41": {
                "shape": {
                    "value": "idx.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_41": {
                "x": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "possible_utts != tf.reshape(tf.repeat(prev_utts, channel_size, axis=-1), possible_utts.shape)",
                            "Compare"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(idx, tf.int64), axis=-2) == len(history)",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "input": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(idx.shape) * tf.cast(idx, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(all_symbols, permutation_subset_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_112": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(all_symbols, permutation_subset_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_26": {
                "input": {
                    "value": "item['message_from_teacher']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_36": {
                "input": {
                    "value": "prev_utts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([tf.argmax(item['message_from_teacher'], axis=-1) for item in history])",
                            "Call"
                        ],
                        [
                            "tf.transpose(prev_utts)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "channel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(message)[1]",
                            "Subscript"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_38": {
                "x": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "possible_utts != tf.reshape(tf.repeat(prev_utts, channel_size, axis=-1), possible_utts.shape)",
                            "Compare"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(idx, tf.int64), axis=-2) == len(history)",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_162": {
                "variable": {
                    "value": "message_from_teacher",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "message_from_teacher",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "comm_channel(teacher_utterance, training=training)",
                            "Call"
                        ],
                        [
                            "apply_permutation(permutation_map, message_from_teacher)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(message_from_teacher)",
                            "Call"
                        ],
                        [
                            "comm_channel(teacher_utterance, training=training)",
                            "Call"
                        ],
                        [
                            "apply_permutation(permutation_map, message_from_teacher)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(message_from_teacher)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_21": {
                "input": {
                    "value": "message",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "zscomm/plot_game.py": {
        "tensorflow": {
            "shape_36": {
                "variable": {
                    "value": "(_, _, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_109": {
                "variable": {
                    "value": "tar_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets[i][select_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[item['message_from_teacher'][select_batch], tf.nn.softmax(item['teacher_utterance'][select_batch])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([item['message_from_teacher'][select_batch], tf.nn.softmax(item['teacher_utterance'][select_batch])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vals, (np.prod(vals.shape),))",
                            "Call"
                        ],
                        [
                            "item['message_from_teacher'][select_batch]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(np.prod(vals.shape),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "logits": {
                    "value": "item['teacher_utterance'][select_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "zscomm/vary_play_param_experiment.py": {
        "tensorflow": {}
    }
}