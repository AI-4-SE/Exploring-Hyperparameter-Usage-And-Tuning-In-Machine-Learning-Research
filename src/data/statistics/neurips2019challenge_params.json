{
    "src/layers/BasicConvLSTMCell.py": {
        "tensorflow": {
            "random_uniform_initializer_27": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-initializer",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "shape": {
                    "value": "[self.batch, self.height, self.width, self.num_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_55": {
                "variable": {
                    "value": "(i_s, g_s, f_s, o_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "s_cc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer(self.num_hidden_in, self.num_hidden * 4), name='spatio_state_to_state')(m)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_56": {
                "variable": {
                    "value": "(i_t, g_t, f_t, o_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "t_cc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer(self.num_hidden_in, self.num_hidden * 4), name='time_state_to_state')(h)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_57": {
                "variable": {
                    "value": "(i_x, g_x, f_x, o_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_cc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer(x_shape_in, self.num_hidden * 4), name='input_to_state')(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_x + i_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "variable": {
                    "value": "i_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_x + i_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "g_x + g_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "g_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "g_x + g_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_x + f_t + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "f_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_x + f_s + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o_x + o_t + o_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_22": {
                "minval": {
                    "value": "-random_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "random_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.sqrt(6.0 / (dim_in + dim_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "self.layer_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_38": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(self.num_hidden_in, self.num_hidden * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "time_state_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_43": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(self.num_hidden_in, self.num_hidden * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "spatio_state_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_49": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(x_shape_in, self.num_hidden * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "input_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_69": {
                "filters": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(self.num_hidden * 2, self.num_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "cell_reduce",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_72": {
                "x": {
                    "value": "cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([new_c, new_m], 3)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden, 1, 1, padding='same', kernel_initializer=self.initializer(self.num_hidden * 2, self.num_hidden), name='cell_reduce')(cell)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/layers/MIMBlock.py": {
        "tensorflow": {
            "random_uniform_initializer_37": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-initializer",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "shape": {
                    "value": "[self.batch, self.height, self.width, self.num_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "(i_h, g_h, f_h, o_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "h_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer(self.num_hidden, self.num_hidden * 4), name='state_to_state')(h_t)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_55": {
                "variable": {
                    "value": "ct_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c_t_weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.height, self.width, self.num_hidden * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_57": {
                "variable": {
                    "value": "ct_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(c_t, [1, 1, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ct_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('c_t_weight', [self.height, self.width, self.num_hidden * 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_58": {
                "variable": {
                    "value": "(i_c, f_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "ct_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.tile(c_t, [1, 1, 1, 2]), ct_weight)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "i_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "i_h + i_c",
                            "BinOp"
                        ],
                        [
                            "i_ + i_x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(i_)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i_x + i_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "f_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_ + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "oc_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "oc_weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.height, self.width, self.num_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_86": {
                "variable": {
                    "value": "o_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_ * c_t + i_ * tf.nn.tanh(g_)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "oc_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('oc_weight', [self.height, self.width, self.num_hidden])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "diff_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "split_120": {
                "variable": {
                    "value": "(i_s, g_s, f_s, o_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "s_cc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer(self.num_hidden, self.num_hidden * 4), name='spatio_state_to_state')(m)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_121": {
                "variable": {
                    "value": "(i_t, g_t, o_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "t_cc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 3, self.filter_size, 1, padding='same', kernel_initializer=self.initializer(self.num_hidden, self.num_hidden * 3), name='time_state_to_state')(h)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_122": {
                "variable": {
                    "value": "(i_x, g_x, f_x, o_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_cc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer(x_shape_in, self.num_hidden * 4), name='input_to_state')(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_x + i_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "i_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_x + i_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "g_x + g_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_127": {
                "variable": {
                    "value": "g_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "g_x + g_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "variable": {
                    "value": "f_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_x + f_s + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o_x + o_t + o_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_32": {
                "minval": {
                    "value": "-random_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "random_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.sqrt(6.0 / (dim_in + dim_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "self.layer_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_73": {
                "variable": {
                    "value": "(i_x, g_x, f_x, o_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer(self.num_hidden, self.num_hidden * 4), name='input_to_state')(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "self.layer_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_49": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(self.num_hidden, self.num_hidden * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "state_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_57": {
                "input": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_state()",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "x": {
                    "value": "o_ + o_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "x": {
                    "value": "c_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_ * c_t + i_ * tf.nn.tanh(g_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2D_103": {
                "filters": {
                    "value": "self.num_hidden * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(self.num_hidden, self.num_hidden * 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "time_state_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_108": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(self.num_hidden, self.num_hidden * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "spatio_state_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_114": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(x_shape_in, self.num_hidden * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "input_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_134": {
                "filters": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "cell_reduce",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_136": {
                "x": {
                    "value": "cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([new_c, new_m], 3)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden, 1, 1, padding='same', name='cell_reduce')(cell)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_66": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer(self.num_hidden, self.num_hidden * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "input_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_82": {
                "x": {
                    "value": "g_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_h",
                            "Name"
                        ],
                        [
                            "g_ + g_x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(g_x + g_s)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/layers/MIMN.py": {
        "tensorflow": {
            "random_uniform_initializer_27": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-initializer",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.batch, self.height, self.width, self.num_hidden]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_43": {
                "variable": {
                    "value": "(i_h, g_h, f_h, o_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "h_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer, name='state_to_state')(h_t)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "ct_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c_t_weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.height, self.width, self.num_hidden * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_47": {
                "variable": {
                    "value": "ct_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(c_t, [1, 1, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ct_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('c_t_weight', [self.height, self.width, self.num_hidden * 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_48": {
                "variable": {
                    "value": "(i_c, f_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "ct_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.tile(c_t, [1, 1, 1, 2]), ct_weight)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "i_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "i_h + i_c",
                            "BinOp"
                        ],
                        [
                            "i_ + i_x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(i_)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "f_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_ + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "oc_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "oc_weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.height, self.width, self.num_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_74": {
                "variable": {
                    "value": "o_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_ * c_t + i_ * tf.nn.tanh(g_)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "oc_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('oc_weight', [self.height, self.width, self.num_hidden])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "self.layer_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_61": {
                "variable": {
                    "value": "(i_x, g_x, f_x, o_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(self.num_hidden * 4, self.filter_size, 1, padding='same', kernel_initializer=self.initializer, name='input_to_state')(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "state_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_47": {
                "input": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_state()",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_76": {
                "x": {
                    "value": "o_ + o_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "x": {
                    "value": "c_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_ * c_t + i_ * tf.nn.tanh(g_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2D_56": {
                "filters": {
                    "value": "self.num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_to_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_70": {
                "x": {
                    "value": "g_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_h",
                            "Name"
                        ],
                        [
                            "g_ + g_x",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/attn.py": {
        "tensorflow": {
            "Dense_7": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_8": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_9": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_12": {
                "variable": {
                    "value": "hidden_with_time_axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_17": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.V(tf.nn.tanh(self.W1(values) + self.W2(hidden_with_time_axis)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "variable": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "context_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_weights * values",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(context_vector, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_14": {
                "x": {
                    "value": "self.W1(values) + self.W2(hidden_with_time_axis)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/ed.py": {
        "tensorflow": {
            "Adam_58": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.configs.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.configs.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_61": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.compat.v1.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_62": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_63": {
                "variable": {
                    "value": "configProt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_67": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "configProt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "split_88": {
                "variable": {
                    "value": "(input_images, output_images)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((base_img, images), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[input_length, total_length - input_length]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "base_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_90": {
                "variable": {
                    "value": "base_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(input_images, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(base_img, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(base_img, images)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_157": {
                "variable": {
                    "value": "time_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "weekday",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "pred_weekday",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(1, activation='sigmoid')(time_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_204": {
                "variable": {
                    "value": "gen_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "gen_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(gen_images, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_73": {
                "minval": {
                    "value": "-random_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "random_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.sqrt(6.0 / (dim_in + dim_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_52": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_155": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_156": {
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_213": {
                "t": {
                    "value": "gen_images - images[:, -5]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "latest_checkpoint_225": {
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.configs.save_dir, 'model.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_23": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_45": {
                "variable": {
                    "value": "_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_list[1]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.l2_loss(gen_images - images[:, -5]) + time_loss",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.compat.v1.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "predin",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "predout",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "tf.compat.v1.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_192": {
                "filters": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.w_initializer(num_hidden[num_layers - 1], output_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "back_to_pixel",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_149": {
                "input": {
                    "value": "hidden_state[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_187": {
                "input": {
                    "value": "hidden_state[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer.py": {
        "tensorflow": {
            "run_147": {
                "argv": {
                    "value": "sys.argv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_60": {
                "dims": {
                    "value": "[272, FLAGS.total_length, ORIGINAL_SHAPE[0], ORIGINAL_SHAPE[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_67": {
                "dims": {
                    "value": "[FLAGS.total_length, ORIGINAL_SHAPE[0], ORIGINAL_SHAPE[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_68": {
                "dims": {
                    "value": "[FLAGS.total_length - FLAGS.input_length - 1, ORIGINAL_SHAPE[0], ORIGINAL_SHAPE[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_70": {
                "dims": {
                    "value": "[FLAGS.total_length, ORIGINAL_SHAPE[0], ORIGINAL_SHAPE[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "tensorflow": {
            "split_29": {
                "value": {
                    "value": "ims",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "split_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0] * n_gpu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_23": {
                "input": {
                    "value": "ims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_26": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.minimum(batch_size - 1, drawn_batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_26": {
                "x": {
                    "value": "batch_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "drawn_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(ims)[0]",
                            "Subscript"
                        ],
                        [
                            "drawn_batch_size - batch_size",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}