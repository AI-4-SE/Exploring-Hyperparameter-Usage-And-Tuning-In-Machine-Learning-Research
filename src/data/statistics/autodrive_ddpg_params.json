{
    "code/autodrive/keras-rl/rl/agents/dqn.py": {
        "tensorflow": {
            "expand_dims_430": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.tile(K.zeros((1,)), [nb_rows])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scan_461": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "L_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(1, [zeros, L_flat])",
                            "Call"
                        ],
                        [
                            "tf.concat([zeros, L_flat], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat(1, [zeros, L_flat])",
                            "Call"
                        ],
                        [
                            "tf.concat([zeros, L_flat], 1)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[K.zeros((self.nb_actions, self.nb_actions)), K.zeros((self.nb_actions, self.nb_actions))]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_433": {
                "variable": {
                    "value": "L_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[zeros, L_flat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_458": {
                "variable": {
                    "value": "L_",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, diag_mask)",
                            "Call"
                        ],
                        [
                            "K.zeros((self.nb_actions, self.nb_actions))",
                            "Call"
                        ],
                        [
                            "T.set_subtensor(x_[np.diag_indices(self.nb_actions)], x)",
                            "Call"
                        ],
                        [
                            "K.exp(x) + K.epsilon()",
                            "BinOp"
                        ],
                        [
                            "x_ + x * (1.0 - diag_mask)",
                            "BinOp"
                        ],
                        [
                            "K.zeros((self.nb_actions, self.nb_actions))",
                            "Call"
                        ],
                        [
                            "T.set_subtensor(x_[np.tril_indices(self.nb_actions)], x)",
                            "Call"
                        ],
                        [
                            "T.set_subtensor(x_[np.diag_indices(self.nb_actions)], diag)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tril_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.nb_actions, self.nb_actions), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_499": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.tile(K.zeros((1,)), [nb_rows])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scan_512": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "L_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(1, [zeros, L_flat])",
                            "Call"
                        ],
                        [
                            "tf.concat([zeros, L_flat], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat(1, [zeros, L_flat])",
                            "Call"
                        ],
                        [
                            "tf.concat([zeros, L_flat], 1)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "K.zeros((self.nb_actions, self.nb_actions))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_429": {
                "input": {
                    "value": "L_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(1, [zeros, L_flat])",
                            "Call"
                        ],
                        [
                            "tf.concat([zeros, L_flat], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat(1, [zeros, L_flat])",
                            "Call"
                        ],
                        [
                            "tf.concat([zeros, L_flat], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_430": {
                "input": {
                    "value": "K.zeros((1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[nb_rows]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_436": {
                "variable": {
                    "value": "L_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, L_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_502": {
                "variable": {
                    "value": "L_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[zeros, L_flat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_509": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.nb_actions, self.nb_actions), dtype='int32')",
                            "Call"
                        ],
                        [
                            "np.zeros(1 + nb_elems)",
                            "Call"
                        ],
                        [
                            "K.variable(diag_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_459": {
                "a": {
                    "value": "L_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x_, tril_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_498": {
                "input": {
                    "value": "L_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(1, [zeros, L_flat])",
                            "Call"
                        ],
                        [
                            "tf.concat([zeros, L_flat], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat(1, [zeros, L_flat])",
                            "Call"
                        ],
                        [
                            "tf.concat([zeros, L_flat], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_499": {
                "input": {
                    "value": "K.zeros((1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[nb_rows]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_505": {
                "variable": {
                    "value": "L_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, L_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/autodrive/keras-rl/rl/util.py": {
        "tensorflow": {
            "select_77": {
                "condlist": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.abs(x) < clip_value",
                            "Compare"
                        ]
                    ]
                },
                "choicelist": {
                    "value": "squared_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * K.square(x)",
                            "BinOp"
                        ]
                    ]
                },
                "default": {
                    "value": "linear_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_value * (K.abs(x) - 0.5 * clip_value)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_79": {
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.abs(x) < clip_value",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "squared_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * K.square(x)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "linear_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_value * (K.abs(x) - 0.5 * clip_value)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/cnn_vae/dataset_api.py": {
        "tensorflow": {
            "read_file_34": {
                "variable": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_jpeg_35": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_37": {
                "variable": {
                    "value": "image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(image_decoded, self.size)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image_resized, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_session_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/cnn_vae/layers.py": {
        "tensorflow": {
            "Lambda_14": {
                "function": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_22": {
                "function": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_13": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride * input_shape[1], stride * input_shape[2])",
                            "Tuple"
                        ],
                        [
                            "(stride * input_shape[1], stride * input_shape[2])",
                            "Tuple"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_bilinear_21": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride * input_shape[1], stride * input_shape[2])",
                            "Tuple"
                        ],
                        [
                            "(stride * input_shape[1], stride * input_shape[2])",
                            "Tuple"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/cnn_vae/main.py": {
        "tensorflow": {
            "constant_43": {
                "variable": {
                    "value": "train_files",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "filenames[:training_samples]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "val_files",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "filenames[training_samples:training_samples + val_samples]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "EarlyStopping_54": {
                "patience": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TensorBoard_56": {
                "log_dir": {
                    "value": "./logs",
                    "type": "str",
                    "possible_values": []
                },
                "write_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "write_grads": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "write_images": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_58": {
                "filepath": {
                    "value": "weights.{epoch:02d}-{val_loss:.2f}.hdf5",
                    "type": "str",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "period": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_60": {
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.001 * learning_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/cnn_vae/notebooks/dataset_api.py": {
        "tensorflow": {
            "read_file_34": {
                "variable": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_jpeg_35": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_37": {
                "variable": {
                    "value": "image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(image_decoded, self.size)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image_resized, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/cnn_vae/vgg_vae.py": {
        "tensorflow": {
            "Input_15": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "INPUT_DIMS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(160, 120, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "encoder_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_52": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(LATENT_DIMS,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_94": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(batch_size,) + INPUT_DIMS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + z_log_var - tf.keras.backend.square(z_mean) - tf.keras.backend.exp(z_log_var)",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.sum(kl_loss, axis=-1)",
                            "Call"
                        ],
                        [
                            "kl_loss * -0.5",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "vae_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reconstruction_loss + kl_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Model_111": {
                "variable": {
                    "value": "vae",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(batch_shape=(batch_size,) + INPUT_DIMS)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "vae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_80": {
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=INPUT_DIMS, name='encoder_input')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=(LATENT_DIMS,), name='decoder_input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Cropping2D(cropping=(0, 4), name='output')(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_16": {
                "padding": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "padded_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "LATENT_DIMS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "z_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_44": {
                "units": {
                    "value": "LATENT_DIMS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "z_logvar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_47": {
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=INPUT_DIMS, name='encoder_input')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=(LATENT_DIMS,), name='decoder_input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "[z_mean, z_logvar]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_56": {
                "units": {
                    "value": "flattened_interim_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interim_dims[0] * interim_dims[1] * interim_dims[2]",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_59": {
                "target_shape": {
                    "value": "interim_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2D_76": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "padded_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Cropping2D_78": {
                "cropping": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(LATENT_DIMS, activation='relu', name='z_mean')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_87": {
                "input": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(LATENT_DIMS, activation='relu', name='z_mean')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_97": {
                "function": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_101": {
                "structure": {
                    "value": "_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_105": {
                "x": {
                    "value": "z_log_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2D_24": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'block{}_pool'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2D_32": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'block{}_pool'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_90": {
                "x": {
                    "value": "z_log_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_105": {
                "x": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(LATENT_DIMS, activation='relu', name='z_mean')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_22": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "filters // 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'block{}_conv{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_30": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "filters // 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'block{}_conv{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_65": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "filters // 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'block{}_conv{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_72": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "filters // 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'block{}_conv{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}