{
    "performance_comparison.py": {
        "sklearn": {
            "precision_recall_curve_23": {
                "variable": {
                    "value": "(precision, recall, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "compute_matches(retrieved_all[vpr_technique], ground_truth_info)",
                            "Call"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "scores_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_27": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "compute_matches(retrieved_all[vpr_technique], ground_truth_info)",
                            "Call"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "auc_38": {
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(matches, scores_all)",
                            "Call"
                        ],
                        [
                            "compute_precision_recall(matches, scores_all[vpr_technique])",
                            "Call"
                        ],
                        [
                            "recall",
                            "Method Argument"
                        ],
                        [
                            "recall",
                            "Method Argument"
                        ],
                        [
                            "recall",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_precision_recall(matches, scores_all[vpr_technique])",
                            "Call"
                        ],
                        [
                            "prec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_35": {
                "y_true": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "compute_matches(retrieved_all[vpr_technique], ground_truth_info)",
                            "Call"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ],
                        [
                            "matches",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ],
                        [
                            "scores_all",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "VPR_Techniques/NetVLAD/NetVLAD.py": {
        "tensorflow": {
            "disable_v2_behavior_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_18": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_20": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_44": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_46": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "VPR_Techniques/NetVLAD/netvlad_tf/image_descriptor.py": {
        "tensorflow": {
            "Saver_21": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_22": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.tf_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.tf_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "VPR_Techniques/NetVLAD/netvlad_tf/layers.py": {
        "tensorflow": {
            "disable_v2_behavior_2": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_12": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_clusters",
                            "variable"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "assign_weight_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "assignment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_15": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, K, 1, use_bias=False, kernel_initializer=assign_weight_initializer, name='assignment')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_19": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(s)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(a, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_centers",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, D, K]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "cluster_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_28": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, -1) + C",
                            "BinOp"
                        ],
                        [
                            "a * v",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(v, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "matconvnetNormalize(v, 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "matconvnetNormalize(tf.layers.flatten(v), 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, -1) + C",
                            "BinOp"
                        ],
                        [
                            "a * v",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(v, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "matconvnetNormalize(v, 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "matconvnetNormalize(tf.layers.flatten(v), 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, -1) + C",
                            "BinOp"
                        ],
                        [
                            "a * v",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(v, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "matconvnetNormalize(v, 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "matconvnetNormalize(tf.layers.flatten(v), 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_41": {
                "x": {
                    "value": "tf.reduce_sum(inputs ** 2, axis=-1, keep_dims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_36": {
                "structure": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, -1) + C",
                            "BinOp"
                        ],
                        [
                            "a * v",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(v, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "matconvnetNormalize(v, 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "matconvnetNormalize(tf.layers.flatten(v), 1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_41": {
                "input_tensor": {
                    "value": "inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "VPR_Techniques/NetVLAD/netvlad_tf/mat_to_checkpoint.py": {
        "tensorflow": {
            "Saver_8": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_11": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "VPR_Techniques/NetVLAD/netvlad_tf/net_from_mat.py": {
        "tensorflow": {
            "get_variable_38": {
                "variable": {
                    "value": "average_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "average_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(matnet.meta.normalization.averageImage[0, 0, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "vgg16_netvlad_pca",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_39": {
                "value": {
                    "value": "matnet.meta.normalization.averageImage[0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "input": {
                    "value": "tf_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "b.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(tf_layers[-1], 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "b.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_85": {
                "features": {
                    "value": "tf_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_73": {
                "input": {
                    "value": "tf_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pooling2d_90": {
                "inputs": {
                    "value": "tf_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "layer.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_63": {
                "value": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weights[0]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(w, 0), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_64": {
                "value": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weights[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_initializer_79": {
                "value": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weights[0]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(w, 0), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_80": {
                "value": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weights[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_112": {
                "variable": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_108": {
                "value": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weights[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_initializer_109": {
                "value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.weights[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_114": {
                "structure": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf_layers[-1], perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_117": {
                "structure": {
                    "value": "tf_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "VPR_Techniques/NetVLAD/netvlad_tf/nets.py": {
        "tensorflow": {
            "disable_v2_behavior_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "average_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "average_rgb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image_batch.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image_batch, np.ones((1, 1, 1, 3)), np.ones(4).tolist(), 'VALID')",
                            "Call"
                        ],
                        [
                            "x - average_rgb",
                            "BinOp"
                        ],
                        [
                            "vggConv(x, '1_1', 64, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '1_2', 64, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_1', 128, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_2', 128, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_1', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_2', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_3', 256, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_3', 512, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_3', 512, False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "layers.netVLAD(x, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf.expand_dims(tf.expand_dims(x, 1), 1), 4096, 1, 1, name='WPCA')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.layers.flatten(x), dim=-1)",
                            "Call"
                        ],
                        [
                            "image_batch",
                            "variable"
                        ]
                    ]
                }
            },
            "relu_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image_batch, np.ones((1, 1, 1, 3)), np.ones(4).tolist(), 'VALID')",
                            "Call"
                        ],
                        [
                            "x - average_rgb",
                            "BinOp"
                        ],
                        [
                            "vggConv(x, '1_1', 64, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '1_2', 64, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_1', 128, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_2', 128, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_1', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_2', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_3', 256, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_3', 512, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_3', 512, False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "layers.netVLAD(x, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf.expand_dims(tf.expand_dims(x, 1), 1), 4096, 1, 1, name='WPCA')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.layers.flatten(x), dim=-1)",
                            "Call"
                        ],
                        [
                            "image_batch",
                            "variable"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image_batch, np.ones((1, 1, 1, 3)), np.ones(4).tolist(), 'VALID')",
                            "Call"
                        ],
                        [
                            "x - average_rgb",
                            "BinOp"
                        ],
                        [
                            "vggConv(x, '1_1', 64, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '1_2', 64, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_1', 128, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_2', 128, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_1', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_2', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_3', 256, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_3', 512, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_3', 512, False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "layers.netVLAD(x, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf.expand_dims(tf.expand_dims(x, 1), 1), 4096, 1, 1, name='WPCA')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.layers.flatten(x), dim=-1)",
                            "Call"
                        ],
                        [
                            "image_batch",
                            "variable"
                        ]
                    ]
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image_batch, np.ones((1, 1, 1, 3)), np.ones(4).tolist(), 'VALID')",
                            "Call"
                        ],
                        [
                            "x - average_rgb",
                            "BinOp"
                        ],
                        [
                            "vggConv(x, '1_1', 64, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '1_2', 64, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_1', 128, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_2', 128, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_1', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_2', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_3', 256, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_3', 512, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_3', 512, False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "layers.netVLAD(x, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf.expand_dims(tf.expand_dims(x, 1), 1), 4096, 1, 1, name='WPCA')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.layers.flatten(x), dim=-1)",
                            "Call"
                        ],
                        [
                            "image_batch",
                            "variable"
                        ]
                    ]
                }
            },
            "l2_normalize_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image_batch, np.ones((1, 1, 1, 3)), np.ones(4).tolist(), 'VALID')",
                            "Call"
                        ],
                        [
                            "x - average_rgb",
                            "BinOp"
                        ],
                        [
                            "vggConv(x, '1_1', 64, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '1_2', 64, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_1', 128, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_2', 128, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_1', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_2', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_3', 256, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_3', 512, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_3', 512, False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "layers.netVLAD(x, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf.expand_dims(tf.expand_dims(x, 1), 1), 4096, 1, 1, name='WPCA')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.layers.flatten(x), dim=-1)",
                            "Call"
                        ],
                        [
                            "image_batch",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(x, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "WPCA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.flatten(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "vgg16_netvlad_pca",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "np.ones((1, 1, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "np.ones(4).tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "name": {
                    "value": "'conv%s' % numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_43": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image_batch, np.ones((1, 1, 1, 3)), np.ones(4).tolist(), 'VALID')",
                            "Call"
                        ],
                        [
                            "x - average_rgb",
                            "BinOp"
                        ],
                        [
                            "vggConv(x, '1_1', 64, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '1_2', 64, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_1', 128, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_2', 128, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_1', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_2', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_3', 256, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_3', 512, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_3', 512, False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "layers.netVLAD(x, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf.expand_dims(tf.expand_dims(x, 1), 1), 4096, 1, 1, name='WPCA')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.layers.flatten(x), dim=-1)",
                            "Call"
                        ],
                        [
                            "image_batch",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_78": {
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(image_batch, np.ones((1, 1, 1, 3)), np.ones(4).tolist(), 'VALID')",
                            "Call"
                        ],
                        [
                            "x - average_rgb",
                            "BinOp"
                        ],
                        [
                            "vggConv(x, '1_1', 64, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '1_2', 64, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_1', 128, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '2_2', 128, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_1', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_2', 256, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '3_3', 256, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '4_3', 512, False)",
                            "Call"
                        ],
                        [
                            "vggPool(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_1', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_2', 512, True)",
                            "Call"
                        ],
                        [
                            "vggConv(x, '5_3', 512, False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "layers.netVLAD(x, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tf.expand_dims(tf.expand_dims(x, 1), 1), 4096, 1, 1, name='WPCA')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.layers.flatten(x), dim=-1)",
                            "Call"
                        ],
                        [
                            "image_batch",
                            "variable"
                        ]
                    ]
                }
            }
        }
    }
}